$('#tcb-call').on('click', function() {
    $('.hide-call').toggleClass('hide-zvonok');
});
$('#close-call').on('click', function() {
    $('.hide-call').toggleClass('hide-zvonok');
});


(function ($, window, document) {
    var Carousel = {
        init: function (options, el) { var base = this; base.$elem = $(el); base.options = $.extend({}, $.fn.owlCarousel.options, base.$elem.data(), options); base.userOptions = options; base.loadContent(); }, loadContent: function () {
            var base = this, url; function getData(data) {
                var i, content = ""; if (typeof base.options.jsonSuccess === "function") { base.options.jsonSuccess.apply(this, [data]); } else {
                    for (i in data.owl) { if (data.owl.hasOwnProperty(i)) { content += data.owl[i].item; } }
                    base.$elem.html(content);
                }
                base.logIn();
            }
            if (typeof base.options.beforeInit === "function") { base.options.beforeInit.apply(this, [base.$elem]); }
            if (typeof base.options.jsonPath === "string") { url = base.options.jsonPath; $.getJSON(url, getData); } else { base.logIn(); }
        }, logIn: function () { var base = this; base.$elem.data("owl-originalStyles", base.$elem.attr("style")); base.$elem.data("owl-originalClasses", base.$elem.attr("class")); base.$elem.css({ opacity: 0 }); base.orignalItems = base.options.items; base.checkBrowser(); base.wrapperWidth = 0; base.checkVisible = null; base.setVars(); }, setVars: function () {
            var base = this; if (base.$elem.children().length === 0) { return false; }
            base.baseClass(); base.eventTypes(); base.$userItems = base.$elem.children(); base.itemsAmount = base.$userItems.length; base.wrapItems(); base.$owlItems = base.$elem.find(".owl-item"); base.$owlWrapper = base.$elem.find(".owl-wrapper"); base.playDirection = "next"; base.prevItem = 0; base.prevArr = [0]; base.currentItem = 0; base.customEvents(); base.onStartup();
        }, onStartup: function () {
            var base = this; base.updateItems(); base.calculateAll(); base.buildControls(); base.updateControls(); base.response(); base.moveEvents(); base.stopOnHover(); base.owlStatus(); if (base.options.transitionStyle !== false) { base.transitionTypes(base.options.transitionStyle); }
            if (base.options.autoPlay === true) { base.options.autoPlay = 5000; }
            base.play(); base.$elem.find(".owl-wrapper").css("display", "block"); if (!base.$elem.is(":visible")) { base.watchVisibility(); } else { base.$elem.css("opacity", 1); }
            base.onstartup = false; base.eachMoveUpdate(); if (typeof base.options.afterInit === "function") { base.options.afterInit.apply(this, [base.$elem]); }
        }, eachMoveUpdate: function () {
            var base = this; if (base.options.lazyLoad === true) { base.lazyLoad(); }
            if (base.options.autoHeight === true) { base.autoHeight(); }
            base.onVisibleItems(); if (typeof base.options.afterAction === "function") { base.options.afterAction.apply(this, [base.$elem]); }
        }, updateVars: function () {
            var base = this; if (typeof base.options.beforeUpdate === "function") { base.options.beforeUpdate.apply(this, [base.$elem]); }
            base.watchVisibility(); base.updateItems(); base.calculateAll(); base.updatePosition(); base.updateControls(); base.eachMoveUpdate(); if (typeof base.options.afterUpdate === "function") { base.options.afterUpdate.apply(this, [base.$elem]); }
        }, reload: function () { var base = this; window.setTimeout(function () { base.updateVars(); }, 0); }, watchVisibility: function () {
            var base = this; if (base.$elem.is(":visible") === false) { base.$elem.css({ opacity: 0 }); window.clearInterval(base.autoPlayInterval); window.clearInterval(base.checkVisible); } else { return false; }
            base.checkVisible = window.setInterval(function () { if (base.$elem.is(":visible")) { base.reload(); base.$elem.animate({ opacity: 1 }, 200); window.clearInterval(base.checkVisible); } }, 500);
        }, wrapItems: function () { var base = this; base.$userItems.wrapAll("<div class=\"owl-wrapper\">").wrap("<div class=\"owl-item\"></div>"); base.$elem.find(".owl-wrapper").wrap("<div class=\"owl-wrapper-outer\">"); base.wrapperOuter = base.$elem.find(".owl-wrapper-outer"); base.$elem.css("display", "block"); }, baseClass: function () {
            var base = this, hasBaseClass = base.$elem.hasClass(base.options.baseClass), hasThemeClass = base.$elem.hasClass(base.options.theme); if (!hasBaseClass) { base.$elem.addClass(base.options.baseClass); }
            if (!hasThemeClass) { base.$elem.addClass(base.options.theme); }
        }, updateItems: function () {
            var base = this, width, i; if (base.options.responsive === false) { return false; }
            if (base.options.singleItem === true) { base.options.items = base.orignalItems = 1; base.options.itemsCustom = false; base.options.itemsDesktop = false; base.options.itemsDesktopSmall = false; base.options.itemsTablet = false; base.options.itemsTabletSmall = false; base.options.itemsMobile = false; return false; }
            width = $(base.options.responsiveBaseWidth).width(); if (width > (base.options.itemsDesktop[0] || base.orignalItems)) { base.options.items = base.orignalItems; }
            if (base.options.itemsCustom !== false) { base.options.itemsCustom.sort(function (a, b) { return a[0] - b[0]; }); for (i = 0; i < base.options.itemsCustom.length; i += 1) { if (base.options.itemsCustom[i][0] <= width) { base.options.items = base.options.itemsCustom[i][1]; } } } else {
                if (width <= base.options.itemsDesktop[0] && base.options.itemsDesktop !== false) { base.options.items = base.options.itemsDesktop[1]; }
                if (width <= base.options.itemsDesktopSmall[0] && base.options.itemsDesktopSmall !== false) { base.options.items = base.options.itemsDesktopSmall[1]; }
                if (width <= base.options.itemsTablet[0] && base.options.itemsTablet !== false) { base.options.items = base.options.itemsTablet[1]; }
                if (width <= base.options.itemsTabletSmall[0] && base.options.itemsTabletSmall !== false) { base.options.items = base.options.itemsTabletSmall[1]; }
                if (width <= base.options.itemsMobile[0] && base.options.itemsMobile !== false) { base.options.items = base.options.itemsMobile[1]; }
            }
            if (base.options.items > base.itemsAmount && base.options.itemsScaleUp === true) { base.options.items = base.itemsAmount; }
        }, response: function () {
            var base = this, smallDelay, lastWindowWidth; if (base.options.responsive !== true) { return false; }
            lastWindowWidth = $(window).width(); base.resizer = function () {
                if ($(window).width() !== lastWindowWidth) {
                    if (base.options.autoPlay !== false) { window.clearInterval(base.autoPlayInterval); }
                    window.clearTimeout(smallDelay); smallDelay = window.setTimeout(function () { lastWindowWidth = $(window).width(); base.updateVars(); }, base.options.responsiveRefreshRate);
                }
            }; $(window).resize(base.resizer);
        }, updatePosition: function () { var base = this; base.jumpTo(base.currentItem); if (base.options.autoPlay !== false) { base.checkAp(); } }, appendItemsSizes: function () {
            var base = this, roundPages = 0, lastItem = base.itemsAmount - base.options.items; base.$owlItems.each(function (index) {
                var $this = $(this); $this.css({ "width": base.itemWidth }).data("owl-item", Number(index)); if (index % base.options.items === 0 || index === lastItem) { if (!(index > lastItem)) { roundPages += 1; } }
                $this.data("owl-roundPages", roundPages);
            });
        }, appendWrapperSizes: function () { var base = this, width = base.$owlItems.length * base.itemWidth; base.$owlWrapper.css({ "width": width * 2, "left": 0 }); base.appendItemsSizes(); }, calculateAll: function () { var base = this; base.calculateWidth(); base.appendWrapperSizes(); base.loops(); base.max(); }, calculateWidth: function () { var base = this; base.itemWidth = Math.round(base.$elem.width() / base.options.items); }, max: function () {
            var base = this, maximum = ((base.itemsAmount * base.itemWidth) - base.options.items * base.itemWidth) * -1; if (base.options.items > base.itemsAmount) { base.maximumItem = 0; maximum = 0; base.maximumPixels = 0; } else { base.maximumItem = base.itemsAmount - base.options.items; base.maximumPixels = maximum; }
            return maximum;
        }, min: function () { return 0; }, loops: function () { var base = this, prev = 0, elWidth = 0, i, item, roundPageNum; base.positionsInArray = [0]; base.pagesInArray = []; for (i = 0; i < base.itemsAmount; i += 1) { elWidth += base.itemWidth; base.positionsInArray.push(-elWidth); if (base.options.scrollPerPage === true) { item = $(base.$owlItems[i]); roundPageNum = item.data("owl-roundPages"); if (roundPageNum !== prev) { base.pagesInArray[prev] = base.positionsInArray[i]; prev = roundPageNum; } } } }, buildControls: function () {
            var base = this; if (base.options.navigation === true || base.options.pagination === true) { base.owlControls = $("<div class=\"owl-controls\"/>").toggleClass("clickable", !base.browser.isTouch).appendTo(base.$elem); }
            if (base.options.pagination === true) { base.buildPagination(); }
            if (base.options.navigation === true) { base.buildButtons(); }
        }, buildButtons: function () { var base = this, buttonsWrapper = $("<div class=\"owl-buttons\"/>"); base.owlControls.append(buttonsWrapper); base.buttonPrev = $("<div/>", { "class": "owl-prev", "html": base.options.navigationText[0] || "" }); base.buttonNext = $("<div/>", { "class": "owl-next", "html": base.options.navigationText[1] || "" }); buttonsWrapper.append(base.buttonPrev).append(base.buttonNext); buttonsWrapper.on("touchstart.owlControls mousedown.owlControls", "div[class^=\"owl\"]", function (event) { event.preventDefault(); }); buttonsWrapper.on("touchend.owlControls mouseup.owlControls", "div[class^=\"owl\"]", function (event) { event.preventDefault(); if ($(this).hasClass("owl-next")) { base.next(); } else { base.prev(); } }); }, buildPagination: function () { var base = this; base.paginationWrapper = $("<div class=\"owl-pagination\"/>"); base.owlControls.append(base.paginationWrapper); base.paginationWrapper.on("touchend.owlControls mouseup.owlControls", ".owl-page", function (event) { event.preventDefault(); if (Number($(this).data("owl-page")) !== base.currentItem) { base.goTo(Number($(this).data("owl-page")), true); } }); }, updatePagination: function () {
            var base = this, counter, lastPage, lastItem, i, paginationButton, paginationButtonInner; if (base.options.pagination === false) { return false; }
            base.paginationWrapper.html(""); counter = 0; lastPage = base.itemsAmount - base.itemsAmount % base.options.items; for (i = 0; i < base.itemsAmount; i += 1) {
                if (i % base.options.items === 0) {
                    counter += 1; if (lastPage === i) { lastItem = base.itemsAmount - base.options.items; }
                    paginationButton = $("<div/>", { "class": "owl-page" }); paginationButtonInner = $("<span></span>", { "text": base.options.paginationNumbers === true ? counter : "", "class": base.options.paginationNumbers === true ? "owl-numbers" : "" }); paginationButton.append(paginationButtonInner); paginationButton.data("owl-page", lastPage === i ? lastItem : i); paginationButton.data("owl-roundPages", counter); base.paginationWrapper.append(paginationButton);
                }
            }
            base.checkPagination();
        }, checkPagination: function () {
            var base = this; if (base.options.pagination === false) { return false; }
            base.paginationWrapper.find(".owl-page").each(function () { if ($(this).data("owl-roundPages") === $(base.$owlItems[base.currentItem]).data("owl-roundPages")) { base.paginationWrapper.find(".owl-page").removeClass("active"); $(this).addClass("active"); } });
        }, checkNavigation: function () {
            var base = this; if (base.options.navigation === false) { return false; }
            if (base.options.rewindNav === false) { if (base.currentItem === 0 && base.maximumItem === 0) { base.buttonPrev.addClass("disabled"); base.buttonNext.addClass("disabled"); } else if (base.currentItem === 0 && base.maximumItem !== 0) { base.buttonPrev.addClass("disabled"); base.buttonNext.removeClass("disabled"); } else if (base.currentItem === base.maximumItem) { base.buttonPrev.removeClass("disabled"); base.buttonNext.addClass("disabled"); } else if (base.currentItem !== 0 && base.currentItem !== base.maximumItem) { base.buttonPrev.removeClass("disabled"); base.buttonNext.removeClass("disabled"); } }
        }, updateControls: function () { var base = this; base.updatePagination(); base.checkNavigation(); if (base.owlControls) { if (base.options.items >= base.itemsAmount) { base.owlControls.hide(); } else { base.owlControls.show(); } } }, destroyControls: function () { var base = this; if (base.owlControls) { base.owlControls.remove(); } }, next: function (speed) {
            var base = this; if (base.isTransition) { return false; }
            base.currentItem += base.options.scrollPerPage === true ? base.options.items : 1; if (base.currentItem > base.maximumItem + (base.options.scrollPerPage === true ? (base.options.items - 1) : 0)) { if (base.options.rewindNav === true) { base.currentItem = 0; speed = "rewind"; } else { base.currentItem = base.maximumItem; return false; } }
            base.goTo(base.currentItem, speed);
        }, prev: function (speed) {
            var base = this; if (base.isTransition) { return false; }
            if (base.options.scrollPerPage === true && base.currentItem > 0 && base.currentItem < base.options.items) { base.currentItem = 0; } else { base.currentItem -= base.options.scrollPerPage === true ? base.options.items : 1; }
            if (base.currentItem < 0) { if (base.options.rewindNav === true) { base.currentItem = base.maximumItem; speed = "rewind"; } else { base.currentItem = 0; return false; } }
            base.goTo(base.currentItem, speed);
        }, goTo: function (position, speed, drag) {
            var base = this, goToPixel; if (base.isTransition) { return false; }
            if (typeof base.options.beforeMove === "function") { base.options.beforeMove.apply(this, [base.$elem]); }
            if (position >= base.maximumItem) { position = base.maximumItem; } else if (position <= 0) { position = 0; }
            base.currentItem = base.owl.currentItem = position; if (base.options.transitionStyle !== false && drag !== "drag" && base.options.items === 1 && base.browser.support3d === true) {
                base.swapSpeed(0); if (base.browser.support3d === true) { base.transition3d(base.positionsInArray[position]); } else { base.css2slide(base.positionsInArray[position], 1); }
                base.afterGo(); base.singleItemTransition(); return false;
            }
            goToPixel = base.positionsInArray[position]; if (base.browser.support3d === true) {
                base.isCss3Finish = false; if (speed === true) { base.swapSpeed("paginationSpeed"); window.setTimeout(function () { base.isCss3Finish = true; }, base.options.paginationSpeed); } else if (speed === "rewind") { base.swapSpeed(base.options.rewindSpeed); window.setTimeout(function () { base.isCss3Finish = true; }, base.options.rewindSpeed); } else { base.swapSpeed("slideSpeed"); window.setTimeout(function () { base.isCss3Finish = true; }, base.options.slideSpeed); }
                base.transition3d(goToPixel);
            } else { if (speed === true) { base.css2slide(goToPixel, base.options.paginationSpeed); } else if (speed === "rewind") { base.css2slide(goToPixel, base.options.rewindSpeed); } else { base.css2slide(goToPixel, base.options.slideSpeed); } }
            base.afterGo();
        }, jumpTo: function (position) {
            var base = this; if (typeof base.options.beforeMove === "function") { base.options.beforeMove.apply(this, [base.$elem]); }
            if (position >= base.maximumItem || position === -1) { position = base.maximumItem; } else if (position <= 0) { position = 0; }
            base.swapSpeed(0); if (base.browser.support3d === true) { base.transition3d(base.positionsInArray[position]); } else { base.css2slide(base.positionsInArray[position], 1); }
            base.currentItem = base.owl.currentItem = position; base.afterGo();
        }, afterGo: function () {
            var base = this; base.prevArr.push(base.currentItem); base.prevItem = base.owl.prevItem = base.prevArr[base.prevArr.length - 2]; base.prevArr.shift(0); if (base.prevItem !== base.currentItem) { base.checkPagination(); base.checkNavigation(); base.eachMoveUpdate(); if (base.options.autoPlay !== false) { base.checkAp(); } }
            if (typeof base.options.afterMove === "function" && base.prevItem !== base.currentItem) { base.options.afterMove.apply(this, [base.$elem]); }
        }, stop: function () { var base = this; base.apStatus = "stop"; window.clearInterval(base.autoPlayInterval); }, checkAp: function () { var base = this; if (base.apStatus !== "stop") { base.play(); } }, play: function () {
            var base = this; base.apStatus = "play"; if (base.options.autoPlay === false) { return false; }
            window.clearInterval(base.autoPlayInterval); base.autoPlayInterval = window.setInterval(function () { base.next(true); }, base.options.autoPlay);
        }, swapSpeed: function (action) { var base = this; if (action === "slideSpeed") { base.$owlWrapper.css(base.addCssSpeed(base.options.slideSpeed)); } else if (action === "paginationSpeed") { base.$owlWrapper.css(base.addCssSpeed(base.options.paginationSpeed)); } else if (typeof action !== "string") { base.$owlWrapper.css(base.addCssSpeed(action)); } }, addCssSpeed: function (speed) { return { "-webkit-transition": "all " + speed + "ms ease", "-moz-transition": "all " + speed + "ms ease", "-o-transition": "all " + speed + "ms ease", "transition": "all " + speed + "ms ease" }; }, removeTransition: function () { return { "-webkit-transition": "", "-moz-transition": "", "-o-transition": "", "transition": "" }; }, doTranslate: function (pixels) { return { "-webkit-transform": "translate3d(" + pixels + "px, 0px, 0px)", "-moz-transform": "translate3d(" + pixels + "px, 0px, 0px)", "-o-transform": "translate3d(" + pixels + "px, 0px, 0px)", "-ms-transform": "translate3d(" + pixels + "px, 0px, 0px)", "transform": "translate3d(" + pixels + "px, 0px,0px)" }; }, transition3d: function (value) { var base = this; base.$owlWrapper.css(base.doTranslate(value)); }, css2move: function (value) { var base = this; base.$owlWrapper.css({ "left": value }); }, css2slide: function (value, speed) { var base = this; base.isCssFinish = false; base.$owlWrapper.stop(true, true).animate({ "left": value }, { duration: speed || base.options.slideSpeed, complete: function () { base.isCssFinish = true; } }); }, checkBrowser: function () { var base = this, translate3D = "translate3d(0px, 0px, 0px)", tempElem = document.createElement("div"), regex, asSupport, support3d, isTouch; tempElem.style.cssText = "  -moz-transform:" + translate3D + "; -ms-transform:" + translate3D + "; -o-transform:" + translate3D + "; -webkit-transform:" + translate3D + "; transform:" + translate3D; regex = /translate3d\(0px, 0px, 0px\)/g; asSupport = tempElem.style.cssText.match(regex); support3d = (asSupport !== null && asSupport.length === 1); isTouch = "ontouchstart" in window || window.navigator.msMaxTouchPoints; base.browser = { "support3d": support3d, "isTouch": isTouch }; }, moveEvents: function () { var base = this; if (base.options.mouseDrag !== false || base.options.touchDrag !== false) { base.gestures(); base.disabledEvents(); } }, eventTypes: function () {
            var base = this, types = ["s", "e", "x"]; base.ev_types = {}; if (base.options.mouseDrag === true && base.options.touchDrag === true) { types = ["touchstart.owl mousedown.owl", "touchmove.owl mousemove.owl", "touchend.owl touchcancel.owl mouseup.owl"]; } else if (base.options.mouseDrag === false && base.options.touchDrag === true) { types = ["touchstart.owl", "touchmove.owl", "touchend.owl touchcancel.owl"]; } else if (base.options.mouseDrag === true && base.options.touchDrag === false) { types = ["mousedown.owl", "mousemove.owl", "mouseup.owl"]; }
            base.ev_types.start = types[0]; base.ev_types.move = types[1]; base.ev_types.end = types[2];
        }, disabledEvents: function () { var base = this; base.$elem.on("dragstart.owl", function (event) { event.preventDefault(); }); base.$elem.on("mousedown.disableTextSelect", function (e) { return $(e.target).is('input, textarea, select, option'); }); }, gestures: function () {
            var base = this, locals = { offsetX: 0, offsetY: 0, baseElWidth: 0, relativePos: 0, position: null, minSwipe: null, maxSwipe: null, sliding: null, dargging: null, targetElement: null }; base.isCssFinish = true; function getTouches(event) {
                if (event.touches !== undefined) { return { x: event.touches[0].pageX, y: event.touches[0].pageY }; }
                if (event.touches === undefined) {
                    if (event.pageX !== undefined) { return { x: event.pageX, y: event.pageY }; }
                    if (event.pageX === undefined) { return { x: event.clientX, y: event.clientY }; }
                }
            }
            function swapEvents(type) { if (type === "on") { $(document).on(base.ev_types.move, dragMove); $(document).on(base.ev_types.end, dragEnd); } else if (type === "off") { $(document).off(base.ev_types.move); $(document).off(base.ev_types.end); } }
            function dragStart(event) {
                var ev = event.originalEvent || event || window.event, position; if (ev.which === 3) { return false; }
                if (base.itemsAmount <= base.options.items) { return; }
                if (base.isCssFinish === false && !base.options.dragBeforeAnimFinish) { return false; }
                if (base.isCss3Finish === false && !base.options.dragBeforeAnimFinish) { return false; }
                if (base.options.autoPlay !== false) { window.clearInterval(base.autoPlayInterval); }
                if (base.browser.isTouch !== true && !base.$owlWrapper.hasClass("grabbing")) { base.$owlWrapper.addClass("grabbing"); }
                base.newPosX = 0; base.newRelativeX = 0; $(this).css(base.removeTransition()); position = $(this).position(); locals.relativePos = position.left; locals.offsetX = getTouches(ev).x - position.left; locals.offsetY = getTouches(ev).y - position.top; swapEvents("on"); locals.sliding = false; locals.targetElement = ev.target || ev.srcElement;
            }
            function dragMove(event) {
                var ev = event.originalEvent || event || window.event, minSwipe, maxSwipe; base.newPosX = getTouches(ev).x - locals.offsetX; base.newPosY = getTouches(ev).y - locals.offsetY; base.newRelativeX = base.newPosX - locals.relativePos; if (typeof base.options.startDragging === "function" && locals.dragging !== true && base.newRelativeX !== 0) { locals.dragging = true; base.options.startDragging.apply(base, [base.$elem]); }
                if ((base.newRelativeX > 8 || base.newRelativeX < -8) && (base.browser.isTouch === true)) {
                    if (ev.preventDefault !== undefined) { ev.preventDefault(); } else { ev.returnValue = false; }
                    locals.sliding = true;
                }
                if ((base.newPosY > 10 || base.newPosY < -10) && locals.sliding === false) { $(document).off("touchmove.owl"); }
                minSwipe = function () { return base.newRelativeX / 5; }; maxSwipe = function () { return base.maximumPixels + base.newRelativeX / 5; }; base.newPosX = Math.max(Math.min(base.newPosX, minSwipe()), maxSwipe()); if (base.browser.support3d === true) { base.transition3d(base.newPosX); } else { base.css2move(base.newPosX); }
            }
            function dragEnd(event) {
                var ev = event.originalEvent || event || window.event, newPosition, handlers, owlStopEvent; ev.target = ev.target || ev.srcElement; locals.dragging = false; if (base.browser.isTouch !== true) { base.$owlWrapper.removeClass("grabbing"); }
                if (base.newRelativeX < 0) { base.dragDirection = base.owl.dragDirection = "left"; } else { base.dragDirection = base.owl.dragDirection = "right"; }
                if (base.newRelativeX !== 0) { newPosition = base.getNewPosition(); base.goTo(newPosition, false, "drag"); if (locals.targetElement === ev.target && base.browser.isTouch !== true) { $(ev.target).on("click.disable", function (ev) { ev.stopImmediatePropagation(); ev.stopPropagation(); ev.preventDefault(); $(ev.target).off("click.disable"); }); handlers = $._data(ev.target, "events").click; owlStopEvent = handlers.pop(); handlers.splice(0, 0, owlStopEvent); } }
                swapEvents("off");
            }
            base.$elem.on(base.ev_types.start, ".owl-wrapper", dragStart);
        }, getNewPosition: function () {
            var base = this, newPosition = base.closestItem(); if (newPosition > base.maximumItem) { base.currentItem = base.maximumItem; newPosition = base.maximumItem; } else if (base.newPosX >= 0) { newPosition = 0; base.currentItem = 0; }
            return newPosition;
        }, closestItem: function () { var base = this, array = base.options.scrollPerPage === true ? base.pagesInArray : base.positionsInArray, goal = base.newPosX, closest = null; $.each(array, function (i, v) { if (goal - (base.itemWidth / 20) > array[i + 1] && goal - (base.itemWidth / 20) < v && base.moveDirection() === "left") { closest = v; if (base.options.scrollPerPage === true) { base.currentItem = $.inArray(closest, base.positionsInArray); } else { base.currentItem = i; } } else if (goal + (base.itemWidth / 20) < v && goal + (base.itemWidth / 20) > (array[i + 1] || array[i] - base.itemWidth) && base.moveDirection() === "right") { if (base.options.scrollPerPage === true) { closest = array[i + 1] || array[array.length - 1]; base.currentItem = $.inArray(closest, base.positionsInArray); } else { closest = array[i + 1]; base.currentItem = i + 1; } } }); return base.currentItem; }, moveDirection: function () {
            var base = this, direction; if (base.newRelativeX < 0) { direction = "right"; base.playDirection = "next"; } else { direction = "left"; base.playDirection = "prev"; }
            return direction;
        }, customEvents: function () { var base = this; base.$elem.on("owl.next", function () { base.next(); }); base.$elem.on("owl.prev", function () { base.prev(); }); base.$elem.on("owl.play", function (event, speed) { base.options.autoPlay = speed; base.play(); base.hoverStatus = "play"; }); base.$elem.on("owl.stop", function () { base.stop(); base.hoverStatus = "stop"; }); base.$elem.on("owl.goTo", function (event, item) { base.goTo(item); }); base.$elem.on("owl.jumpTo", function (event, item) { base.jumpTo(item); }); }, stopOnHover: function () { var base = this; if (base.options.stopOnHover === true && base.browser.isTouch !== true && base.options.autoPlay !== false) { base.$elem.on("mouseover", function () { base.stop(); }); base.$elem.on("mouseout", function () { if (base.hoverStatus !== "stop") { base.play(); } }); } }, lazyLoad: function () {
            var base = this, i, $item, itemNumber, $lazyImg, follow; if (base.options.lazyLoad === false) { return false; }
            for (i = 0; i < base.itemsAmount; i += 1) {
                $item = $(base.$owlItems[i]); if ($item.data("owl-loaded") === "loaded") { continue; }
                itemNumber = $item.data("owl-item"); $lazyImg = $item.find(".lazyOwl"); if (typeof $lazyImg.data("src") !== "string") { $item.data("owl-loaded", "loaded"); continue; }
                if ($item.data("owl-loaded") === undefined) { $lazyImg.hide(); $item.addClass("loading").data("owl-loaded", "checked"); }
                if (base.options.lazyFollow === true) { follow = itemNumber >= base.currentItem; } else { follow = true; }
                if (follow && itemNumber < base.currentItem + base.options.items && $lazyImg.length) { base.lazyPreload($item, $lazyImg); }
            }
        }, lazyPreload: function ($item, $lazyImg) {
            var base = this, iterations = 0, isBackgroundImg; if ($lazyImg.prop("tagName") === "DIV") { $lazyImg.css("background-image", "url(" + $lazyImg.data("src") + ")"); isBackgroundImg = true; } else { $lazyImg[0].src = $lazyImg.data("src"); }
            function showImage() {
                $item.data("owl-loaded", "loaded").removeClass("loading"); $lazyImg.removeAttr("data-src"); if (base.options.lazyEffect === "fade") { $lazyImg.fadeIn(400); } else { $lazyImg.show(); }
                if (typeof base.options.afterLazyLoad === "function") { base.options.afterLazyLoad.apply(this, [base.$elem]); }
            }
            function checkLazyImage() { iterations += 1; if (base.completeImg($lazyImg.get(0)) || isBackgroundImg === true) { showImage(); } else if (iterations <= 100) { window.setTimeout(checkLazyImage, 100); } else { showImage(); } }
            checkLazyImage();
        }, autoHeight: function () {
            var base = this, $currentimg = $(base.$owlItems[base.currentItem]).find("img"), iterations; function addHeight() { var $currentItem = $(base.$owlItems[base.currentItem]).height(); base.wrapperOuter.css("height", $currentItem + "px"); if (!base.wrapperOuter.hasClass("autoHeight")) { window.setTimeout(function () { base.wrapperOuter.addClass("autoHeight"); }, 0); } }
            function checkImage() { iterations += 1; if (base.completeImg($currentimg.get(0))) { addHeight(); } else if (iterations <= 100) { window.setTimeout(checkImage, 100); } else { base.wrapperOuter.css("height", ""); } }
            if ($currentimg.get(0) !== undefined) { iterations = 0; checkImage(); } else { addHeight(); }
        }, completeImg: function (img) {
            var naturalWidthType; if (!img.complete) { return false; }
            naturalWidthType = typeof img.naturalWidth; if (naturalWidthType !== "undefined" && img.naturalWidth === 0) { return false; }
            return true;
        }, onVisibleItems: function () {
            var base = this, i; if (base.options.addClassActive === true) { base.$owlItems.removeClass("active"); }
            base.visibleItems = []; for (i = base.currentItem; i < base.currentItem + base.options.items; i += 1) { base.visibleItems.push(i); if (base.options.addClassActive === true) { $(base.$owlItems[i]).addClass("active"); } }
            base.owl.visibleItems = base.visibleItems;
        }, transitionTypes: function (className) { var base = this; base.outClass = "owl-" + className + "-out"; base.inClass = "owl-" + className + "-in"; }, singleItemTransition: function () {
            var base = this, outClass = base.outClass, inClass = base.inClass, $currentItem = base.$owlItems.eq(base.currentItem), $prevItem = base.$owlItems.eq(base.prevItem), prevPos = Math.abs(base.positionsInArray[base.currentItem]) + base.positionsInArray[base.prevItem], origin = Math.abs(base.positionsInArray[base.currentItem]) + base.itemWidth / 2, animEnd = 'webkitAnimationEnd oAnimationEnd MSAnimationEnd animationend'; base.isTransition = true; base.$owlWrapper.addClass('owl-origin').css({ "-webkit-transform-origin": origin + "px", "-moz-perspective-origin": origin + "px", "perspective-origin": origin + "px" }); function transStyles(prevPos) { return { "position": "relative", "left": prevPos + "px" }; }
            $prevItem.css(transStyles(prevPos, 10)).addClass(outClass).on(animEnd, function () { base.endPrev = true; $prevItem.off(animEnd); base.clearTransStyle($prevItem, outClass); }); $currentItem.addClass(inClass).on(animEnd, function () { base.endCurrent = true; $currentItem.off(animEnd); base.clearTransStyle($currentItem, inClass); });
        }, clearTransStyle: function (item, classToRemove) { var base = this; item.css({ "position": "", "left": "" }).removeClass(classToRemove); if (base.endPrev && base.endCurrent) { base.$owlWrapper.removeClass('owl-origin'); base.endPrev = false; base.endCurrent = false; base.isTransition = false; } }, owlStatus: function () { var base = this; base.owl = { "userOptions": base.userOptions, "baseElement": base.$elem, "userItems": base.$userItems, "owlItems": base.$owlItems, "currentItem": base.currentItem, "prevItem": base.prevItem, "visibleItems": base.visibleItems, "isTouch": base.browser.isTouch, "browser": base.browser, "dragDirection": base.dragDirection }; }, clearEvents: function () { var base = this; base.$elem.off(".owl owl mousedown.disableTextSelect"); $(document).off(".owl owl"); $(window).off("resize", base.resizer); }, unWrap: function () {
            var base = this; if (base.$elem.children().length !== 0) { base.$owlWrapper.unwrap(); base.$userItems.unwrap().unwrap(); if (base.owlControls) { base.owlControls.remove(); } }
            base.clearEvents(); base.$elem.attr("style", base.$elem.data("owl-originalStyles") || "").attr("class", base.$elem.data("owl-originalClasses"));
        }, destroy: function () { var base = this; base.stop(); window.clearInterval(base.checkVisible); base.unWrap(); base.$elem.removeData(); }, reinit: function (newOptions) { var base = this, options = $.extend({}, base.userOptions, newOptions); base.unWrap(); base.init(options, base.$elem); }, addItem: function (htmlString, targetPosition) {
            var base = this, position; if (!htmlString) { return false; }
            if (base.$elem.children().length === 0) { base.$elem.append(htmlString); base.setVars(); return false; }
            base.unWrap(); if (targetPosition === undefined || targetPosition === -1) { position = -1; } else { position = targetPosition; }
            if (position >= base.$userItems.length || position === -1) { base.$userItems.eq(-1).after(htmlString); } else { base.$userItems.eq(position).before(htmlString); }
            base.setVars();
        }, removeItem: function (targetPosition) {
            var base = this, position; if (base.$elem.children().length === 0) { return false; }
            if (targetPosition === undefined || targetPosition === -1) { position = -1; } else { position = targetPosition; }
            base.unWrap(); base.$userItems.eq(position).remove(); base.setVars();
        }
    }; $.fn.owlCarousel = function (options) {
        return this.each(function () {
            if ($(this).data("owl-init") === true) { return false; }
            $(this).data("owl-init", true); var carousel = Object.create(Carousel); carousel.init(options, this); $.data(this, "owlCarousel", carousel);
        });
    }; $.fn.owlCarousel.options = { items: 5, itemsCustom: false, itemsDesktop: [1199, 4], itemsDesktopSmall: [979, 3], itemsTablet: [768, 2], itemsTabletSmall: false, itemsMobile: [479, 1], singleItem: false, itemsScaleUp: false, slideSpeed: 200, paginationSpeed: 800, rewindSpeed: 1000, autoPlay: false, stopOnHover: false, navigation: false, navigationText: ["prev", "next"], rewindNav: true, scrollPerPage: false, pagination: true, paginationNumbers: false, responsive: true, responsiveRefreshRate: 200, responsiveBaseWidth: window, baseClass: "owl-carousel", theme: "owl-theme", lazyLoad: false, lazyFollow: true, lazyEffect: "fade", autoHeight: false, jsonPath: false, jsonSuccess: false, dragBeforeAnimFinish: true, mouseDrag: true, touchDrag: true, addClassActive: false, transitionStyle: false, beforeUpdate: false, afterUpdate: false, beforeInit: false, afterInit: false, beforeMove: false, afterMove: false, afterAction: false, startDragging: false, afterLazyLoad: false };
}(jQuery, window, document));; if ("undefined" == typeof jQuery) throw new Error("Bootstrap's JavaScript requires jQuery"); +function (a) { "use strict"; var b = a.fn.jquery.split(" ")[0].split("."); if (b[0] < 2 && b[1] < 9 || 1 == b[0] && 9 == b[1] && b[2] < 1) throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher") }(jQuery), +function (a) { "use strict"; function b() { var a = document.createElement("bootstrap"), b = { WebkitTransition: "webkitTransitionEnd", MozTransition: "transitionend", OTransition: "oTransitionEnd otransitionend", transition: "transitionend" }; for (var c in b) if (void 0 !== a.style[c]) return { end: b[c] }; return !1 } a.fn.emulateTransitionEnd = function (b) { var c = !1, d = this; a(this).one("bsTransitionEnd", function () { c = !0 }); var e = function () { c || a(d).trigger(a.support.transition.end) }; return setTimeout(e, b), this }, a(function () { a.support.transition = b(), a.support.transition && (a.event.special.bsTransitionEnd = { bindType: a.support.transition.end, delegateType: a.support.transition.end, handle: function (b) { return a(b.target).is(this) ? b.handleObj.handler.apply(this, arguments) : void 0 } }) }) }(jQuery), +function (a) { "use strict"; function b(b) { return this.each(function () { var c = a(this), e = c.data("bs.alert"); e || c.data("bs.alert", e = new d(this)), "string" == typeof b && e[b].call(c) }) } var c = '[data-dismiss="alert"]', d = function (b) { a(b).on("click", c, this.close) }; d.VERSION = "3.3.5", d.TRANSITION_DURATION = 150, d.prototype.close = function (b) { function c() { g.detach().trigger("closed.bs.alert").remove() } var e = a(this), f = e.attr("data-target"); f || (f = e.attr("href"), f = f && f.replace(/.*(?=#[^\s]*$)/, "")); var g = a(f); b && b.preventDefault(), g.length || (g = e.closest(".alert")), g.trigger(b = a.Event("close.bs.alert")), b.isDefaultPrevented() || (g.removeClass("in"), a.support.transition && g.hasClass("fade") ? g.one("bsTransitionEnd", c).emulateTransitionEnd(d.TRANSITION_DURATION) : c()) }; var e = a.fn.alert; a.fn.alert = b, a.fn.alert.Constructor = d, a.fn.alert.noConflict = function () { return a.fn.alert = e, this }, a(document).on("click.bs.alert.data-api", c, d.prototype.close) }(jQuery), +function (a) { "use strict"; function b(b) { return this.each(function () { var d = a(this), e = d.data("bs.button"), f = "object" == typeof b && b; e || d.data("bs.button", e = new c(this, f)), "toggle" == b ? e.toggle() : b && e.setState(b) }) } var c = function (b, d) { this.$element = a(b), this.options = a.extend({}, c.DEFAULTS, d), this.isLoading = !1 }; c.VERSION = "3.3.5", c.DEFAULTS = { loadingText: "loading..." }, c.prototype.setState = function (b) { var c = "disabled", d = this.$element, e = d.is("input") ? "val" : "html", f = d.data(); b += "Text", null == f.resetText && d.data("resetText", d[e]()), setTimeout(a.proxy(function () { d[e](null == f[b] ? this.options[b] : f[b]), "loadingText" == b ? (this.isLoading = !0, d.addClass(c).attr(c, c)) : this.isLoading && (this.isLoading = !1, d.removeClass(c).removeAttr(c)) }, this), 0) }, c.prototype.toggle = function () { var a = !0, b = this.$element.closest('[data-toggle="buttons"]'); if (b.length) { var c = this.$element.find("input"); "radio" == c.prop("type") ? (c.prop("checked") && (a = !1), b.find(".active").removeClass("active"), this.$element.addClass("active")) : "checkbox" == c.prop("type") && (c.prop("checked") !== this.$element.hasClass("active") && (a = !1), this.$element.toggleClass("active")), c.prop("checked", this.$element.hasClass("active")), a && c.trigger("change") } else this.$element.attr("aria-pressed", !this.$element.hasClass("active")), this.$element.toggleClass("active") }; var d = a.fn.button; a.fn.button = b, a.fn.button.Constructor = c, a.fn.button.noConflict = function () { return a.fn.button = d, this }, a(document).on("click.bs.button.data-api", '[data-toggle^="button"]', function (c) { var d = a(c.target); d.hasClass("btn") || (d = d.closest(".btn")), b.call(d, "toggle"), a(c.target).is('input[type="radio"]') || a(c.target).is('input[type="checkbox"]') || c.preventDefault() }).on("focus.bs.button.data-api blur.bs.button.data-api", '[data-toggle^="button"]', function (b) { a(b.target).closest(".btn").toggleClass("focus", /^focus(in)?$/.test(b.type)) }) }(jQuery), +function (a) { "use strict"; function b(b) { return this.each(function () { var d = a(this), e = d.data("bs.carousel"), f = a.extend({}, c.DEFAULTS, d.data(), "object" == typeof b && b), g = "string" == typeof b ? b : f.slide; e || d.data("bs.carousel", e = new c(this, f)), "number" == typeof b ? e.to(b) : g ? e[g]() : f.interval && e.pause().cycle() }) } var c = function (b, c) { this.$element = a(b), this.$indicators = this.$element.find(".carousel-indicators"), this.options = c, this.paused = null, this.sliding = null, this.interval = null, this.$active = null, this.$items = null, this.options.keyboard && this.$element.on("keydown.bs.carousel", a.proxy(this.keydown, this)), "hover" == this.options.pause && !("ontouchstart" in document.documentElement) && this.$element.on("mouseenter.bs.carousel", a.proxy(this.pause, this)).on("mouseleave.bs.carousel", a.proxy(this.cycle, this)) }; c.VERSION = "3.3.5", c.TRANSITION_DURATION = 600, c.DEFAULTS = { interval: 5e3, pause: "hover", wrap: !0, keyboard: !0 }, c.prototype.keydown = function (a) { if (!/input|textarea/i.test(a.target.tagName)) { switch (a.which) { case 37: this.prev(); break; case 39: this.next(); break; default: return }a.preventDefault() } }, c.prototype.cycle = function (b) { return b || (this.paused = !1), this.interval && clearInterval(this.interval), this.options.interval && !this.paused && (this.interval = setInterval(a.proxy(this.next, this), this.options.interval)), this }, c.prototype.getItemIndex = function (a) { return this.$items = a.parent().children(".item"), this.$items.index(a || this.$active) }, c.prototype.getItemForDirection = function (a, b) { var c = this.getItemIndex(b), d = "prev" == a && 0 === c || "next" == a && c == this.$items.length - 1; if (d && !this.options.wrap) return b; var e = "prev" == a ? -1 : 1, f = (c + e) % this.$items.length; return this.$items.eq(f) }, c.prototype.to = function (a) { var b = this, c = this.getItemIndex(this.$active = this.$element.find(".item.active")); return a > this.$items.length - 1 || 0 > a ? void 0 : this.sliding ? this.$element.one("slid.bs.carousel", function () { b.to(a) }) : c == a ? this.pause().cycle() : this.slide(a > c ? "next" : "prev", this.$items.eq(a)) }, c.prototype.pause = function (b) { return b || (this.paused = !0), this.$element.find(".next, .prev").length && a.support.transition && (this.$element.trigger(a.support.transition.end), this.cycle(!0)), this.interval = clearInterval(this.interval), this }, c.prototype.next = function () { return this.sliding ? void 0 : this.slide("next") }, c.prototype.prev = function () { return this.sliding ? void 0 : this.slide("prev") }, c.prototype.slide = function (b, d) { var e = this.$element.find(".item.active"), f = d || this.getItemForDirection(b, e), g = this.interval, h = "next" == b ? "left" : "right", i = this; if (f.hasClass("active")) return this.sliding = !1; var j = f[0], k = a.Event("slide.bs.carousel", { relatedTarget: j, direction: h }); if (this.$element.trigger(k), !k.isDefaultPrevented()) { if (this.sliding = !0, g && this.pause(), this.$indicators.length) { this.$indicators.find(".active").removeClass("active"); var l = a(this.$indicators.children()[this.getItemIndex(f)]); l && l.addClass("active") } var m = a.Event("slid.bs.carousel", { relatedTarget: j, direction: h }); return a.support.transition && this.$element.hasClass("slide") ? (f.addClass(b), f[0].offsetWidth, e.addClass(h), f.addClass(h), e.one("bsTransitionEnd", function () { f.removeClass([b, h].join(" ")).addClass("active"), e.removeClass(["active", h].join(" ")), i.sliding = !1, setTimeout(function () { i.$element.trigger(m) }, 0) }).emulateTransitionEnd(c.TRANSITION_DURATION)) : (e.removeClass("active"), f.addClass("active"), this.sliding = !1, this.$element.trigger(m)), g && this.cycle(), this } }; var d = a.fn.carousel; a.fn.carousel = b, a.fn.carousel.Constructor = c, a.fn.carousel.noConflict = function () { return a.fn.carousel = d, this }; var e = function (c) { var d, e = a(this), f = a(e.attr("data-target") || (d = e.attr("href")) && d.replace(/.*(?=#[^\s]+$)/, "")); if (f.hasClass("carousel")) { var g = a.extend({}, f.data(), e.data()), h = e.attr("data-slide-to"); h && (g.interval = !1), b.call(f, g), h && f.data("bs.carousel").to(h), c.preventDefault() } }; a(document).on("click.bs.carousel.data-api", "[data-slide]", e).on("click.bs.carousel.data-api", "[data-slide-to]", e), a(window).on("load", function () { a('[data-ride="carousel"]').each(function () { var c = a(this); b.call(c, c.data()) }) }) }(jQuery), +function (a) { "use strict"; function b(b) { var c, d = b.attr("data-target") || (c = b.attr("href")) && c.replace(/.*(?=#[^\s]+$)/, ""); return a(d) } function c(b) { return this.each(function () { var c = a(this), e = c.data("bs.collapse"), f = a.extend({}, d.DEFAULTS, c.data(), "object" == typeof b && b); !e && f.toggle && /show|hide/.test(b) && (f.toggle = !1), e || c.data("bs.collapse", e = new d(this, f)), "string" == typeof b && e[b]() }) } var d = function (b, c) { this.$element = a(b), this.options = a.extend({}, d.DEFAULTS, c), this.$trigger = a('[data-toggle="collapse"][href="#' + b.id + '"],[data-toggle="collapse"][data-target="#' + b.id + '"]'), this.transitioning = null, this.options.parent ? this.$parent = this.getParent() : this.addAriaAndCollapsedClass(this.$element, this.$trigger), this.options.toggle && this.toggle() }; d.VERSION = "3.3.5", d.TRANSITION_DURATION = 350, d.DEFAULTS = { toggle: !0 }, d.prototype.dimension = function () { var a = this.$element.hasClass("width"); return a ? "width" : "height" }, d.prototype.show = function () { if (!this.transitioning && !this.$element.hasClass("in")) { var b, e = this.$parent && this.$parent.children(".panel").children(".in, .collapsing"); if (!(e && e.length && (b = e.data("bs.collapse"), b && b.transitioning))) { var f = a.Event("show.bs.collapse"); if (this.$element.trigger(f), !f.isDefaultPrevented()) { e && e.length && (c.call(e, "hide"), b || e.data("bs.collapse", null)); var g = this.dimension(); this.$element.removeClass("collapse").addClass("collapsing")[g](0).attr("aria-expanded", !0), this.$trigger.removeClass("collapsed").attr("aria-expanded", !0), this.transitioning = 1; var h = function () { this.$element.removeClass("collapsing").addClass("collapse in")[g](""), this.transitioning = 0, this.$element.trigger("shown.bs.collapse") }; if (!a.support.transition) return h.call(this); var i = a.camelCase(["scroll", g].join("-")); this.$element.one("bsTransitionEnd", a.proxy(h, this)).emulateTransitionEnd(d.TRANSITION_DURATION)[g](this.$element[0][i]) } } } }, d.prototype.hide = function () { if (!this.transitioning && this.$element.hasClass("in")) { var b = a.Event("hide.bs.collapse"); if (this.$element.trigger(b), !b.isDefaultPrevented()) { var c = this.dimension(); this.$element[c](this.$element[c]())[0].offsetHeight, this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded", !1), this.$trigger.addClass("collapsed").attr("aria-expanded", !1), this.transitioning = 1; var e = function () { this.transitioning = 0, this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse") }; return a.support.transition ? void this.$element[c](0).one("bsTransitionEnd", a.proxy(e, this)).emulateTransitionEnd(d.TRANSITION_DURATION) : e.call(this) } } }, d.prototype.toggle = function () { this[this.$element.hasClass("in") ? "hide" : "show"]() }, d.prototype.getParent = function () { return a(this.options.parent).find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]').each(a.proxy(function (c, d) { var e = a(d); this.addAriaAndCollapsedClass(b(e), e) }, this)).end() }, d.prototype.addAriaAndCollapsedClass = function (a, b) { var c = a.hasClass("in"); a.attr("aria-expanded", c), b.toggleClass("collapsed", !c).attr("aria-expanded", c) }; var e = a.fn.collapse; a.fn.collapse = c, a.fn.collapse.Constructor = d, a.fn.collapse.noConflict = function () { return a.fn.collapse = e, this }, a(document).on("click.bs.collapse.data-api", '[data-toggle="collapse"]', function (d) { var e = a(this); e.attr("data-target") || d.preventDefault(); var f = b(e), g = f.data("bs.collapse"), h = g ? "toggle" : e.data(); c.call(f, h) }) }(jQuery), +function (a) { "use strict"; function b(b) { var c = b.attr("data-target"); c || (c = b.attr("href"), c = c && /#[A-Za-z]/.test(c) && c.replace(/.*(?=#[^\s]*$)/, "")); var d = c && a(c); return d && d.length ? d : b.parent() } function c(c) { c && 3 === c.which || (a(e).remove(), a(f).each(function () { var d = a(this), e = b(d), f = { relatedTarget: this }; e.hasClass("open") && (c && "click" == c.type && /input|textarea/i.test(c.target.tagName) && a.contains(e[0], c.target) || (e.trigger(c = a.Event("hide.bs.dropdown", f)), c.isDefaultPrevented() || (d.attr("aria-expanded", "false"), e.removeClass("open").trigger("hidden.bs.dropdown", f)))) })) } function d(b) { return this.each(function () { var c = a(this), d = c.data("bs.dropdown"); d || c.data("bs.dropdown", d = new g(this)), "string" == typeof b && d[b].call(c) }) } var e = ".dropdown-backdrop", f = '[data-toggle="dropdown"]', g = function (b) { a(b).on("click.bs.dropdown", this.toggle) }; g.VERSION = "3.3.5", g.prototype.toggle = function (d) { var e = a(this); if (!e.is(".disabled, :disabled")) { var f = b(e), g = f.hasClass("open"); if (c(), !g) { "ontouchstart" in document.documentElement && !f.closest(".navbar-nav").length && a(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(a(this)).on("click", c); var h = { relatedTarget: this }; if (f.trigger(d = a.Event("show.bs.dropdown", h)), d.isDefaultPrevented()) return; e.trigger("focus").attr("aria-expanded", "true"), f.toggleClass("open").trigger("shown.bs.dropdown", h) } return !1 } }, g.prototype.keydown = function (c) { if (/(38|40|27|32)/.test(c.which) && !/input|textarea/i.test(c.target.tagName)) { var d = a(this); if (c.preventDefault(), c.stopPropagation(), !d.is(".disabled, :disabled")) { var e = b(d), g = e.hasClass("open"); if (!g && 27 != c.which || g && 27 == c.which) return 27 == c.which && e.find(f).trigger("focus"), d.trigger("click"); var h = " li:not(.disabled):visible a", i = e.find(".dropdown-menu" + h); if (i.length) { var j = i.index(c.target); 38 == c.which && j > 0 && j--, 40 == c.which && j < i.length - 1 && j++, ~j || (j = 0), i.eq(j).trigger("focus") } } } }; var h = a.fn.dropdown; a.fn.dropdown = d, a.fn.dropdown.Constructor = g, a.fn.dropdown.noConflict = function () { return a.fn.dropdown = h, this }, a(document).on("click.bs.dropdown.data-api", c).on("click.bs.dropdown.data-api", ".dropdown form", function (a) { a.stopPropagation() }).on("click.bs.dropdown.data-api", f, g.prototype.toggle).on("keydown.bs.dropdown.data-api", f, g.prototype.keydown).on("keydown.bs.dropdown.data-api", ".dropdown-menu", g.prototype.keydown) }(jQuery), +function (a) { "use strict"; function b(b, d) { return this.each(function () { var e = a(this), f = e.data("bs.modal"), g = a.extend({}, c.DEFAULTS, e.data(), "object" == typeof b && b); f || e.data("bs.modal", f = new c(this, g)), "string" == typeof b ? f[b](d) : g.show && f.show(d) }) } var c = function (b, c) { this.options = c, this.$body = a(document.body), this.$element = a(b), this.$dialog = this.$element.find(".modal-dialog"), this.$backdrop = null, this.isShown = null, this.originalBodyPad = null, this.scrollbarWidth = 0, this.ignoreBackdropClick = !1, this.options.remote && this.$element.find(".modal-content").load(this.options.remote, a.proxy(function () { this.$element.trigger("loaded.bs.modal") }, this)) }; c.VERSION = "3.3.5", c.TRANSITION_DURATION = 300, c.BACKDROP_TRANSITION_DURATION = 150, c.DEFAULTS = { backdrop: !0, keyboard: !0, show: !0 }, c.prototype.toggle = function (a) { return this.isShown ? this.hide() : this.show(a) }, c.prototype.show = function (b) { var d = this, e = a.Event("show.bs.modal", { relatedTarget: b }); this.$element.trigger(e), this.isShown || e.isDefaultPrevented() || (this.isShown = !0, this.checkScrollbar(), this.setScrollbar(), this.$body.addClass("modal-open"), this.escape(), this.resize(), this.$element.on("click.dismiss.bs.modal", '[data-dismiss="modal"]', a.proxy(this.hide, this)), this.$dialog.on("mousedown.dismiss.bs.modal", function () { d.$element.one("mouseup.dismiss.bs.modal", function (b) { a(b.target).is(d.$element) && (d.ignoreBackdropClick = !0) }) }), this.backdrop(function () { var e = a.support.transition && d.$element.hasClass("fade"); d.$element.parent().length || d.$element.appendTo(d.$body), d.$element.show().scrollTop(0), d.adjustDialog(), e && d.$element[0].offsetWidth, d.$element.addClass("in"), d.enforceFocus(); var f = a.Event("shown.bs.modal", { relatedTarget: b }); e ? d.$dialog.one("bsTransitionEnd", function () { d.$element.trigger("focus").trigger(f) }).emulateTransitionEnd(c.TRANSITION_DURATION) : d.$element.trigger("focus").trigger(f) })) }, c.prototype.hide = function (b) { b && b.preventDefault(), b = a.Event("hide.bs.modal"), this.$element.trigger(b), this.isShown && !b.isDefaultPrevented() && (this.isShown = !1, this.escape(), this.resize(), a(document).off("focusin.bs.modal"), this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"), this.$dialog.off("mousedown.dismiss.bs.modal"), a.support.transition && this.$element.hasClass("fade") ? this.$element.one("bsTransitionEnd", a.proxy(this.hideModal, this)).emulateTransitionEnd(c.TRANSITION_DURATION) : this.hideModal()) }, c.prototype.enforceFocus = function () { a(document).off("focusin.bs.modal").on("focusin.bs.modal", a.proxy(function (a) { this.$element[0] === a.target || this.$element.has(a.target).length || this.$element.trigger("focus") }, this)) }, c.prototype.escape = function () { this.isShown && this.options.keyboard ? this.$element.on("keydown.dismiss.bs.modal", a.proxy(function (a) { 27 == a.which && this.hide() }, this)) : this.isShown || this.$element.off("keydown.dismiss.bs.modal") }, c.prototype.resize = function () { this.isShown ? a(window).on("resize.bs.modal", a.proxy(this.handleUpdate, this)) : a(window).off("resize.bs.modal") }, c.prototype.hideModal = function () { var a = this; this.$element.hide(), this.backdrop(function () { a.$body.removeClass("modal-open"), a.resetAdjustments(), a.resetScrollbar(), a.$element.trigger("hidden.bs.modal") }) }, c.prototype.removeBackdrop = function () { this.$backdrop && this.$backdrop.remove(), this.$backdrop = null }, c.prototype.backdrop = function (b) { var d = this, e = this.$element.hasClass("fade") ? "fade" : ""; if (this.isShown && this.options.backdrop) { var f = a.support.transition && e; if (this.$backdrop = a(document.createElement("div")).addClass("modal-backdrop " + e).appendTo(this.$body), this.$element.on("click.dismiss.bs.modal", a.proxy(function (a) { return this.ignoreBackdropClick ? void (this.ignoreBackdropClick = !1) : void (a.target === a.currentTarget && ("static" == this.options.backdrop ? this.$element[0].focus() : this.hide())) }, this)), f && this.$backdrop[0].offsetWidth, this.$backdrop.addClass("in"), !b) return; f ? this.$backdrop.one("bsTransitionEnd", b).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION) : b() } else if (!this.isShown && this.$backdrop) { this.$backdrop.removeClass("in"); var g = function () { d.removeBackdrop(), b && b() }; a.support.transition && this.$element.hasClass("fade") ? this.$backdrop.one("bsTransitionEnd", g).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION) : g() } else b && b() }, c.prototype.handleUpdate = function () { this.adjustDialog() }, c.prototype.adjustDialog = function () { var a = this.$element[0].scrollHeight > document.documentElement.clientHeight; this.$element.css({ paddingLeft: !this.bodyIsOverflowing && a ? this.scrollbarWidth : "", paddingRight: this.bodyIsOverflowing && !a ? this.scrollbarWidth : "" }) }, c.prototype.resetAdjustments = function () { this.$element.css({ paddingLeft: "", paddingRight: "" }) }, c.prototype.checkScrollbar = function () { var a = window.innerWidth; if (!a) { var b = document.documentElement.getBoundingClientRect(); a = b.right - Math.abs(b.left) } this.bodyIsOverflowing = document.body.clientWidth < a, this.scrollbarWidth = this.measureScrollbar() }, c.prototype.setScrollbar = function () { var a = parseInt(this.$body.css("padding-right") || 0, 10); this.originalBodyPad = document.body.style.paddingRight || "", this.bodyIsOverflowing && this.$body.css("padding-right", a + this.scrollbarWidth) }, c.prototype.resetScrollbar = function () { this.$body.css("padding-right", this.originalBodyPad) }, c.prototype.measureScrollbar = function () { var a = document.createElement("div"); a.className = "modal-scrollbar-measure", this.$body.append(a); var b = a.offsetWidth - a.clientWidth; return this.$body[0].removeChild(a), b }; var d = a.fn.modal; a.fn.modal = b, a.fn.modal.Constructor = c, a.fn.modal.noConflict = function () { return a.fn.modal = d, this }, a(document).on("click.bs.modal.data-api", '[data-toggle="modal"]', function (c) { var d = a(this), e = d.attr("href"), f = a(d.attr("data-target") || e && e.replace(/.*(?=#[^\s]+$)/, "")), g = f.data("bs.modal") ? "toggle" : a.extend({ remote: !/#/.test(e) && e }, f.data(), d.data()); d.is("a") && c.preventDefault(), f.one("show.bs.modal", function (a) { a.isDefaultPrevented() || f.one("hidden.bs.modal", function () { d.is(":visible") && d.trigger("focus") }) }), b.call(f, g, this) }) }(jQuery), +function (a) { "use strict"; function b(b) { return this.each(function () { var d = a(this), e = d.data("bs.tooltip"), f = "object" == typeof b && b; (e || !/destroy|hide/.test(b)) && (e || d.data("bs.tooltip", e = new c(this, f)), "string" == typeof b && e[b]()) }) } var c = function (a, b) { this.type = null, this.options = null, this.enabled = null, this.timeout = null, this.hoverState = null, this.$element = null, this.inState = null, this.init("tooltip", a, b) }; c.VERSION = "3.3.5", c.TRANSITION_DURATION = 150, c.DEFAULTS = { animation: !0, placement: "top", selector: !1, template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>', trigger: "hover focus", title: "", delay: 0, html: !1, container: !1, viewport: { selector: "body", padding: 0 } }, c.prototype.init = function (b, c, d) { if (this.enabled = !0, this.type = b, this.$element = a(c), this.options = this.getOptions(d), this.$viewport = this.options.viewport && a(a.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : this.options.viewport.selector || this.options.viewport), this.inState = { click: !1, hover: !1, focus: !1 }, this.$element[0] instanceof document.constructor && !this.options.selector) throw new Error("`selector` option must be specified when initializing " + this.type + " on the window.document object!"); for (var e = this.options.trigger.split(" "), f = e.length; f--;) { var g = e[f]; if ("click" == g) this.$element.on("click." + this.type, this.options.selector, a.proxy(this.toggle, this)); else if ("manual" != g) { var h = "hover" == g ? "mouseenter" : "focusin", i = "hover" == g ? "mouseleave" : "focusout"; this.$element.on(h + "." + this.type, this.options.selector, a.proxy(this.enter, this)), this.$element.on(i + "." + this.type, this.options.selector, a.proxy(this.leave, this)) } } this.options.selector ? this._options = a.extend({}, this.options, { trigger: "manual", selector: "" }) : this.fixTitle() }, c.prototype.getDefaults = function () { return c.DEFAULTS }, c.prototype.getOptions = function (b) { return b = a.extend({}, this.getDefaults(), this.$element.data(), b), b.delay && "number" == typeof b.delay && (b.delay = { show: b.delay, hide: b.delay }), b }, c.prototype.getDelegateOptions = function () { var b = {}, c = this.getDefaults(); return this._options && a.each(this._options, function (a, d) { c[a] != d && (b[a] = d) }), b }, c.prototype.enter = function (b) { var c = b instanceof this.constructor ? b : a(b.currentTarget).data("bs." + this.type); return c || (c = new this.constructor(b.currentTarget, this.getDelegateOptions()), a(b.currentTarget).data("bs." + this.type, c)), b instanceof a.Event && (c.inState["focusin" == b.type ? "focus" : "hover"] = !0), c.tip().hasClass("in") || "in" == c.hoverState ? void (c.hoverState = "in") : (clearTimeout(c.timeout), c.hoverState = "in", c.options.delay && c.options.delay.show ? void (c.timeout = setTimeout(function () { "in" == c.hoverState && c.show() }, c.options.delay.show)) : c.show()) }, c.prototype.isInStateTrue = function () { for (var a in this.inState) if (this.inState[a]) return !0; return !1 }, c.prototype.leave = function (b) { var c = b instanceof this.constructor ? b : a(b.currentTarget).data("bs." + this.type); return c || (c = new this.constructor(b.currentTarget, this.getDelegateOptions()), a(b.currentTarget).data("bs." + this.type, c)), b instanceof a.Event && (c.inState["focusout" == b.type ? "focus" : "hover"] = !1), c.isInStateTrue() ? void 0 : (clearTimeout(c.timeout), c.hoverState = "out", c.options.delay && c.options.delay.hide ? void (c.timeout = setTimeout(function () { "out" == c.hoverState && c.hide() }, c.options.delay.hide)) : c.hide()) }, c.prototype.show = function () { var b = a.Event("show.bs." + this.type); if (this.hasContent() && this.enabled) { this.$element.trigger(b); var d = a.contains(this.$element[0].ownerDocument.documentElement, this.$element[0]); if (b.isDefaultPrevented() || !d) return; var e = this, f = this.tip(), g = this.getUID(this.type); this.setContent(), f.attr("id", g), this.$element.attr("aria-describedby", g), this.options.animation && f.addClass("fade"); var h = "function" == typeof this.options.placement ? this.options.placement.call(this, f[0], this.$element[0]) : this.options.placement, i = /\s?auto?\s?/i, j = i.test(h); j && (h = h.replace(i, "") || "top"), f.detach().css({ top: 0, left: 0, display: "block" }).addClass(h).data("bs." + this.type, this), this.options.container ? f.appendTo(this.options.container) : f.insertAfter(this.$element), this.$element.trigger("inserted.bs." + this.type); var k = this.getPosition(), l = f[0].offsetWidth, m = f[0].offsetHeight; if (j) { var n = h, o = this.getPosition(this.$viewport); h = "bottom" == h && k.bottom + m > o.bottom ? "top" : "top" == h && k.top - m < o.top ? "bottom" : "right" == h && k.right + l > o.width ? "left" : "left" == h && k.left - l < o.left ? "right" : h, f.removeClass(n).addClass(h) } var p = this.getCalculatedOffset(h, k, l, m); this.applyPlacement(p, h); var q = function () { var a = e.hoverState; e.$element.trigger("shown.bs." + e.type), e.hoverState = null, "out" == a && e.leave(e) }; a.support.transition && this.$tip.hasClass("fade") ? f.one("bsTransitionEnd", q).emulateTransitionEnd(c.TRANSITION_DURATION) : q() } }, c.prototype.applyPlacement = function (b, c) { var d = this.tip(), e = d[0].offsetWidth, f = d[0].offsetHeight, g = parseInt(d.css("margin-top"), 10), h = parseInt(d.css("margin-left"), 10); isNaN(g) && (g = 0), isNaN(h) && (h = 0), b.top += g, b.left += h, a.offset.setOffset(d[0], a.extend({ using: function (a) { d.css({ top: Math.round(a.top), left: Math.round(a.left) }) } }, b), 0), d.addClass("in"); var i = d[0].offsetWidth, j = d[0].offsetHeight; "top" == c && j != f && (b.top = b.top + f - j); var k = this.getViewportAdjustedDelta(c, b, i, j); k.left ? b.left += k.left : b.top += k.top; var l = /top|bottom/.test(c), m = l ? 2 * k.left - e + i : 2 * k.top - f + j, n = l ? "offsetWidth" : "offsetHeight"; d.offset(b), this.replaceArrow(m, d[0][n], l) }, c.prototype.replaceArrow = function (a, b, c) { this.arrow().css(c ? "left" : "top", 50 * (1 - a / b) + "%").css(c ? "top" : "left", "") }, c.prototype.setContent = function () { var a = this.tip(), b = this.getTitle(); a.find(".tooltip-inner")[this.options.html ? "html" : "text"](b), a.removeClass("fade in top bottom left right") }, c.prototype.hide = function (b) { function d() { "in" != e.hoverState && f.detach(), e.$element.removeAttr("aria-describedby").trigger("hidden.bs." + e.type), b && b() } var e = this, f = a(this.$tip), g = a.Event("hide.bs." + this.type); return this.$element.trigger(g), g.isDefaultPrevented() ? void 0 : (f.removeClass("in"), a.support.transition && f.hasClass("fade") ? f.one("bsTransitionEnd", d).emulateTransitionEnd(c.TRANSITION_DURATION) : d(), this.hoverState = null, this) }, c.prototype.fixTitle = function () { var a = this.$element; (a.attr("title") || "string" != typeof a.attr("data-original-title")) && a.attr("data-original-title", a.attr("title") || "").attr("title", "") }, c.prototype.hasContent = function () { return this.getTitle() }, c.prototype.getPosition = function (b) { b = b || this.$element; var c = b[0], d = "BODY" == c.tagName, e = c.getBoundingClientRect(); null == e.width && (e = a.extend({}, e, { width: e.right - e.left, height: e.bottom - e.top })); var f = d ? { top: 0, left: 0 } : b.offset(), g = { scroll: d ? document.documentElement.scrollTop || document.body.scrollTop : b.scrollTop() }, h = d ? { width: a(window).width(), height: a(window).height() } : null; return a.extend({}, e, g, h, f) }, c.prototype.getCalculatedOffset = function (a, b, c, d) { return "bottom" == a ? { top: b.top + b.height, left: b.left + b.width / 2 - c / 2 } : "top" == a ? { top: b.top - d, left: b.left + b.width / 2 - c / 2 } : "left" == a ? { top: b.top + b.height / 2 - d / 2, left: b.left - c } : { top: b.top + b.height / 2 - d / 2, left: b.left + b.width } }, c.prototype.getViewportAdjustedDelta = function (a, b, c, d) { var e = { top: 0, left: 0 }; if (!this.$viewport) return e; var f = this.options.viewport && this.options.viewport.padding || 0, g = this.getPosition(this.$viewport); if (/right|left/.test(a)) { var h = b.top - f - g.scroll, i = b.top + f - g.scroll + d; h < g.top ? e.top = g.top - h : i > g.top + g.height && (e.top = g.top + g.height - i) } else { var j = b.left - f, k = b.left + f + c; j < g.left ? e.left = g.left - j : k > g.right && (e.left = g.left + g.width - k) } return e }, c.prototype.getTitle = function () { var a, b = this.$element, c = this.options; return a = b.attr("data-original-title") || ("function" == typeof c.title ? c.title.call(b[0]) : c.title) }, c.prototype.getUID = function (a) { do a += ~~(1e6 * Math.random()); while (document.getElementById(a)); return a }, c.prototype.tip = function () { if (!this.$tip && (this.$tip = a(this.options.template), 1 != this.$tip.length)) throw new Error(this.type + " `template` option must consist of exactly 1 top-level element!"); return this.$tip }, c.prototype.arrow = function () { return this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow") }, c.prototype.enable = function () { this.enabled = !0 }, c.prototype.disable = function () { this.enabled = !1 }, c.prototype.toggleEnabled = function () { this.enabled = !this.enabled }, c.prototype.toggle = function (b) { var c = this; b && (c = a(b.currentTarget).data("bs." + this.type), c || (c = new this.constructor(b.currentTarget, this.getDelegateOptions()), a(b.currentTarget).data("bs." + this.type, c))), b ? (c.inState.click = !c.inState.click, c.isInStateTrue() ? c.enter(c) : c.leave(c)) : c.tip().hasClass("in") ? c.leave(c) : c.enter(c) }, c.prototype.destroy = function () { var a = this; clearTimeout(this.timeout), this.hide(function () { a.$element.off("." + a.type).removeData("bs." + a.type), a.$tip && a.$tip.detach(), a.$tip = null, a.$arrow = null, a.$viewport = null }) }; var d = a.fn.tooltip; a.fn.tooltip = b, a.fn.tooltip.Constructor = c, a.fn.tooltip.noConflict = function () { return a.fn.tooltip = d, this } }(jQuery), +function (a) { "use strict"; function b(b) { return this.each(function () { var d = a(this), e = d.data("bs.popover"), f = "object" == typeof b && b; (e || !/destroy|hide/.test(b)) && (e || d.data("bs.popover", e = new c(this, f)), "string" == typeof b && e[b]()) }) } var c = function (a, b) { this.init("popover", a, b) }; if (!a.fn.tooltip) throw new Error("Popover%20requires%20tooltip.html"); c.VERSION = "3.3.5", c.DEFAULTS = a.extend({}, a.fn.tooltip.Constructor.DEFAULTS, { placement: "right", trigger: "click", content: "", template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>' }), c.prototype = a.extend({}, a.fn.tooltip.Constructor.prototype), c.prototype.constructor = c, c.prototype.getDefaults = function () { return c.DEFAULTS }, c.prototype.setContent = function () { var a = this.tip(), b = this.getTitle(), c = this.getContent(); a.find(".popover-title")[this.options.html ? "html" : "text"](b), a.find(".popover-content").children().detach().end()[this.options.html ? "string" == typeof c ? "html" : "append" : "text"](c), a.removeClass("fade top bottom left right in"), a.find(".popover-title").html() || a.find(".popover-title").hide() }, c.prototype.hasContent = function () { return this.getTitle() || this.getContent() }, c.prototype.getContent = function () { var a = this.$element, b = this.options; return a.attr("data-content") || ("function" == typeof b.content ? b.content.call(a[0]) : b.content) }, c.prototype.arrow = function () { return this.$arrow = this.$arrow || this.tip().find(".arrow") }; var d = a.fn.popover; a.fn.popover = b, a.fn.popover.Constructor = c, a.fn.popover.noConflict = function () { return a.fn.popover = d, this } }(jQuery), +function (a) { "use strict"; function b(c, d) { this.$body = a(document.body), this.$scrollElement = a(a(c).is(document.body) ? window : c), this.options = a.extend({}, b.DEFAULTS, d), this.selector = (this.options.target || "") + " .nav li > a", this.offsets = [], this.targets = [], this.activeTarget = null, this.scrollHeight = 0, this.$scrollElement.on("scroll.bs.scrollspy", a.proxy(this.process, this)), this.refresh(), this.process() } function c(c) { return this.each(function () { var d = a(this), e = d.data("bs.scrollspy"), f = "object" == typeof c && c; e || d.data("bs.scrollspy", e = new b(this, f)), "string" == typeof c && e[c]() }) } b.VERSION = "3.3.5", b.DEFAULTS = { offset: 10 }, b.prototype.getScrollHeight = function () { return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight) }, b.prototype.refresh = function () { var b = this, c = "offset", d = 0; this.offsets = [], this.targets = [], this.scrollHeight = this.getScrollHeight(), a.isWindow(this.$scrollElement[0]) || (c = "position", d = this.$scrollElement.scrollTop()), this.$body.find(this.selector).map(function () { var b = a(this), e = b.data("target") || b.attr("href"), f = /^#./.test(e) && a(e); return f && f.length && f.is(":visible") && [[f[c]().top + d, e]] || null }).sort(function (a, b) { return a[0] - b[0] }).each(function () { b.offsets.push(this[0]), b.targets.push(this[1]) }) }, b.prototype.process = function () { var a, b = this.$scrollElement.scrollTop() + this.options.offset, c = this.getScrollHeight(), d = this.options.offset + c - this.$scrollElement.height(), e = this.offsets, f = this.targets, g = this.activeTarget; if (this.scrollHeight != c && this.refresh(), b >= d) return g != (a = f[f.length - 1]) && this.activate(a); if (g && b < e[0]) return this.activeTarget = null, this.clear(); for (a = e.length; a--;)g != f[a] && b >= e[a] && (void 0 === e[a + 1] || b < e[a + 1]) && this.activate(f[a]) }, b.prototype.activate = function (b) { this.activeTarget = b, this.clear(); var c = this.selector + '[data-target="' + b + '"],' + this.selector + '[href="' + b + '"]', d = a(c).parents("li").addClass("active"); d.parent(".dropdown-menu").length && (d = d.closest("li.dropdown").addClass("active")), d.trigger("activate.bs.scrollspy") }, b.prototype.clear = function () { a(this.selector).parentsUntil(this.options.target, ".active").removeClass("active") }; var d = a.fn.scrollspy; a.fn.scrollspy = c, a.fn.scrollspy.Constructor = b, a.fn.scrollspy.noConflict = function () { return a.fn.scrollspy = d, this }, a(window).on("load.bs.scrollspy.data-api", function () { a('[data-spy="scroll"]').each(function () { var b = a(this); c.call(b, b.data()) }) }) }(jQuery), +function (a) { "use strict"; function b(b) { return this.each(function () { var d = a(this), e = d.data("bs.tab"); e || d.data("bs.tab", e = new c(this)), "string" == typeof b && e[b]() }) } var c = function (b) { this.element = a(b) }; c.VERSION = "3.3.5", c.TRANSITION_DURATION = 150, c.prototype.show = function () { var b = this.element, c = b.closest("ul:not(.dropdown-menu)"), d = b.data("target"); if (d || (d = b.attr("href"), d = d && d.replace(/.*(?=#[^\s]*$)/, "")), !b.parent("li").hasClass("active")) { var e = c.find(".active:last a"), f = a.Event("hide.bs.tab", { relatedTarget: b[0] }), g = a.Event("show.bs.tab", { relatedTarget: e[0] }); if (e.trigger(f), b.trigger(g), !g.isDefaultPrevented() && !f.isDefaultPrevented()) { var h = a(d); this.activate(b.closest("li"), c), this.activate(h, h.parent(), function () { e.trigger({ type: "hidden.bs.tab", relatedTarget: b[0] }), b.trigger({ type: "shown.bs.tab", relatedTarget: e[0] }) }) } } }, c.prototype.activate = function (b, d, e) { function f() { g.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded", !1), b.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded", !0), h ? (b[0].offsetWidth, b.addClass("in")) : b.removeClass("fade"), b.parent(".dropdown-menu").length && b.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded", !0), e && e() } var g = d.find("> .active"), h = e && a.support.transition && (g.length && g.hasClass("fade") || !!d.find("> .fade").length); g.length && h ? g.one("bsTransitionEnd", f).emulateTransitionEnd(c.TRANSITION_DURATION) : f(), g.removeClass("in") }; var d = a.fn.tab; a.fn.tab = b, a.fn.tab.Constructor = c, a.fn.tab.noConflict = function () { return a.fn.tab = d, this }; var e = function (c) { c.preventDefault(), b.call(a(this), "show") }; a(document).on("click.bs.tab.data-api", '[data-toggle="tab"]', e).on("click.bs.tab.data-api", '[data-toggle="pill"]', e) }(jQuery), +function (a) { "use strict"; function b(b) { return this.each(function () { var d = a(this), e = d.data("bs.affix"), f = "object" == typeof b && b; e || d.data("bs.affix", e = new c(this, f)), "string" == typeof b && e[b]() }) } var c = function (b, d) { this.options = a.extend({}, c.DEFAULTS, d), this.$target = a(this.options.target).on("scroll.bs.affix.data-api", a.proxy(this.checkPosition, this)).on("click.bs.affix.data-api", a.proxy(this.checkPositionWithEventLoop, this)), this.$element = a(b), this.affixed = null, this.unpin = null, this.pinnedOffset = null, this.checkPosition() }; c.VERSION = "3.3.5", c.RESET = "affix affix-top affix-bottom", c.DEFAULTS = { offset: 0, target: window }, c.prototype.getState = function (a, b, c, d) { var e = this.$target.scrollTop(), f = this.$element.offset(), g = this.$target.height(); if (null != c && "top" == this.affixed) return c > e ? "top" : !1; if ("bottom" == this.affixed) return null != c ? e + this.unpin <= f.top ? !1 : "bottom" : a - d >= e + g ? !1 : "bottom"; var h = null == this.affixed, i = h ? e : f.top, j = h ? g : b; return null != c && c >= e ? "top" : null != d && i + j >= a - d ? "bottom" : !1 }, c.prototype.getPinnedOffset = function () { if (this.pinnedOffset) return this.pinnedOffset; this.$element.removeClass(c.RESET).addClass("affix"); var a = this.$target.scrollTop(), b = this.$element.offset(); return this.pinnedOffset = b.top - a }, c.prototype.checkPositionWithEventLoop = function () { setTimeout(a.proxy(this.checkPosition, this), 1) }, c.prototype.checkPosition = function () { if (this.$element.is(":visible")) { var b = this.$element.height(), d = this.options.offset, e = d.top, f = d.bottom, g = Math.max(a(document).height(), a(document.body).height()); "object" != typeof d && (f = e = d), "function" == typeof e && (e = d.top(this.$element)), "function" == typeof f && (f = d.bottom(this.$element)); var h = this.getState(g, b, e, f); if (this.affixed != h) { null != this.unpin && this.$element.css("top", ""); var i = "affix" + (h ? "-" + h : ""), j = a.Event(i + ".bs.affix"); if (this.$element.trigger(j), j.isDefaultPrevented()) return; this.affixed = h, this.unpin = "bottom" == h ? this.getPinnedOffset() : null, this.$element.removeClass(c.RESET).addClass(i).trigger(i.replace("affix", "affixed") + ".bs.affix") } "bottom" == h && this.$element.offset({ top: g - b - f }) } }; var d = a.fn.affix; a.fn.affix = b, a.fn.affix.Constructor = c, a.fn.affix.noConflict = function () { return a.fn.affix = d, this }, a(window).on("load", function () { a('[data-spy="affix"]').each(function () { var c = a(this), d = c.data(); d.offset = d.offset || {}, null != d.offsetBottom && (d.offset.bottom = d.offsetBottom), null != d.offsetTop && (d.offset.top = d.offsetTop), b.call(c, d) }) }) }(jQuery);;; (function ($, window, document, undefined) {
    var pluginName = 'menuAim', defaults = { triggerEvent: "hover", rowSelector: "> li", handle: "> a", submenuSelector: "*", submenuDirection: "right", openClassName: "open", tolerance: 75, activationDelay: 0, mouseLocsTracked: 3, defaultDelay: 700, enterCallback: $.noop, activateCallback: $.noop, deactivateCallback: $.noop, exitCallback: $.noop, exitMenuCallback: $.noop }; function Plugin(el, options) { this.el = el; this.options = $.extend({}, defaults, options); this._defaults = defaults; this._name = pluginName; this.init(); }
    Plugin.prototype = {
        init: function () {
            this.activeRow = null, this.mouseLocs = [], this.lastDelayLoc = null, this.timeoutId = null, this.openDelayId = null, this.isOnClick = $.inArray(this.options.triggerEvent, ['both', 'click']) > -1, this.isOnHover = $.inArray(this.options.triggerEvent, ['both', 'hover']) > -1; if (this.isOnHover) { this._hoverTriggerOn(); }
            if (this.isOnClick) { this._clickTriggerOn(); }
        }, _mouseMoveDocument: function (e) { obj = e.data.obj; obj.mouseLocs.push({ x: e.pageX, y: e.pageY }); if (obj.mouseLocs.length > obj.options.mouseLocsTracked) { obj.mouseLocs.shift(); } }, _mouseLeaveMenu: function (e) {
            obj = e.data.obj; if (obj.timeoutId) { clearTimeout(obj.timeoutId); }
            if (obj.openDelayId) { clearTimeout(obj.openDelayId); }
            obj._possiblyDeactivate(obj.activeRow); obj.options.exitMenuCallback(this);
        }, _mouseEnterRow: function (e) {
            obj = e.data.obj; if (obj.timeoutId) { clearTimeout(obj.timeoutId); }
            obj.options.enterCallback(this); obj._possiblyActivate(this);
        }, _mouseLeaveRow: function (e) { e.data.obj.options.exitCallback(this); }, _clickRow: function (e) { obj = e.data.obj; obj._activate(this); $(obj.el).find(obj.options.rowSelector).find(obj.options.handle).on('click', { obj: obj }, obj._clickRowHandle); }, _clickRowHandle: function (e) { obj = e.data.obj; if ($(this).closest('li').hasClass(obj.options.openClassName)) { obj._deactivate(); e.stopPropagation(); } }, _activate: function (row) {
            var obj = this; if (row == this.activeRow) { return; }
            if (this.openDelayId) { clearTimeout(this.openDelayId); }
            if (parseInt(obj.options.activationDelay, 0) > 0 && obj.isOnHover) { if (obj.activeRow) { obj._activateWithoutDelay(row); } else { this.openDelayId = setTimeout(function () { obj._activateWithoutDelay(row); }, obj.options.activationDelay); } } else { obj._activateWithoutDelay(row); }
        }, _activateWithoutDelay: function (row) {
            if (this.activeRow) { this.options.deactivateCallback(this.activeRow); }
            this.options.activateCallback(row); this.activeRow = row;
        }, _deactivate: function () {
            if (this.openDelayId) { clearTimeout(this.openDelayId); }
            if (this.activeRow) { this.options.deactivateCallback(this.activeRow); this.activeRow = null; }
        }, _possiblyActivate: function (row) { var delay = this._activationDelay(), that = this; if (delay) { this.timeoutId = setTimeout(function () { that._possiblyActivate(row); }, delay); } else { this._activate(row); } }, _possiblyDeactivate: function (row) { var delay = this._activationDelay(), that = this; if (delay) { this.timeoutId = setTimeout(function () { that._possiblyDeactivate(row); }, delay) } else { this.options.deactivateCallback(row); this.activeRow = null; } }, _activationDelay: function () {
            if (!this.activeRow || !$(this.activeRow).is(this.options.submenuSelector)) { return 0; }
            var offset = $(this.el).offset(), upperLeft = { x: offset.left, y: offset.top - this.options.tolerance }, upperRight = { x: offset.left + $(this.el).outerWidth(), y: upperLeft.y }, lowerLeft = { x: offset.left, y: offset.top + $(this.el).outerHeight() + this.options.tolerance }, lowerRight = { x: offset.left + $(this.el).outerWidth(), y: lowerLeft.y }, loc = this.mouseLocs[this.mouseLocs.length - 1], prevLoc = this.mouseLocs[0]; if (!loc) { return 0; }
            if (!prevLoc) { prevLoc = loc; }
            if (prevLoc.x < offset.left || prevLoc.x > lowerRight.x || prevLoc.y < offset.top || prevLoc.y > lowerRight.y) { return 0; }
            if (this.lastDelayLoc && loc.x == this.lastDelayLoc.x && loc.y == this.lastDelayLoc.y) { return 0; }
            function slope(a, b) { return (b.y - a.y) / (b.x - a.x); }; var decreasingCorner = upperRight, increasingCorner = lowerRight; if (this.options.submenuDirection == "left") { decreasingCorner = lowerLeft; increasingCorner = upperLeft; } else if (this.options.submenuDirection == "below") { decreasingCorner = lowerRight; increasingCorner = lowerLeft; } else if (this.options.submenuDirection == "above") { decreasingCorner = upperLeft; increasingCorner = upperRight; }
            var decreasingSlope = slope(loc, decreasingCorner), increasingSlope = slope(loc, increasingCorner), prevDecreasingSlope = slope(prevLoc, decreasingCorner), prevIncreasingSlope = slope(prevLoc, increasingCorner); if (decreasingSlope < prevDecreasingSlope && increasingSlope > prevIncreasingSlope) { this.lastDelayLoc = loc; return this.options.defaultDelay; }
            this.lastDelayLoc = null; return 0;
        }, _outsideMenuClick: function (e) { var obj = e.data.obj; if ($(obj.el).not(e.target) && $(obj.el).has(e.target).length === 0) { obj.options.deactivateCallback(obj.activeRow); obj.activeRow = null; } }, _hoverTriggerOn: function () { $(this.el).on('mouseleave', { obj: this }, this._mouseLeaveMenu).find(this.options.rowSelector).on('mouseenter', { obj: this }, this._mouseEnterRow).on('mouseleave', { obj: this }, this._mouseLeaveRow); $(window).on('blur', { obj: this }, this._mouseLeaveMenu); $(document).on('mousemove', { obj: this }, this._mouseMoveDocument); }, _hoverTriggerOff: function () {
            $(this.el).off('mouseleave', this._mouseLeaveMenu).find(this.options.rowSelector).off('mouseenter', this._mouseEnterRow).off('mouseleave', this._mouseLeaveRow)
            $(window).off('blur', this._mouseLeaveMenu); $(document).off('mousemove', { obj: this }, this._mouseMoveDocument);
        }, _clickTriggerOn: function () { $(this.el).find(this.options.rowSelector).on('click', { obj: this }, this._clickRow); $(document).on('click', { obj: this }, this._outsideMenuClick); }, _clickTriggerOff: function () { $(this.el).find(this.options.rowSelector).off('click', this._clickRow); $(document).off('click', this._outsideMenuClick); }, switchToHover: function () { this._clickTriggerOff(); this._hoverTriggerOn(); this.isOnHover = true; this.isOnClick = false; }, switchToClick: function () { this._hoverTriggerOff(); this._clickTriggerOn(); this.isOnHover = false; this.isOnClick = true; }
    }; $.fn[pluginName] = function (options) {
        var args = arguments; if (options === undefined || typeof options === 'object') { return this.each(function () { if (!$.data(this, 'plugin_' + pluginName)) { $.data(this, 'plugin_' + pluginName, new Plugin(this, options)); } }); } else if (typeof options === 'string' && options[0] !== '_' && options !== 'init') {
            var returns; this.each(function () {
                var instance = $.data(this, 'plugin_' + pluginName); if (instance instanceof Plugin && typeof instance[options] === 'function') { returns = instance[options].apply(instance, Array.prototype.slice.call(args, 1)); }
                if (options === 'destroy') { $.data(this, 'plugin_' + pluginName, null); }
            }); return returns !== undefined ? returns : this;
        }
    };
}(jQuery, window, document));; (function (undefined) {
    var moment, VERSION = '2.8.3', globalScope = typeof global !== 'undefined' ? global : this, oldGlobalMoment, round = Math.round, hasOwnProperty = Object.prototype.hasOwnProperty, i, YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, locales = {}, momentProperties = [], hasModule = (typeof module !== 'undefined' && module.exports), aspNetJsonRegex = /^\/?Date\((\-?\d+)/i, aspNetTimeSpanJsonRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/, isoDurationRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/, formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g, parseTokenOneOrTwoDigits = /\d\d?/, parseTokenOneToThreeDigits = /\d{1,3}/, parseTokenOneToFourDigits = /\d{1,4}/, parseTokenOneToSixDigits = /[+\-]?\d{1,6}/, parseTokenDigits = /\d+/, parseTokenWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i, parseTokenTimezone = /Z|[\+\-]\d\d:?\d\d/gi, parseTokenT = /T/i, parseTokenTimestampMs = /[\+\-]?\d+(\.\d{1,3})?/, parseTokenOrdinal = /\d{1,2}/, parseTokenOneDigit = /\d/, parseTokenTwoDigits = /\d\d/, parseTokenThreeDigits = /\d{3}/, parseTokenFourDigits = /\d{4}/, parseTokenSixDigits = /[+-]?\d{6}/, parseTokenSignedNumber = /[+-]?\d+/, isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/, isoFormat = 'YYYY-MM-DDTHH:mm:ssZ', isoDates = [['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/], ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/], ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/], ['GGGG-[W]WW', /\d{4}-W\d{2}/], ['YYYY-DDD', /\d{4}-\d{3}/]], isoTimes = [['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/], ['HH:mm', /(T| )\d\d:\d\d/], ['HH', /(T| )\d\d/]], parseTimezoneChunker = /([\+\-]|\d\d)/gi, proxyGettersAndSetters = 'Date|Hours|Minutes|Seconds|Milliseconds'.split('|'), unitMillisecondFactors = { 'Milliseconds': 1, 'Seconds': 1e3, 'Minutes': 6e4, 'Hours': 36e5, 'Days': 864e5, 'Months': 2592e6, 'Years': 31536e6 }, unitAliases = { ms: 'millisecond', s: 'second', m: 'minute', h: 'hour', d: 'day', D: 'date', w: 'week', W: 'isoWeek', M: 'month', Q: 'quarter', y: 'year', DDD: 'dayOfYear', e: 'weekday', E: 'isoWeekday', gg: 'weekYear', GG: 'isoWeekYear' }, camelFunctions = { dayofyear: 'dayOfYear', isoweekday: 'isoWeekday', isoweek: 'isoWeek', weekyear: 'weekYear', isoweekyear: 'isoWeekYear' }, formatFunctions = {}, relativeTimeThresholds = { s: 45, m: 45, h: 22, d: 26, M: 11 }, ordinalizeTokens = 'DDD w W M D d'.split(' '), paddedTokens = 'M D H h m s w W'.split(' '), formatTokenFunctions = {
        M: function () { return this.month() + 1; }, MMM: function (format) { return this.localeData().monthsShort(this, format); }, MMMM: function (format) { return this.localeData().months(this, format); }, D: function () { return this.date(); }, DDD: function () { return this.dayOfYear(); }, d: function () { return this.day(); }, dd: function (format) { return this.localeData().weekdaysMin(this, format); }, ddd: function (format) { return this.localeData().weekdaysShort(this, format); }, dddd: function (format) { return this.localeData().weekdays(this, format); }, w: function () { return this.week(); }, W: function () { return this.isoWeek(); }, YY: function () { return leftZeroFill(this.year() % 100, 2); }, YYYY: function () { return leftZeroFill(this.year(), 4); }, YYYYY: function () { return leftZeroFill(this.year(), 5); }, YYYYYY: function () { var y = this.year(), sign = y >= 0 ? '+' : '-'; return sign + leftZeroFill(Math.abs(y), 6); }, gg: function () { return leftZeroFill(this.weekYear() % 100, 2); }, gggg: function () { return leftZeroFill(this.weekYear(), 4); }, ggggg: function () { return leftZeroFill(this.weekYear(), 5); }, GG: function () { return leftZeroFill(this.isoWeekYear() % 100, 2); }, GGGG: function () { return leftZeroFill(this.isoWeekYear(), 4); }, GGGGG: function () { return leftZeroFill(this.isoWeekYear(), 5); }, e: function () { return this.weekday(); }, E: function () { return this.isoWeekday(); }, a: function () { return this.localeData().meridiem(this.hours(), this.minutes(), true); }, A: function () { return this.localeData().meridiem(this.hours(), this.minutes(), false); }, H: function () { return this.hours(); }, h: function () { return this.hours() % 12 || 12; }, m: function () { return this.minutes(); }, s: function () { return this.seconds(); }, S: function () { return toInt(this.milliseconds() / 100); }, SS: function () { return leftZeroFill(toInt(this.milliseconds() / 10), 2); }, SSS: function () { return leftZeroFill(this.milliseconds(), 3); }, SSSS: function () { return leftZeroFill(this.milliseconds(), 3); }, Z: function () {
            var a = -this.zone(), b = '+'; if (a < 0) { a = -a; b = '-'; }
            return b + leftZeroFill(toInt(a / 60), 2) + ':' + leftZeroFill(toInt(a) % 60, 2);
        }, ZZ: function () {
            var a = -this.zone(), b = '+'; if (a < 0) { a = -a; b = '-'; }
            return b + leftZeroFill(toInt(a / 60), 2) + leftZeroFill(toInt(a) % 60, 2);
        }, z: function () { return this.zoneAbbr(); }, zz: function () { return this.zoneName(); }, X: function () { return this.unix(); }, Q: function () { return this.quarter(); }
    }, deprecations = {}, lists = ['months', 'monthsShort', 'weekdays', 'weekdaysShort', 'weekdaysMin']; function dfl(a, b, c) { switch (arguments.length) { case 2: return a != null ? a : b; case 3: return a != null ? a : b != null ? b : c; default: throw new Error('Implement me'); } }
    function hasOwnProp(a, b) { return hasOwnProperty.call(a, b); }
    function defaultParsingFlags() { return { empty: false, unusedTokens: [], unusedInput: [], overflow: -2, charsLeftOver: 0, nullInput: false, invalidMonth: null, invalidFormat: false, userInvalidated: false, iso: false }; }
    function printMsg(msg) { if (moment.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) { console.warn('Deprecation warning: ' + msg); } }
    function deprecate(msg, fn) {
        var firstTime = true; return extend(function () {
            if (firstTime) { printMsg(msg); firstTime = false; }
            return fn.apply(this, arguments);
        }, fn);
    }
    function deprecateSimple(name, msg) { if (!deprecations[name]) { printMsg(msg); deprecations[name] = true; } }
    function padToken(func, count) { return function (a) { return leftZeroFill(func.call(this, a), count); }; }
    function ordinalizeToken(func, period) { return function (a) { return this.localeData().ordinal(func.call(this, a), period); }; }
    while (ordinalizeTokens.length) { i = ordinalizeTokens.pop(); formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i], i); }
    while (paddedTokens.length) { i = paddedTokens.pop(); formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2); }
    formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3); function Locale() { }
    function Moment(config, skipOverflow) {
        if (skipOverflow !== false) { checkOverflow(config); }
        copyConfig(this, config); this._d = new Date(+config._d);
    }
    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration), years = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months = normalizedInput.month || 0, weeks = normalizedInput.week || 0, days = normalizedInput.day || 0, hours = normalizedInput.hour || 0, minutes = normalizedInput.minute || 0, seconds = normalizedInput.second || 0, milliseconds = normalizedInput.millisecond || 0; this._milliseconds = +milliseconds +
            seconds * 1e3 +
            minutes * 6e4 +
            hours * 36e5; this._days = +days +
                weeks * 7; this._months = +months +
                    quarters * 3 +
                    years * 12; this._data = {}; this._locale = moment.localeData(); this._bubble();
    }
    function extend(a, b) {
        for (var i in b) { if (hasOwnProp(b, i)) { a[i] = b[i]; } }
        if (hasOwnProp(b, 'toString')) { a.toString = b.toString; }
        if (hasOwnProp(b, 'valueOf')) { a.valueOf = b.valueOf; }
        return a;
    }
    function copyConfig(to, from) {
        var i, prop, val; if (typeof from._isAMomentObject !== 'undefined') { to._isAMomentObject = from._isAMomentObject; }
        if (typeof from._i !== 'undefined') { to._i = from._i; }
        if (typeof from._f !== 'undefined') { to._f = from._f; }
        if (typeof from._l !== 'undefined') { to._l = from._l; }
        if (typeof from._strict !== 'undefined') { to._strict = from._strict; }
        if (typeof from._tzm !== 'undefined') { to._tzm = from._tzm; }
        if (typeof from._isUTC !== 'undefined') { to._isUTC = from._isUTC; }
        if (typeof from._offset !== 'undefined') { to._offset = from._offset; }
        if (typeof from._pf !== 'undefined') { to._pf = from._pf; }
        if (typeof from._locale !== 'undefined') { to._locale = from._locale; }
        if (momentProperties.length > 0) { for (i in momentProperties) { prop = momentProperties[i]; val = from[prop]; if (typeof val !== 'undefined') { to[prop] = val; } } }
        return to;
    }
    function absRound(number) { if (number < 0) { return Math.ceil(number); } else { return Math.floor(number); } }
    function leftZeroFill(number, targetLength, forceSign) {
        var output = '' + Math.abs(number), sign = number >= 0; while (output.length < targetLength) { output = '0' + output; }
        return (sign ? (forceSign ? '+' : '') : '-') + output;
    }
    function positiveMomentsDifference(base, other) {
        var res = { milliseconds: 0, months: 0 }; res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12; if (base.clone().add(res.months, 'M').isAfter(other)) { --res.months; }
        res.milliseconds = +other - +(base.clone().add(res.months, 'M')); return res;
    }
    function momentsDifference(base, other) {
        var res; other = makeAs(other, base); if (base.isBefore(other)) { res = positiveMomentsDifference(base, other); } else { res = positiveMomentsDifference(other, base); res.milliseconds = -res.milliseconds; res.months = -res.months; }
        return res;
    }
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp; if (period !== null && !isNaN(+period)) { deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period).'); tmp = val; val = period; period = tmp; }
            val = typeof val === 'string' ? +val : val; dur = moment.duration(val, period); addOrSubtractDurationFromMoment(this, dur, direction); return this;
        };
    }
    function addOrSubtractDurationFromMoment(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds, days = duration._days, months = duration._months; updateOffset = updateOffset == null ? true : updateOffset; if (milliseconds) { mom._d.setTime(+mom._d + milliseconds * isAdding); }
        if (days) { rawSetter(mom, 'Date', rawGetter(mom, 'Date') + days * isAdding); }
        if (months) { rawMonthSetter(mom, rawGetter(mom, 'Month') + months * isAdding); }
        if (updateOffset) { moment.updateOffset(mom, days || months); }
    }
    function isArray(input) { return Object.prototype.toString.call(input) === '[object Array]'; }
    function isDate(input) { return Object.prototype.toString.call(input) === '[object Date]' || input instanceof Date; }
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i; for (i = 0; i < len; i++) { if ((dontConvert && array1[i] !== array2[i]) || (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) { diffs++; } }
        return diffs + lengthDiff;
    }
    function normalizeUnits(units) {
        if (units) { var lowered = units.toLowerCase().replace(/(.)s$/, '$1'); units = unitAliases[units] || camelFunctions[lowered] || lowered; }
        return units;
    }
    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {}, normalizedProp, prop; for (prop in inputObject) { if (hasOwnProp(inputObject, prop)) { normalizedProp = normalizeUnits(prop); if (normalizedProp) { normalizedInput[normalizedProp] = inputObject[prop]; } } }
        return normalizedInput;
    }
    function makeList(field) {
        var count, setter; if (field.indexOf('week') === 0) { count = 7; setter = 'day'; }
        else if (field.indexOf('month') === 0) { count = 12; setter = 'month'; }
        else { return; }
        moment[field] = function (format, index) {
            var i, getter, method = moment._locale[field], results = []; if (typeof format === 'number') { index = format; format = undefined; }
            getter = function (i) { var m = moment().utc().set(setter, i); return method.call(moment._locale, m, format || ''); }; if (index != null) { return getter(index); }
            else {
                for (i = 0; i < count; i++) { results.push(getter(i)); }
                return results;
            }
        };
    }
    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion, value = 0; if (coercedNumber !== 0 && isFinite(coercedNumber)) { if (coercedNumber >= 0) { value = Math.floor(coercedNumber); } else { value = Math.ceil(coercedNumber); } }
        return value;
    }
    function daysInMonth(year, month) { return new Date(Date.UTC(year, month + 1, 0)).getUTCDate(); }
    function weeksInYear(year, dow, doy) { return weekOfYear(moment([year, 11, 31 + dow - doy]), dow, doy).week; }
    function daysInYear(year) { return isLeapYear(year) ? 366 : 365; }
    function isLeapYear(year) { return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0; }
    function checkOverflow(m) {
        var overflow; if (m._a && m._pf.overflow === -2) {
            overflow = m._a[MONTH] < 0 || m._a[MONTH] > 11 ? MONTH : m._a[DATE] < 1 || m._a[DATE] > daysInMonth(m._a[YEAR], m._a[MONTH]) ? DATE : m._a[HOUR] < 0 || m._a[HOUR] > 23 ? HOUR : m._a[MINUTE] < 0 || m._a[MINUTE] > 59 ? MINUTE : m._a[SECOND] < 0 || m._a[SECOND] > 59 ? SECOND : m._a[MILLISECOND] < 0 || m._a[MILLISECOND] > 999 ? MILLISECOND : -1; if (m._pf._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) { overflow = DATE; }
            m._pf.overflow = overflow;
        }
    }
    function isValid(m) {
        if (m._isValid == null) { m._isValid = !isNaN(m._d.getTime()) && m._pf.overflow < 0 && !m._pf.empty && !m._pf.invalidMonth && !m._pf.nullInput && !m._pf.invalidFormat && !m._pf.userInvalidated; if (m._strict) { m._isValid = m._isValid && m._pf.charsLeftOver === 0 && m._pf.unusedTokens.length === 0; } }
        return m._isValid;
    }
    function normalizeLocale(key) { return key ? key.toLowerCase().replace('_', '-') : key; }
    function chooseLocale(names) {
        var i = 0, j, next, locale, split; while (i < names.length) {
            split = normalizeLocale(names[i]).split('-'); j = split.length; next = normalizeLocale(names[i + 1]); next = next ? next.split('-') : null; while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-')); if (locale) { return locale; }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) { break; }
                j--;
            }
            i++;
        }
        return null;
    }
    function loadLocale(name) {
        var oldLocale = null; if (!locales[name] && hasModule) { try { oldLocale = moment.locale(); require('./locale/' + name); moment.locale(oldLocale); } catch (e) { } }
        return locales[name];
    }
    function makeAs(input, model) { return model._isUTC ? moment(input).zone(model._offset || 0) : moment(input).local(); }
    extend(Locale.prototype, {
        set: function (config) { var prop, i; for (i in config) { prop = config[i]; if (typeof prop === 'function') { this[i] = prop; } else { this['_' + i] = prop; } } }, _months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'), months: function (m) { return this._months[m.month()]; }, _monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'), monthsShort: function (m) { return this._monthsShort[m.month()]; }, monthsParse: function (monthName) {
            var i, mom, regex; if (!this._monthsParse) { this._monthsParse = []; }
            for (i = 0; i < 12; i++) {
                if (!this._monthsParse[i]) { mom = moment.utc([2000, i]); regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, ''); this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i'); }
                if (this._monthsParse[i].test(monthName)) { return i; }
            }
        }, _weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'), weekdays: function (m) { return this._weekdays[m.day()]; }, _weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'), weekdaysShort: function (m) { return this._weekdaysShort[m.day()]; }, _weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'), weekdaysMin: function (m) { return this._weekdaysMin[m.day()]; }, weekdaysParse: function (weekdayName) {
            var i, mom, regex; if (!this._weekdaysParse) { this._weekdaysParse = []; }
            for (i = 0; i < 7; i++) {
                if (!this._weekdaysParse[i]) { mom = moment([2000, 1]).day(i); regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, ''); this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i'); }
                if (this._weekdaysParse[i].test(weekdayName)) { return i; }
            }
        }, _longDateFormat: { LT: 'h:mm A', L: 'MM/DD/YYYY', LL: 'MMMM D, YYYY', LLL: 'MMMM D, YYYY LT', LLLL: 'dddd, MMMM D, YYYY LT' }, longDateFormat: function (key) {
            var output = this._longDateFormat[key]; if (!output && this._longDateFormat[key.toUpperCase()]) { output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (val) { return val.slice(1); }); this._longDateFormat[key] = output; }
            return output;
        }, isPM: function (input) { return ((input + '').toLowerCase().charAt(0) === 'p'); }, _meridiemParse: /[ap]\.?m?\.?/i, meridiem: function (hours, minutes, isLower) { if (hours > 11) { return isLower ? 'pm' : 'PM'; } else { return isLower ? 'am' : 'AM'; } }, _calendar: { sameDay: '[Today at] LT', nextDay: '[Tomorrow at] LT', nextWeek: 'dddd [at] LT', lastDay: '[Yesterday at] LT', lastWeek: '[Last] dddd [at] LT', sameElse: 'L' }, calendar: function (key, mom) { var output = this._calendar[key]; return typeof output === 'function' ? output.apply(mom) : output; }, _relativeTime: { future: 'in %s', past: '%s ago', s: 'a few seconds', m: 'a minute', mm: '%d minutes', h: 'an hour', hh: '%d hours', d: 'a day', dd: '%d days', M: 'a month', MM: '%d months', y: 'a year', yy: '%d years' }, relativeTime: function (number, withoutSuffix, string, isFuture) { var output = this._relativeTime[string]; return (typeof output === 'function') ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number); }, pastFuture: function (diff, output) { var format = this._relativeTime[diff > 0 ? 'future' : 'past']; return typeof format === 'function' ? format(output) : format.replace(/%s/i, output); }, ordinal: function (number) { return this._ordinal.replace('%d', number); }, _ordinal: '%d', preparse: function (string) { return string; }, postformat: function (string) { return string; }, week: function (mom) { return weekOfYear(mom, this._week.dow, this._week.doy).week; }, _week: { dow: 0, doy: 6 }, _invalidDate: 'Invalid date', invalidDate: function () { return this._invalidDate; }
    }); function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) { return input.replace(/^\[|\]$/g, ''); }
        return input.replace(/\\/g, '');
    }
    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length; for (i = 0, length = array.length; i < length; i++) { if (formatTokenFunctions[array[i]]) { array[i] = formatTokenFunctions[array[i]]; } else { array[i] = removeFormattingTokens(array[i]); } }
        return function (mom) {
            var output = ''; for (i = 0; i < length; i++) { output += array[i] instanceof Function ? array[i].call(mom, format) : array[i]; }
            return output;
        };
    }
    function formatMoment(m, format) {
        if (!m.isValid()) { return m.localeData().invalidDate(); }
        format = expandFormat(format, m.localeData()); if (!formatFunctions[format]) { formatFunctions[format] = makeFormatFunction(format); }
        return formatFunctions[format](m);
    }
    function expandFormat(format, locale) {
        var i = 5; function replaceLongDateFormatTokens(input) { return locale.longDateFormat(input) || input; }
        localFormattingTokens.lastIndex = 0; while (i >= 0 && localFormattingTokens.test(format)) { format = format.replace(localFormattingTokens, replaceLongDateFormatTokens); localFormattingTokens.lastIndex = 0; i -= 1; }
        return format;
    }
    function getParseRegexForToken(token, config) {
        var a, strict = config._strict; switch (token) {
            case 'Q': return parseTokenOneDigit; case 'DDDD': return parseTokenThreeDigits; case 'YYYY': case 'GGGG': case 'gggg': return strict ? parseTokenFourDigits : parseTokenOneToFourDigits; case 'Y': case 'G': case 'g': return parseTokenSignedNumber; case 'YYYYYY': case 'YYYYY': case 'GGGGG': case 'ggggg': return strict ? parseTokenSixDigits : parseTokenOneToSixDigits; case 'S': if (strict) { return parseTokenOneDigit; }
            case 'SS': if (strict) { return parseTokenTwoDigits; }
            case 'SSS': if (strict) { return parseTokenThreeDigits; }
            case 'DDD': return parseTokenOneToThreeDigits; case 'MMM': case 'MMMM': case 'dd': case 'ddd': case 'dddd': return parseTokenWord; case 'a': case 'A': return config._locale._meridiemParse; case 'X': return parseTokenTimestampMs; case 'Z': case 'ZZ': return parseTokenTimezone; case 'T': return parseTokenT; case 'SSSS': return parseTokenDigits; case 'MM': case 'DD': case 'YY': case 'GG': case 'gg': case 'HH': case 'hh': case 'mm': case 'ss': case 'ww': case 'WW': return strict ? parseTokenTwoDigits : parseTokenOneOrTwoDigits; case 'M': case 'D': case 'd': case 'H': case 'h': case 'm': case 's': case 'w': case 'W': case 'e': case 'E': return parseTokenOneOrTwoDigits; case 'Do': return parseTokenOrdinal; default: a = new RegExp(regexpEscape(unescapeFormat(token.replace('\\', '')), 'i')); return a;
        }
    }
    function timezoneMinutesFromString(string) { string = string || ''; var possibleTzMatches = (string.match(parseTokenTimezone) || []), tzChunk = possibleTzMatches[possibleTzMatches.length - 1] || [], parts = (tzChunk + '').match(parseTimezoneChunker) || ['-', 0, 0], minutes = +(parts[1] * 60) + toInt(parts[2]); return parts[0] === '+' ? -minutes : minutes; }
    function addTimeToArrayFromToken(token, input, config) {
        var a, datePartArray = config._a; switch (token) {
            case 'Q': if (input != null) { datePartArray[MONTH] = (toInt(input) - 1) * 3; }
                break; case 'M': case 'MM': if (input != null) { datePartArray[MONTH] = toInt(input) - 1; }
                break; case 'MMM': case 'MMMM': a = config._locale.monthsParse(input); if (a != null) { datePartArray[MONTH] = a; } else { config._pf.invalidMonth = input; }
                break; case 'D': case 'DD': if (input != null) { datePartArray[DATE] = toInt(input); }
                break; case 'Do': if (input != null) { datePartArray[DATE] = toInt(parseInt(input, 10)); }
                break; case 'DDD': case 'DDDD': if (input != null) { config._dayOfYear = toInt(input); }
                break; case 'YY': datePartArray[YEAR] = moment.parseTwoDigitYear(input); break; case 'YYYY': case 'YYYYY': case 'YYYYYY': datePartArray[YEAR] = toInt(input); break; case 'a': case 'A': config._isPm = config._locale.isPM(input); break; case 'H': case 'HH': case 'h': case 'hh': datePartArray[HOUR] = toInt(input); break; case 'm': case 'mm': datePartArray[MINUTE] = toInt(input); break; case 's': case 'ss': datePartArray[SECOND] = toInt(input); break; case 'S': case 'SS': case 'SSS': case 'SSSS': datePartArray[MILLISECOND] = toInt(('0.' + input) * 1000); break; case 'X': config._d = new Date(parseFloat(input) * 1000); break; case 'Z': case 'ZZ': config._useUTC = true; config._tzm = timezoneMinutesFromString(input); break; case 'dd': case 'ddd': case 'dddd': a = config._locale.weekdaysParse(input); if (a != null) { config._w = config._w || {}; config._w['d'] = a; } else { config._pf.invalidWeekday = input; }
                break; case 'w': case 'ww': case 'W': case 'WW': case 'd': case 'e': case 'E': token = token.substr(0, 1); case 'gggg': case 'GGGG': case 'GGGGG': token = token.substr(0, 2); if (input) { config._w = config._w || {}; config._w[token] = toInt(input); }
                break; case 'gg': case 'GG': config._w = config._w || {}; config._w[token] = moment.parseTwoDigitYear(input);
        }
    }
    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp; w = config._w; if (w.GG != null || w.W != null || w.E != null) { dow = 1; doy = 4; weekYear = dfl(w.GG, config._a[YEAR], weekOfYear(moment(), 1, 4).year); week = dfl(w.W, 1); weekday = dfl(w.E, 1); } else { dow = config._locale._week.dow; doy = config._locale._week.doy; weekYear = dfl(w.gg, config._a[YEAR], weekOfYear(moment(), dow, doy).year); week = dfl(w.w, 1); if (w.d != null) { weekday = w.d; if (weekday < dow) { ++week; } } else if (w.e != null) { weekday = w.e + dow; } else { weekday = dow; } }
        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow); config._a[YEAR] = temp.year; config._dayOfYear = temp.dayOfYear;
    }
    function dateFromConfig(config) {
        var i, date, input = [], currentDate, yearToUse; if (config._d) { return; }
        currentDate = currentDateArray(config); if (config._w && config._a[DATE] == null && config._a[MONTH] == null) { dayOfYearFromWeekInfo(config); }
        if (config._dayOfYear) {
            yearToUse = dfl(config._a[YEAR], currentDate[YEAR]); if (config._dayOfYear > daysInYear(yearToUse)) { config._pf._overflowDayOfYear = true; }
            date = makeUTCDate(yearToUse, 0, config._dayOfYear); config._a[MONTH] = date.getUTCMonth(); config._a[DATE] = date.getUTCDate();
        }
        for (i = 0; i < 3 && config._a[i] == null; ++i) { config._a[i] = input[i] = currentDate[i]; }
        for (; i < 7; i++) { config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i]; }
        config._d = (config._useUTC ? makeUTCDate : makeDate).apply(null, input); if (config._tzm != null) { config._d.setUTCMinutes(config._d.getUTCMinutes() + config._tzm); }
    }
    function dateFromObject(config) {
        var normalizedInput; if (config._d) { return; }
        normalizedInput = normalizeObjectUnits(config._i); config._a = [normalizedInput.year, normalizedInput.month, normalizedInput.day, normalizedInput.hour, normalizedInput.minute, normalizedInput.second, normalizedInput.millisecond]; dateFromConfig(config);
    }
    function currentDateArray(config) { var now = new Date(); if (config._useUTC) { return [now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()]; } else { return [now.getFullYear(), now.getMonth(), now.getDate()]; } }
    function makeDateFromStringAndFormat(config) {
        if (config._f === moment.ISO_8601) { parseISO(config); return; }
        config._a = []; config._pf.empty = true; var string = '' + config._i, i, parsedInput, tokens, token, skipped, stringLength = string.length, totalParsedInputLength = 0; tokens = expandFormat(config._f, config._locale).match(formattingTokens) || []; for (i = 0; i < tokens.length; i++) {
            token = tokens[i]; parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0]; if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput)); if (skipped.length > 0) { config._pf.unusedInput.push(skipped); }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length); totalParsedInputLength += parsedInput.length;
            }
            if (formatTokenFunctions[token]) {
                if (parsedInput) { config._pf.empty = false; }
                else { config._pf.unusedTokens.push(token); }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) { config._pf.unusedTokens.push(token); }
        }
        config._pf.charsLeftOver = stringLength - totalParsedInputLength; if (string.length > 0) { config._pf.unusedInput.push(string); }
        if (config._isPm && config._a[HOUR] < 12) { config._a[HOUR] += 12; }
        if (config._isPm === false && config._a[HOUR] === 12) { config._a[HOUR] = 0; }
        dateFromConfig(config); checkOverflow(config);
    }
    function unescapeFormat(s) { return s.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) { return p1 || p2 || p3 || p4; }); }
    function regexpEscape(s) { return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&'); }
    function makeDateFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore; if (config._f.length === 0) { config._pf.invalidFormat = true; config._d = new Date(NaN); return; }
        for (i = 0; i < config._f.length; i++) {
            currentScore = 0; tempConfig = copyConfig({}, config); if (config._useUTC != null) { tempConfig._useUTC = config._useUTC; }
            tempConfig._pf = defaultParsingFlags(); tempConfig._f = config._f[i]; makeDateFromStringAndFormat(tempConfig); if (!isValid(tempConfig)) { continue; }
            currentScore += tempConfig._pf.charsLeftOver; currentScore += tempConfig._pf.unusedTokens.length * 10; tempConfig._pf.score = currentScore; if (scoreToBeat == null || currentScore < scoreToBeat) { scoreToBeat = currentScore; bestMoment = tempConfig; }
        }
        extend(config, bestMoment || tempConfig);
    }
    function parseISO(config) {
        var i, l, string = config._i, match = isoRegex.exec(string); if (match) {
            config._pf.iso = true; for (i = 0, l = isoDates.length; i < l; i++) { if (isoDates[i][1].exec(string)) { config._f = isoDates[i][0] + (match[6] || ' '); break; } }
            for (i = 0, l = isoTimes.length; i < l; i++) { if (isoTimes[i][1].exec(string)) { config._f += isoTimes[i][0]; break; } }
            if (string.match(parseTokenTimezone)) { config._f += 'Z'; }
            makeDateFromStringAndFormat(config);
        } else { config._isValid = false; }
    }
    function makeDateFromString(config) { parseISO(config); if (config._isValid === false) { delete config._isValid; moment.createFromInputFallback(config); } }
    function map(arr, fn) {
        var res = [], i; for (i = 0; i < arr.length; ++i) { res.push(fn(arr[i], i)); }
        return res;
    }
    function makeDateFromInput(config) { var input = config._i, matched; if (input === undefined) { config._d = new Date(); } else if (isDate(input)) { config._d = new Date(+input); } else if ((matched = aspNetJsonRegex.exec(input)) !== null) { config._d = new Date(+matched[1]); } else if (typeof input === 'string') { makeDateFromString(config); } else if (isArray(input)) { config._a = map(input.slice(0), function (obj) { return parseInt(obj, 10); }); dateFromConfig(config); } else if (typeof (input) === 'object') { dateFromObject(config); } else if (typeof (input) === 'number') { config._d = new Date(input); } else { moment.createFromInputFallback(config); } }
    function makeDate(y, m, d, h, M, s, ms) {
        var date = new Date(y, m, d, h, M, s, ms); if (y < 1970) { date.setFullYear(y); }
        return date;
    }
    function makeUTCDate(y) {
        var date = new Date(Date.UTC.apply(null, arguments)); if (y < 1970) { date.setUTCFullYear(y); }
        return date;
    }
    function parseWeekday(input, locale) {
        if (typeof input === 'string') {
            if (!isNaN(input)) { input = parseInt(input, 10); }
            else { input = locale.weekdaysParse(input); if (typeof input !== 'number') { return null; } }
        }
        return input;
    }
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) { return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture); }
    function relativeTime(posNegDuration, withoutSuffix, locale) { var duration = moment.duration(posNegDuration).abs(), seconds = round(duration.as('s')), minutes = round(duration.as('m')), hours = round(duration.as('h')), days = round(duration.as('d')), months = round(duration.as('M')), years = round(duration.as('y')), args = seconds < relativeTimeThresholds.s && ['s', seconds] || minutes === 1 && ['m'] || minutes < relativeTimeThresholds.m && ['mm', minutes] || hours === 1 && ['h'] || hours < relativeTimeThresholds.h && ['hh', hours] || days === 1 && ['d'] || days < relativeTimeThresholds.d && ['dd', days] || months === 1 && ['M'] || months < relativeTimeThresholds.M && ['MM', months] || years === 1 && ['y'] || ['yy', years]; args[2] = withoutSuffix; args[3] = +posNegDuration > 0; args[4] = locale; return substituteTimeAgo.apply({}, args); }
    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
        var end = firstDayOfWeekOfYear - firstDayOfWeek, daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(), adjustedMoment; if (daysToDayOfWeek > end) { daysToDayOfWeek -= 7; }
        if (daysToDayOfWeek < end - 7) { daysToDayOfWeek += 7; }
        adjustedMoment = moment(mom).add(daysToDayOfWeek, 'd'); return { week: Math.ceil(adjustedMoment.dayOfYear() / 7), year: adjustedMoment.year() };
    }
    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) { var d = makeUTCDate(year, 0, 1).getUTCDay(), daysToAdd, dayOfYear; d = d === 0 ? 7 : d; weekday = weekday != null ? weekday : firstDayOfWeek; daysToAdd = firstDayOfWeek - d + (d > firstDayOfWeekOfYear ? 7 : 0) - (d < firstDayOfWeek ? 7 : 0); dayOfYear = 7 * (week - 1) + (weekday - firstDayOfWeek) + daysToAdd + 1; return { year: dayOfYear > 0 ? year : year - 1, dayOfYear: dayOfYear > 0 ? dayOfYear : daysInYear(year - 1) + dayOfYear }; }
    function makeMoment(config) {
        var input = config._i, format = config._f; config._locale = config._locale || moment.localeData(config._l); if (input === null || (format === undefined && input === '')) { return moment.invalid({ nullInput: true }); }
        if (typeof input === 'string') { config._i = input = config._locale.preparse(input); }
        if (moment.isMoment(input)) { return new Moment(input, true); } else if (format) { if (isArray(format)) { makeDateFromStringAndArray(config); } else { makeDateFromStringAndFormat(config); } } else { makeDateFromInput(config); }
        return new Moment(config);
    }
    moment = function (input, format, locale, strict) {
        var c; if (typeof (locale) === 'boolean') { strict = locale; locale = undefined; }
        c = {}; c._isAMomentObject = true; c._i = input; c._f = format; c._l = locale; c._strict = strict; c._isUTC = false; c._pf = defaultParsingFlags(); return makeMoment(c);
    }; moment.suppressDeprecationWarnings = false; moment.createFromInputFallback = deprecate('moment construction falls back to js Date. This is ' + 'discouraged and will be removed in upcoming major ' + 'release. Please refer to ' + 'https://github.com/moment/moment/issues/1407 for more info.', function (config) { config._d = new Date(config._i); }); function pickBy(fn, moments) {
        var res, i; if (moments.length === 1 && isArray(moments[0])) { moments = moments[0]; }
        if (!moments.length) { return moment(); }
        res = moments[0]; for (i = 1; i < moments.length; ++i) { if (moments[i][fn](res)) { res = moments[i]; } }
        return res;
    }
    moment.min = function () { var args = [].slice.call(arguments, 0); return pickBy('isBefore', args); }; moment.max = function () { var args = [].slice.call(arguments, 0); return pickBy('isAfter', args); }; moment.utc = function (input, format, locale, strict) {
        var c; if (typeof (locale) === 'boolean') { strict = locale; locale = undefined; }
        c = {}; c._isAMomentObject = true; c._useUTC = true; c._isUTC = true; c._l = locale; c._i = input; c._f = format; c._strict = strict; c._pf = defaultParsingFlags(); return makeMoment(c).utc();
    }; moment.unix = function (input) { return moment(input * 1000); }; moment.duration = function (input, key) {
        var duration = input, match = null, sign, ret, parseIso, diffRes; if (moment.isDuration(input)) { duration = { ms: input._milliseconds, d: input._days, M: input._months }; } else if (typeof input === 'number') { duration = {}; if (key) { duration[key] = input; } else { duration.milliseconds = input; } } else if (!!(match = aspNetTimeSpanJsonRegex.exec(input))) { sign = (match[1] === '-') ? -1 : 1; duration = { y: 0, d: toInt(match[DATE]) * sign, h: toInt(match[HOUR]) * sign, m: toInt(match[MINUTE]) * sign, s: toInt(match[SECOND]) * sign, ms: toInt(match[MILLISECOND]) * sign }; } else if (!!(match = isoDurationRegex.exec(input))) { sign = (match[1] === '-') ? -1 : 1; parseIso = function (inp) { var res = inp && parseFloat(inp.replace(',', '.')); return (isNaN(res) ? 0 : res) * sign; }; duration = { y: parseIso(match[2]), M: parseIso(match[3]), d: parseIso(match[4]), h: parseIso(match[5]), m: parseIso(match[6]), s: parseIso(match[7]), w: parseIso(match[8]) }; } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) { diffRes = momentsDifference(moment(duration.from), moment(duration.to)); duration = {}; duration.ms = diffRes.milliseconds; duration.M = diffRes.months; }
        ret = new Duration(duration); if (moment.isDuration(input) && hasOwnProp(input, '_locale')) { ret._locale = input._locale; }
        return ret;
    }; moment.version = VERSION; moment.defaultFormat = isoFormat; moment.ISO_8601 = function () { }; moment.momentProperties = momentProperties; moment.updateOffset = function () { }; moment.relativeTimeThreshold = function (threshold, limit) {
        if (relativeTimeThresholds[threshold] === undefined) { return false; }
        if (limit === undefined) { return relativeTimeThresholds[threshold]; }
        relativeTimeThresholds[threshold] = limit; return true;
    }; moment.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', function (key, value) { return moment.locale(key, value); }); moment.locale = function (key, values) {
        var data; if (key) {
            if (typeof (values) !== 'undefined') { data = moment.defineLocale(key, values); }
            else { data = moment.localeData(key); }
            if (data) { moment.duration._locale = moment._locale = data; }
        }
        return moment._locale._abbr;
    }; moment.defineLocale = function (name, values) {
        if (values !== null) {
            values.abbr = name; if (!locales[name]) { locales[name] = new Locale(); }
            locales[name].set(values); moment.locale(name); return locales[name];
        } else { delete locales[name]; return null; }
    }; moment.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', function (key) { return moment.localeData(key); }); moment.localeData = function (key) {
        var locale; if (key && key._locale && key._locale._abbr) { key = key._locale._abbr; }
        if (!key) { return moment._locale; }
        if (!isArray(key)) {
            locale = loadLocale(key); if (locale) { return locale; }
            key = [key];
        }
        return chooseLocale(key);
    }; moment.isMoment = function (obj) { return obj instanceof Moment || (obj != null && hasOwnProp(obj, '_isAMomentObject')); }; moment.isDuration = function (obj) { return obj instanceof Duration; }; for (i = lists.length - 1; i >= 0; --i) { makeList(lists[i]); }
    moment.normalizeUnits = function (units) { return normalizeUnits(units); }; moment.invalid = function (flags) {
        var m = moment.utc(NaN); if (flags != null) { extend(m._pf, flags); }
        else { m._pf.userInvalidated = true; }
        return m;
    }; moment.parseZone = function () { return moment.apply(null, arguments).parseZone(); }; moment.parseTwoDigitYear = function (input) { return toInt(input) + (toInt(input) > 68 ? 1900 : 2000); }; extend(moment.fn = Moment.prototype, {
        clone: function () { return moment(this); }, valueOf: function () { return +this._d + ((this._offset || 0) * 60000); }, unix: function () { return Math.floor(+this / 1000); }, toString: function () { return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ'); }, toDate: function () { return this._offset ? new Date(+this) : this._d; }, toISOString: function () { var m = moment(this).utc(); if (0 < m.year() && m.year() <= 9999) { return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]'); } else { return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'); } }, toArray: function () { var m = this; return [m.year(), m.month(), m.date(), m.hours(), m.minutes(), m.seconds(), m.milliseconds()]; }, isValid: function () { return isValid(this); }, isDSTShifted: function () {
            if (this._a) { return this.isValid() && compareArrays(this._a, (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray()) > 0; }
            return false;
        }, parsingFlags: function () { return extend({}, this._pf); }, invalidAt: function () { return this._pf.overflow; }, utc: function (keepLocalTime) { return this.zone(0, keepLocalTime); }, local: function (keepLocalTime) {
            if (this._isUTC) { this.zone(0, keepLocalTime); this._isUTC = false; if (keepLocalTime) { this.add(this._dateTzOffset(), 'm'); } }
            return this;
        }, format: function (inputString) { var output = formatMoment(this, inputString || moment.defaultFormat); return this.localeData().postformat(output); }, add: createAdder(1, 'add'), subtract: createAdder(-1, 'subtract'), diff: function (input, units, asFloat) {
            var that = makeAs(input, this), zoneDiff = (this.zone() - that.zone()) * 6e4, diff, output, daysAdjust; units = normalizeUnits(units); if (units === 'year' || units === 'month') {
                diff = (this.daysInMonth() + that.daysInMonth()) * 432e5; output = ((this.year() - that.year()) * 12) + (this.month() - that.month()); daysAdjust = (this - moment(this).startOf('month')) -
                    (that - moment(that).startOf('month')); daysAdjust -= ((this.zone() - moment(this).startOf('month').zone()) -
                        (that.zone() - moment(that).startOf('month').zone())) * 6e4; output += daysAdjust / diff; if (units === 'year') { output = output / 12; }
            } else { diff = (this - that); output = units === 'second' ? diff / 1e3 : units === 'minute' ? diff / 6e4 : units === 'hour' ? diff / 36e5 : units === 'day' ? (diff - zoneDiff) / 864e5 : units === 'week' ? (diff - zoneDiff) / 6048e5 : diff; }
            return asFloat ? output : absRound(output);
        }, from: function (time, withoutSuffix) { return moment.duration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix); }, fromNow: function (withoutSuffix) { return this.from(moment(), withoutSuffix); }, calendar: function (time) { var now = time || moment(), sod = makeAs(now, this).startOf('day'), diff = this.diff(sod, 'days', true), format = diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse'; return this.format(this.localeData().calendar(format, this)); }, isLeapYear: function () { return isLeapYear(this.year()); }, isDST: function () { return (this.zone() < this.clone().month(0).zone() || this.zone() < this.clone().month(5).zone()); }, day: function (input) { var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay(); if (input != null) { input = parseWeekday(input, this.localeData()); return this.add(input - day, 'd'); } else { return day; } }, month: makeAccessor('Month', true), startOf: function (units) {
            units = normalizeUnits(units); switch (units) { case 'year': this.month(0); case 'quarter': case 'month': this.date(1); case 'week': case 'isoWeek': case 'day': this.hours(0); case 'hour': this.minutes(0); case 'minute': this.seconds(0); case 'second': this.milliseconds(0); }
            if (units === 'week') { this.weekday(0); } else if (units === 'isoWeek') { this.isoWeekday(1); }
            if (units === 'quarter') { this.month(Math.floor(this.month() / 3) * 3); }
            return this;
        }, endOf: function (units) { units = normalizeUnits(units); return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms'); }, isAfter: function (input, units) { units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond'); if (units === 'millisecond') { input = moment.isMoment(input) ? input : moment(input); return +this > +input; } else { return +this.clone().startOf(units) > +moment(input).startOf(units); } }, isBefore: function (input, units) { units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond'); if (units === 'millisecond') { input = moment.isMoment(input) ? input : moment(input); return +this < +input; } else { return +this.clone().startOf(units) < +moment(input).startOf(units); } }, isSame: function (input, units) { units = normalizeUnits(units || 'millisecond'); if (units === 'millisecond') { input = moment.isMoment(input) ? input : moment(input); return +this === +input; } else { return +this.clone().startOf(units) === +makeAs(input, this).startOf(units); } }, min: deprecate('moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548', function (other) { other = moment.apply(null, arguments); return other < this ? this : other; }), max: deprecate('moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548', function (other) { other = moment.apply(null, arguments); return other > this ? this : other; }), zone: function (input, keepLocalTime) {
            var offset = this._offset || 0, localAdjust; if (input != null) {
                if (typeof input === 'string') { input = timezoneMinutesFromString(input); }
                if (Math.abs(input) < 16) { input = input * 60; }
                if (!this._isUTC && keepLocalTime) { localAdjust = this._dateTzOffset(); }
                this._offset = input; this._isUTC = true; if (localAdjust != null) { this.subtract(localAdjust, 'm'); }
                if (offset !== input) { if (!keepLocalTime || this._changeInProgress) { addOrSubtractDurationFromMoment(this, moment.duration(offset - input, 'm'), 1, false); } else if (!this._changeInProgress) { this._changeInProgress = true; moment.updateOffset(this, true); this._changeInProgress = null; } }
            } else { return this._isUTC ? offset : this._dateTzOffset(); }
            return this;
        }, zoneAbbr: function () { return this._isUTC ? 'UTC' : ''; }, zoneName: function () { return this._isUTC ? 'Coordinated Universal Time' : ''; }, parseZone: function () {
            if (this._tzm) { this.zone(this._tzm); } else if (typeof this._i === 'string') { this.zone(this._i); }
            return this;
        }, hasAlignedHourOffset: function (input) {
            if (!input) { input = 0; }
            else { input = moment(input).zone(); }
            return (this.zone() - input) % 60 === 0;
        }, daysInMonth: function () { return daysInMonth(this.year(), this.month()); }, dayOfYear: function (input) { var dayOfYear = round((moment(this).startOf('day') - moment(this).startOf('year')) / 864e5) + 1; return input == null ? dayOfYear : this.add((input - dayOfYear), 'd'); }, quarter: function (input) { return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3); }, weekYear: function (input) { var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year; return input == null ? year : this.add((input - year), 'y'); }, isoWeekYear: function (input) { var year = weekOfYear(this, 1, 4).year; return input == null ? year : this.add((input - year), 'y'); }, week: function (input) { var week = this.localeData().week(this); return input == null ? week : this.add((input - week) * 7, 'd'); }, isoWeek: function (input) { var week = weekOfYear(this, 1, 4).week; return input == null ? week : this.add((input - week) * 7, 'd'); }, weekday: function (input) { var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7; return input == null ? weekday : this.add(input - weekday, 'd'); }, isoWeekday: function (input) { return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7); }, isoWeeksInYear: function () { return weeksInYear(this.year(), 1, 4); }, weeksInYear: function () { var weekInfo = this.localeData()._week; return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy); }, get: function (units) { units = normalizeUnits(units); return this[units](); }, set: function (units, value) {
            units = normalizeUnits(units); if (typeof this[units] === 'function') { this[units](value); }
            return this;
        }, locale: function (key) {
            var newLocaleData; if (key === undefined) { return this._locale._abbr; } else {
                newLocaleData = moment.localeData(key); if (newLocaleData != null) { this._locale = newLocaleData; }
                return this;
            }
        }, lang: deprecate('moment().lang() is deprecated. Use moment().localeData() instead.', function (key) { if (key === undefined) { return this.localeData(); } else { return this.locale(key); } }), localeData: function () { return this._locale; }, _dateTzOffset: function () { return Math.round(this._d.getTimezoneOffset() / 15) * 15; }
    }); function rawMonthSetter(mom, value) {
        var dayOfMonth; if (typeof value === 'string') { value = mom.localeData().monthsParse(value); if (typeof value !== 'number') { return mom; } }
        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value)); mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth); return mom;
    }
    function rawGetter(mom, unit) { return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit](); }
    function rawSetter(mom, unit, value) { if (unit === 'Month') { return rawMonthSetter(mom, value); } else { return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value); } }
    function makeAccessor(unit, keepTime) { return function (value) { if (value != null) { rawSetter(this, unit, value); moment.updateOffset(this, keepTime); return this; } else { return rawGetter(this, unit); } }; }
    moment.fn.millisecond = moment.fn.milliseconds = makeAccessor('Milliseconds', false); moment.fn.second = moment.fn.seconds = makeAccessor('Seconds', false); moment.fn.minute = moment.fn.minutes = makeAccessor('Minutes', false); moment.fn.hour = moment.fn.hours = makeAccessor('Hours', true); moment.fn.date = makeAccessor('Date', true); moment.fn.dates = deprecate('dates accessor is deprecated. Use date instead.', makeAccessor('Date', true)); moment.fn.year = makeAccessor('FullYear', true); moment.fn.years = deprecate('years accessor is deprecated. Use year instead.', makeAccessor('FullYear', true)); moment.fn.days = moment.fn.day; moment.fn.months = moment.fn.month; moment.fn.weeks = moment.fn.week; moment.fn.isoWeeks = moment.fn.isoWeek; moment.fn.quarters = moment.fn.quarter; moment.fn.toJSON = moment.fn.toISOString; function daysToYears(days) { return days * 400 / 146097; }
    function yearsToDays(years) { return years * 146097 / 400; }
    extend(moment.duration.fn = Duration.prototype, {
        _bubble: function () { var milliseconds = this._milliseconds, days = this._days, months = this._months, data = this._data, seconds, minutes, hours, years = 0; data.milliseconds = milliseconds % 1000; seconds = absRound(milliseconds / 1000); data.seconds = seconds % 60; minutes = absRound(seconds / 60); data.minutes = minutes % 60; hours = absRound(minutes / 60); data.hours = hours % 24; days += absRound(hours / 24); years = absRound(daysToYears(days)); days -= absRound(yearsToDays(years)); months += absRound(days / 30); days %= 30; years += absRound(months / 12); months %= 12; data.days = days; data.months = months; data.years = years; }, abs: function () { this._milliseconds = Math.abs(this._milliseconds); this._days = Math.abs(this._days); this._months = Math.abs(this._months); this._data.milliseconds = Math.abs(this._data.milliseconds); this._data.seconds = Math.abs(this._data.seconds); this._data.minutes = Math.abs(this._data.minutes); this._data.hours = Math.abs(this._data.hours); this._data.months = Math.abs(this._data.months); this._data.years = Math.abs(this._data.years); return this; }, weeks: function () { return absRound(this.days() / 7); }, valueOf: function () {
            return this._milliseconds +
                this._days * 864e5 +
                (this._months % 12) * 2592e6 +
                toInt(this._months / 12) * 31536e6;
        }, humanize: function (withSuffix) {
            var output = relativeTime(this, !withSuffix, this.localeData()); if (withSuffix) { output = this.localeData().pastFuture(+this, output); }
            return this.localeData().postformat(output);
        }, add: function (input, val) { var dur = moment.duration(input, val); this._milliseconds += dur._milliseconds; this._days += dur._days; this._months += dur._months; this._bubble(); return this; }, subtract: function (input, val) { var dur = moment.duration(input, val); this._milliseconds -= dur._milliseconds; this._days -= dur._days; this._months -= dur._months; this._bubble(); return this; }, get: function (units) { units = normalizeUnits(units); return this[units.toLowerCase() + 's'](); }, as: function (units) { var days, months; units = normalizeUnits(units); if (units === 'month' || units === 'year') { days = this._days + this._milliseconds / 864e5; months = this._months + daysToYears(days) * 12; return units === 'month' ? months : months / 12; } else { days = this._days + yearsToDays(this._months / 12); switch (units) { case 'week': return days / 7 + this._milliseconds / 6048e5; case 'day': return days + this._milliseconds / 864e5; case 'hour': return days * 24 + this._milliseconds / 36e5; case 'minute': return days * 24 * 60 + this._milliseconds / 6e4; case 'second': return days * 24 * 60 * 60 + this._milliseconds / 1000; case 'millisecond': return Math.floor(days * 24 * 60 * 60 * 1000) + this._milliseconds; default: throw new Error('Unknown unit ' + units); } } }, lang: moment.fn.lang, locale: moment.fn.locale, toIsoString: deprecate('toIsoString() is deprecated. Please use toISOString() instead ' + '(notice the capitals)', function () { return this.toISOString(); }), toISOString: function () {
            var years = Math.abs(this.years()), months = Math.abs(this.months()), days = Math.abs(this.days()), hours = Math.abs(this.hours()), minutes = Math.abs(this.minutes()), seconds = Math.abs(this.seconds() + this.milliseconds() / 1000); if (!this.asSeconds()) { return 'P0D'; }
            return (this.asSeconds() < 0 ? '-' : '') + 'P' +
                (years ? years + 'Y' : '') +
                (months ? months + 'M' : '') +
                (days ? days + 'D' : '') +
                ((hours || minutes || seconds) ? 'T' : '') +
                (hours ? hours + 'H' : '') +
                (minutes ? minutes + 'M' : '') +
                (seconds ? seconds + 'S' : '');
        }, localeData: function () { return this._locale; }
    }); moment.duration.fn.toString = moment.duration.fn.toISOString; function makeDurationGetter(name) { moment.duration.fn[name] = function () { return this._data[name]; }; }
    for (i in unitMillisecondFactors) { if (hasOwnProp(unitMillisecondFactors, i)) { makeDurationGetter(i.toLowerCase()); } }
    moment.duration.fn.asMilliseconds = function () { return this.as('ms'); }; moment.duration.fn.asSeconds = function () { return this.as('s'); }; moment.duration.fn.asMinutes = function () { return this.as('m'); }; moment.duration.fn.asHours = function () { return this.as('h'); }; moment.duration.fn.asDays = function () { return this.as('d'); }; moment.duration.fn.asWeeks = function () { return this.as('weeks'); }; moment.duration.fn.asMonths = function () { return this.as('M'); }; moment.duration.fn.asYears = function () { return this.as('y'); }; moment.locale('en', { ordinal: function (number) { var b = number % 10, output = (toInt(number % 100 / 10) === 1) ? 'th' : (b === 1) ? 'st' : (b === 2) ? 'nd' : (b === 3) ? 'rd' : 'th'; return number + output; } }); function makeGlobal(shouldDeprecate) {
        if (typeof ender !== 'undefined') { return; }
        oldGlobalMoment = globalScope.moment; if (shouldDeprecate) { globalScope.moment = deprecate('Accessing Moment through the global scope is ' + 'deprecated, and will be removed in an upcoming ' + 'release.', moment); } else { globalScope.moment = moment; }
    }
    if (hasModule) { module.exports = moment; } else if (typeof define === 'function' && define.amd) {
        define('moment', function (require, exports, module) {
            if (module.config && module.config() && module.config().noGlobal === true) { globalScope.moment = oldGlobalMoment; }
            return moment;
        }); makeGlobal(true);
    } else { makeGlobal(); }
}).call(this);; !function (a, b) { "use strict"; if ("function" == typeof define && define.amd) define(["jquery", "moment"], b); else if ("object" == typeof exports) b(require("jquery"), require("moment")); else { if (!jQuery) throw new Error("bootstrap-datetimepicker requires jQuery to be loaded first"); if (!moment) throw new Error("bootstrap-datetimepicker requires moment.js to be loaded first"); b(a.jQuery, moment) } }(this, function (a, b) { "use strict"; if ("undefined" == typeof b) throw new Error("momentjs is required"); var c = 0, d = function (d, e) { var f, g = a.fn.datetimepicker.defaults, h = { time: "glyphicon glyphicon-time", date: "glyphicon glyphicon-calendar", up: "glyphicon glyphicon-chevron-up", down: "glyphicon glyphicon-chevron-down" }, i = this, j = !1, k = function () { var f, j, k = !1; if (i.options = a.extend({}, g, e), i.options.icons = a.extend({}, h, i.options.icons), i.element = a(d), m(), !i.options.pickTime && !i.options.pickDate) throw new Error("Must choose at least one picker"); if (i.id = c++, b.locale(i.options.language), i.date = b(), i.unset = !1, i.isInput = i.element.is("input"), i.component = !1, i.element.hasClass("input-group") && (i.component = i.element.find(0 === i.element.find(".datepickerbutton").size() ? '[class^="input-group-"]' : ".datepickerbutton")), i.format = i.options.format, f = b().localeData(), i.format || (i.format = i.options.pickDate ? f.longDateFormat("L") : "", i.options.pickDate && i.options.pickTime && (i.format += " "), i.format += i.options.pickTime ? f.longDateFormat("LT") : "", i.options.useSeconds && (-1 !== f.longDateFormat("LT").indexOf(" A") ? i.format = i.format.split(" A")[0] + ":ss A" : i.format += ":ss")), i.use24hours = i.format.toLowerCase().indexOf("a") < 0 && i.format.indexOf("h") < 0, i.component && (k = i.component.find("span")), i.options.pickTime && k && k.addClass(i.options.icons.time), i.options.pickDate && k && (k.removeClass(i.options.icons.time), k.addClass(i.options.icons.date)), i.options.widgetParent = "string" == typeof i.options.widgetParent && i.options.widgetParent || i.element.parents().filter(function () { return "scroll" === a(this).css("overflow-y") }).get(0) || "body", i.widget = a(Q()).appendTo(i.options.widgetParent), i.minViewMode = i.options.minViewMode || 0, "string" == typeof i.minViewMode) switch (i.minViewMode) { case "months": i.minViewMode = 1; break; case "years": i.minViewMode = 2; break; default: i.minViewMode = 0 }if (i.viewMode = i.options.viewMode || 0, "string" == typeof i.viewMode) switch (i.viewMode) { case "months": i.viewMode = 1; break; case "years": i.viewMode = 2; break; default: i.viewMode = 0 }i.viewMode = Math.max(i.viewMode, i.minViewMode), i.options.disabledDates = O(i.options.disabledDates), i.options.enabledDates = O(i.options.enabledDates), i.startViewMode = i.viewMode, i.setMinDate(i.options.minDate), i.setMaxDate(i.options.maxDate), r(), s(), u(), v(), w(), q(), E(), l().prop("disabled") || F(), "" !== i.options.defaultDate && "" === l().val() && i.setValue(i.options.defaultDate), 1 !== i.options.minuteStepping && (j = i.options.minuteStepping, i.date.minutes(Math.round(i.date.minutes() / j) * j % 60).seconds(0)) }, l = function () { var a; if (i.isInput) return i.element; if (a = i.element.find(".datepickerinput"), 0 === a.size()) a = i.element.find("input"); else if (!a.is("input")) throw new Error('CSS class "datepickerinput" cannot be applied to non input element'); return a }, m = function () { var a; a = i.element.is("input") ? i.element.data() : i.element.find("input").data(), void 0 !== a.dateFormat && (i.options.format = a.dateFormat), void 0 !== a.datePickdate && (i.options.pickDate = a.datePickdate), void 0 !== a.datePicktime && (i.options.pickTime = a.datePicktime), void 0 !== a.dateUseminutes && (i.options.useMinutes = a.dateUseminutes), void 0 !== a.dateUseseconds && (i.options.useSeconds = a.dateUseseconds), void 0 !== a.dateUsecurrent && (i.options.useCurrent = a.dateUsecurrent), void 0 !== a.calendarWeeks && (i.options.calendarWeeks = a.calendarWeeks), void 0 !== a.dateMinutestepping && (i.options.minuteStepping = a.dateMinutestepping), void 0 !== a.dateMindate && (i.options.minDate = a.dateMindate), void 0 !== a.dateMaxdate && (i.options.maxDate = a.dateMaxdate), void 0 !== a.dateShowtoday && (i.options.showToday = a.dateShowtoday), void 0 !== a.dateCollapse && (i.options.collapse = a.dateCollapse), void 0 !== a.dateLanguage && (i.options.language = a.dateLanguage), void 0 !== a.dateDefaultdate && (i.options.defaultDate = a.dateDefaultdate), void 0 !== a.dateDisableddates && (i.options.disabledDates = a.dateDisableddates), void 0 !== a.dateEnableddates && (i.options.enabledDates = a.dateEnableddates), void 0 !== a.dateIcons && (i.options.icons = a.dateIcons), void 0 !== a.dateUsestrict && (i.options.useStrict = a.dateUsestrict), void 0 !== a.dateDirection && (i.options.direction = a.dateDirection), void 0 !== a.dateSidebyside && (i.options.sideBySide = a.dateSidebyside), void 0 !== a.dateDaysofweekdisabled && (i.options.daysOfWeekDisabled = a.dateDaysofweekdisabled) }, n = function () { var b, c = "absolute", d = i.component ? i.component.offset() : i.element.offset(), e = a(window); i.width = i.component ? i.component.outerWidth() : i.element.outerWidth(), d.top = d.top + i.element.outerHeight(), "up" === i.options.direction ? b = "top" : "bottom" === i.options.direction ? b = "bottom" : "auto" === i.options.direction && (b = d.top + i.widget.height() > e.height() + e.scrollTop() && i.widget.height() + i.element.outerHeight() < d.top ? "top" : "bottom"), "top" === b ? (d.bottom = e.height() - d.top + i.element.outerHeight() + 3, i.widget.addClass("top").removeClass("bottom")) : (d.top += 1, i.widget.addClass("bottom").removeClass("top")), void 0 !== i.options.width && i.widget.width(i.options.width), "left" === i.options.orientation && (i.widget.addClass("left-oriented"), d.left = d.left - i.widget.width() + 20), J() && (c = "fixed", d.top -= e.scrollTop(), d.left -= e.scrollLeft()), e.width() < d.left + i.widget.outerWidth() ? (d.right = e.width() - d.left - i.width, d.left = "auto", i.widget.addClass("pull-right")) : (d.right = "auto", i.widget.removeClass("pull-right")), i.widget.css("top" === b ? { position: c, bottom: d.bottom, top: "auto", left: d.left, right: d.right } : { position: c, top: d.top, bottom: "auto", left: d.left, right: d.right }) }, o = function (a, c) { (!b(i.date).isSame(b(a)) || j) && (j = !1, i.element.trigger({ type: "dp.change", date: b(i.date), oldDate: b(a) }), "change" !== c && i.element.change()) }, p = function (a) { j = !0, i.element.trigger({ type: "dp.error", date: b(a, i.format, i.options.useStrict) }) }, q = function (a) { b.locale(i.options.language); var c = a; c || (c = l().val(), c && (i.date = b(c, i.format, i.options.useStrict)), i.date || (i.date = b())), i.viewDate = b(i.date).startOf("month"), t(), x() }, r = function () { b.locale(i.options.language); var c, d = a("<tr>"), e = b.weekdaysMin(); if (i.options.calendarWeeks === !0 && d.append('<th class="cw">#</th>'), 0 === b().localeData()._week.dow) for (c = 0; 7 > c; c++)d.append('<th class="dow">' + e[c] + "</th>"); else for (c = 1; 8 > c; c++)d.append(7 === c ? '<th class="dow">' + e[0] + "</th>" : '<th class="dow">' + e[c] + "</th>"); i.widget.find(".datepicker-days thead").append(d) }, s = function () { b.locale(i.options.language); var a, c = "", d = b.monthsShort(); for (a = 0; 12 > a; a++)c += '<span class="month">' + d[a] + "</span>"; i.widget.find(".datepicker-months td").append(c) }, t = function () { if (i.options.pickDate) { b.locale(i.options.language); var c, d, e, f, g, h, j, k, l, m = i.viewDate.year(), n = i.viewDate.month(), o = i.options.minDate.year(), p = i.options.minDate.month(), q = i.options.maxDate.year(), r = i.options.maxDate.month(), s = [], t = b.months(); for (i.widget.find(".datepicker-days").find(".disabled").removeClass("disabled"), i.widget.find(".datepicker-months").find(".disabled").removeClass("disabled"), i.widget.find(".datepicker-years").find(".disabled").removeClass("disabled"), i.widget.find(".datepicker-days th:eq(1)").text(t[n] + " " + m), d = b(i.viewDate, i.format, i.options.useStrict).subtract(1, "months"), j = d.daysInMonth(), d.date(j).startOf("week"), (m === o && p >= n || o > m) && i.widget.find(".datepicker-days th:eq(0)").addClass("disabled"), (m === q && n >= r || m > q) && i.widget.find(".datepicker-days th:eq(2)").addClass("disabled"), e = b(d).add(42, "d"); d.isBefore(e);) { if (d.weekday() === b().startOf("week").weekday() && (f = a("<tr>"), s.push(f), i.options.calendarWeeks === !0 && f.append('<td class="cw">' + d.week() + "</td>")), g = "", d.year() < m || d.year() === m && d.month() < n ? g += " old" : (d.year() > m || d.year() === m && d.month() > n) && (g += " new"), d.isSame(b({ y: i.date.year(), M: i.date.month(), d: i.date.date() })) && (g += " active"), (M(d, "day") || !N(d)) && (g += " disabled"), i.options.showToday === !0 && d.isSame(b(), "day") && (g += " today"), i.options.daysOfWeekDisabled) for (h = 0; h < i.options.daysOfWeekDisabled.length; h++)if (d.day() === i.options.daysOfWeekDisabled[h]) { g += " disabled"; break } f.append('<td class="day' + g + '">' + d.date() + "</td>"), c = d.date(), d.add(1, "d"), c === d.date() && d.add(1, "d") } for (i.widget.find(".datepicker-days tbody").empty().append(s), l = i.date.year(), t = i.widget.find(".datepicker-months").find("th:eq(1)").text(m).end().find("span").removeClass("active"), l === m && t.eq(i.date.month()).addClass("active"), o > m - 1 && i.widget.find(".datepicker-months th:eq(0)").addClass("disabled"), m + 1 > q && i.widget.find(".datepicker-months th:eq(2)").addClass("disabled"), h = 0; 12 > h; h++)m === o && p > h || o > m ? a(t[h]).addClass("disabled") : (m === q && h > r || m > q) && a(t[h]).addClass("disabled"); for (s = "", m = 10 * parseInt(m / 10, 10), k = i.widget.find(".datepicker-years").find("th:eq(1)").text(m + "-" + (m + 9)).parents("table").find("td"), i.widget.find(".datepicker-years").find("th").removeClass("disabled"), o > m && i.widget.find(".datepicker-years").find("th:eq(0)").addClass("disabled"), m + 9 > q && i.widget.find(".datepicker-years").find("th:eq(2)").addClass("disabled"), m -= 1, h = -1; 11 > h; h++)s += '<span class="year' + (-1 === h || 10 === h ? " old" : "") + (l === m ? " active" : "") + (o > m || m > q ? " disabled" : "") + '">' + m + "</span>", m += 1; k.html(s) } }, u = function () { b.locale(i.options.language); var a, c, d, e = i.widget.find(".timepicker .timepicker-hours table"), f = ""; if (e.parent().hide(), i.use24hours) for (a = 0, c = 0; 6 > c; c += 1) { for (f += "<tr>", d = 0; 4 > d; d += 1)f += '<td class="hour">' + P(a.toString()) + "</td>", a++; f += "</tr>" } else for (a = 1, c = 0; 3 > c; c += 1) { for (f += "<tr>", d = 0; 4 > d; d += 1)f += '<td class="hour">' + P(a.toString()) + "</td>", a++; f += "</tr>" } e.html(f) }, v = function () { var a, b, c = i.widget.find(".timepicker .timepicker-minutes table"), d = "", e = 0, f = i.options.minuteStepping; for (c.parent().hide(), 1 === f && (f = 5), a = 0; a < Math.ceil(60 / f / 4); a++) { for (d += "<tr>", b = 0; 4 > b; b += 1)60 > e ? (d += '<td class="minute">' + P(e.toString()) + "</td>", e += f) : d += "<td></td>"; d += "</tr>" } c.html(d) }, w = function () { var a, b, c = i.widget.find(".timepicker .timepicker-seconds table"), d = "", e = 0; for (c.parent().hide(), a = 0; 3 > a; a++) { for (d += "<tr>", b = 0; 4 > b; b += 1)d += '<td class="second">' + P(e.toString()) + "</td>", e += 5; d += "</tr>" } c.html(d) }, x = function () { if (i.date) { var a = i.widget.find(".timepicker span[data-time-component]"), b = i.date.hours(), c = i.date.format("A"); i.use24hours || (0 === b ? b = 12 : 12 !== b && (b %= 12), i.widget.find(".timepicker [data-action=togglePeriod]").text(c)), a.filter("[data-time-component=hours]").text(P(b)), a.filter("[data-time-component=minutes]").text(P(i.date.minutes())), a.filter("[data-time-component=seconds]").text(P(i.date.second())) } }, y = function (c) { c.stopPropagation(), c.preventDefault(), i.unset = !1; var d, e, f, g, h = a(c.target).closest("span, td, th"), j = b(i.date); if (1 === h.length && !h.is(".disabled")) switch (h[0].nodeName.toLowerCase()) { case "th": switch (h[0].className) { case "picker-switch": E(1); break; case "prev": case "next": f = R.modes[i.viewMode].navStep, "prev" === h[0].className && (f = -1 * f), i.viewDate.add(f, R.modes[i.viewMode].navFnc), t() }break; case "span": h.is(".month") ? (d = h.parent().find("span").index(h), i.viewDate.month(d)) : (e = parseInt(h.text(), 10) || 0, i.viewDate.year(e)), i.viewMode === i.minViewMode && (i.date = b({ y: i.viewDate.year(), M: i.viewDate.month(), d: i.viewDate.date(), h: i.date.hours(), m: i.date.minutes(), s: i.date.seconds() }), K(), o(j, c.type)), E(-1), t(); break; case "td": h.is(".day") && (g = parseInt(h.text(), 10) || 1, d = i.viewDate.month(), e = i.viewDate.year(), h.is(".old") ? 0 === d ? (d = 11, e -= 1) : d -= 1 : h.is(".new") && (11 === d ? (d = 0, e += 1) : d += 1), i.date = b({ y: e, M: d, d: g, h: i.date.hours(), m: i.date.minutes(), s: i.date.seconds() }), i.viewDate = b({ y: e, M: d, d: Math.min(28, g) }), t(), K(), o(j, c.type)) } }, z = { incrementHours: function () { L("add", "hours", 1) }, incrementMinutes: function () { L("add", "minutes", i.options.minuteStepping) }, incrementSeconds: function () { L("add", "seconds", 1) }, decrementHours: function () { L("subtract", "hours", 1) }, decrementMinutes: function () { L("subtract", "minutes", i.options.minuteStepping) }, decrementSeconds: function () { L("subtract", "seconds", 1) }, togglePeriod: function () { var a = i.date.hours(); a >= 12 ? a -= 12 : a += 12, i.date.hours(a) }, showPicker: function () { i.widget.find(".timepicker > div:not(.timepicker-picker)").hide(), i.widget.find(".timepicker .timepicker-picker").show() }, showHours: function () { i.widget.find(".timepicker .timepicker-picker").hide(), i.widget.find(".timepicker .timepicker-hours").show() }, showMinutes: function () { i.widget.find(".timepicker .timepicker-picker").hide(), i.widget.find(".timepicker .timepicker-minutes").show() }, showSeconds: function () { i.widget.find(".timepicker .timepicker-picker").hide(), i.widget.find(".timepicker .timepicker-seconds").show() }, selectHour: function (b) { var c = parseInt(a(b.target).text(), 10); i.use24hours || (i.date.hours() >= 12 ? 12 !== c && (c += 12) : 12 === c && (c = 0)), i.date.hours(c), z.showPicker.call(i) }, selectMinute: function (b) { i.date.minutes(parseInt(a(b.target).text(), 10)), z.showPicker.call(i) }, selectSecond: function (b) { i.date.seconds(parseInt(a(b.target).text(), 10)), z.showPicker.call(i) } }, A = function (c) { var d = b(i.date), e = a(c.currentTarget).data("action"), f = z[e].apply(i, arguments); return B(c), i.date || (i.date = b({ y: 1970 })), K(), x(), o(d, c.type), f }, B = function (a) { a.stopPropagation(), a.preventDefault() }, C = function (a) { 27 === a.keyCode && i.hide() }, D = function (c) { b.locale(i.options.language); var d = a(c.target), e = b(i.date), f = b(d.val(), i.format, i.options.useStrict); f.isValid() && !M(f) && N(f) ? (q(), i.setValue(f), o(e, c.type), K()) : (i.viewDate = e, i.unset = !0, o(e, c.type), p(f)) }, E = function (a) { a && (i.viewMode = Math.max(i.minViewMode, Math.min(2, i.viewMode + a))), i.widget.find(".datepicker > div").hide().filter(".datepicker-" + R.modes[i.viewMode].clsName).show() }, F = function () { var b, c, d, e, f; i.widget.on("click", ".datepicker *", a.proxy(y, this)), i.widget.on("click", "[data-action]", a.proxy(A, this)), i.widget.on("mousedown", a.proxy(B, this)), i.element.on("keydown", a.proxy(C, this)), i.options.pickDate && i.options.pickTime && i.widget.on("click.togglePicker", ".accordion-toggle", function (g) { if (g.stopPropagation(), b = a(this), c = b.closest("ul"), d = c.find(".in"), e = c.find(".collapse:not(.in)"), d && d.length) { if (f = d.data("collapse"), f && f.transitioning) return; d.collapse("hide"), e.collapse("show"), b.find("span").toggleClass(i.options.icons.time + " " + i.options.icons.date), i.component && i.component.find("span").toggleClass(i.options.icons.time + " " + i.options.icons.date) } }), i.isInput ? i.element.on({ click: a.proxy(i.show, this), focus: a.proxy(i.show, this), change: a.proxy(D, this), blur: a.proxy(i.hide, this) }) : (i.element.on({ change: a.proxy(D, this) }, "input"), i.component ? (i.component.on("click", a.proxy(i.show, this)), i.component.on("mousedown", a.proxy(B, this))) : i.element.on("click", a.proxy(i.show, this))) }, G = function () { a(window).on("resize.datetimepicker" + i.id, a.proxy(n, this)), i.isInput || a(document).on("mousedown.datetimepicker" + i.id, a.proxy(i.hide, this)) }, H = function () { i.widget.off("click", ".datepicker *", i.click), i.widget.off("click", "[data-action]"), i.widget.off("mousedown", i.stopEvent), i.options.pickDate && i.options.pickTime && i.widget.off("click.togglePicker"), i.isInput ? i.element.off({ focus: i.show, change: D, click: i.show, blur: i.hide }) : (i.element.off({ change: D }, "input"), i.component ? (i.component.off("click", i.show), i.component.off("mousedown", i.stopEvent)) : i.element.off("click", i.show)) }, I = function () { a(window).off("resize.datetimepicker" + i.id), i.isInput || a(document).off("mousedown.datetimepicker" + i.id) }, J = function () { if (i.element) { var b, c = i.element.parents(), d = !1; for (b = 0; b < c.length; b++)if ("fixed" === a(c[b]).css("position")) { d = !0; break } return d } return !1 }, K = function () { b.locale(i.options.language); var a = ""; i.unset || (a = b(i.date).format(i.format)), l().val(a), i.element.data("date", a), i.options.pickTime || i.hide() }, L = function (a, c, d) { b.locale(i.options.language); var e; return "add" === a ? (e = b(i.date), 23 === e.hours() && e.add(d, c), e.add(d, c)) : e = b(i.date).subtract(d, c), M(b(e.subtract(d, c))) || M(e) ? void p(e.format(i.format)) : ("add" === a ? i.date.add(d, c) : i.date.subtract(d, c), void (i.unset = !1)) }, M = function (a, c) { b.locale(i.options.language); var d = b(i.options.maxDate, i.format, i.options.useStrict), e = b(i.options.minDate, i.format, i.options.useStrict); return c && (d = d.endOf(c), e = e.startOf(c)), a.isAfter(d) || a.isBefore(e) ? !0 : i.options.disabledDates === !1 ? !1 : i.options.disabledDates[a.format("YYYY-MM-DD")] === !0 }, N = function (a) { return b.locale(i.options.language), i.options.enabledDates === !1 ? !0 : i.options.enabledDates[a.format("YYYY-MM-DD")] === !0 }, O = function (a) { var c, d = {}, e = 0; for (c = 0; c < a.length; c++)f = b.isMoment(a[c]) || a[c] instanceof Date ? b(a[c]) : b(a[c], i.format, i.options.useStrict), f.isValid() && (d[f.format("YYYY-MM-DD")] = !0, e++); return e > 0 ? d : !1 }, P = function (a) { return a = a.toString(), a.length >= 2 ? a : "0" + a }, Q = function () { var a = '<thead><tr><th class="prev">&lsaquo;</th><th colspan="' + (i.options.calendarWeeks ? "6" : "5") + '" class="picker-switch"></th><th class="next">&rsaquo;</th></tr></thead>', b = '<tbody><tr><td colspan="' + (i.options.calendarWeeks ? "8" : "7") + '"></td></tr></tbody>', c = '<div class="datepicker-days"><table class="table-condensed">' + a + '<tbody></tbody></table></div><div class="datepicker-months"><table class="table-condensed">' + a + b + '</table></div><div class="datepicker-years"><table class="table-condensed">' + a + b + "</table></div>", d = ""; return i.options.pickDate && i.options.pickTime ? (d = '<div class="bootstrap-datetimepicker-widget' + (i.options.sideBySide ? " timepicker-sbs" : "") + (i.use24hours ? " usetwentyfour" : "") + ' dropdown-menu" style="z-index:9999 !important;">', d += i.options.sideBySide ? '<div class="row"><div class="col-sm-6 datepicker">' + c + '</div><div class="col-sm-6 timepicker">' + S.getTemplate() + "</div></div>" : '<ul class="list-unstyled"><li' + (i.options.collapse ? ' class="collapse in"' : "") + '><div class="datepicker">' + c + '</div></li><li class="picker-switch accordion-toggle"><a class="btn" style="width:100%"><span class="' + i.options.icons.time + '"></span></a></li><li' + (i.options.collapse ? ' class="collapse"' : "") + '><div class="timepicker">' + S.getTemplate() + "</div></li></ul>", d += "</div>") : i.options.pickTime ? '<div class="bootstrap-datetimepicker-widget dropdown-menu"><div class="timepicker">' + S.getTemplate() + "</div></div>" : '<div class="bootstrap-datetimepicker-widget dropdown-menu"><div class="datepicker">' + c + "</div></div>" }, R = { modes: [{ clsName: "days", navFnc: "month", navStep: 1 }, { clsName: "months", navFnc: "year", navStep: 1 }, { clsName: "years", navFnc: "year", navStep: 10 }] }, S = { hourTemplate: '<span data-action="showHours"   data-time-component="hours"   class="timepicker-hour"></span>', minuteTemplate: '<span data-action="showMinutes" data-time-component="minutes" class="timepicker-minute"></span>', secondTemplate: '<span data-action="showSeconds"  data-time-component="seconds" class="timepicker-second"></span>' }; S.getTemplate = function () { return '<div class="timepicker-picker"><table class="table-condensed"><tr><td><a href="#" class="btn" data-action="incrementHours"><span class="' + i.options.icons.up + '"></span></a></td><td class="separator"></td><td>' + (i.options.useMinutes ? '<a href="#" class="btn" data-action="incrementMinutes"><span class="' + i.options.icons.up + '"></span></a>' : "") + "</td>" + (i.options.useSeconds ? '<td class="separator"></td><td><a href="#" class="btn" data-action="incrementSeconds"><span class="' + i.options.icons.up + '"></span></a></td>' : "") + (i.use24hours ? "" : '<td class="separator"></td>') + "</tr><tr><td>" + S.hourTemplate + '</td> <td class="separator">:</td><td>' + (i.options.useMinutes ? S.minuteTemplate : '<span class="timepicker-minute">00</span>') + "</td> " + (i.options.useSeconds ? '<td class="separator">:</td><td>' + S.secondTemplate + "</td>" : "") + (i.use24hours ? "" : '<td class="separator"></td><td><button type="button" class="btn btn-primary" data-action="togglePeriod"></button></td>') + '</tr><tr><td><a href="#" class="btn" data-action="decrementHours"><span class="' + i.options.icons.down + '"></span></a></td><td class="separator"></td><td>' + (i.options.useMinutes ? '<a href="#" class="btn" data-action="decrementMinutes"><span class="' + i.options.icons.down + '"></span></a>' : "") + "</td>" + (i.options.useSeconds ? '<td class="separator"></td><td><a href="#" class="btn" data-action="decrementSeconds"><span class="' + i.options.icons.down + '"></span></a></td>' : "") + (i.use24hours ? "" : '<td class="separator"></td>') + '</tr></table></div><div class="timepicker-hours" data-action="selectHour"><table class="table-condensed"></table></div><div class="timepicker-minutes" data-action="selectMinute"><table class="table-condensed"></table></div>' + (i.options.useSeconds ? '<div class="timepicker-seconds" data-action="selectSecond"><table class="table-condensed"></table></div>' : "") }, i.destroy = function () { H(), I(), i.widget.remove(), i.element.removeData("DateTimePicker"), i.component && i.component.removeData("DateTimePicker") }, i.show = function (a) { if (!l().prop("disabled")) { if (i.options.useCurrent && "" === l().val()) { if (1 !== i.options.minuteStepping) { var c = b(), d = i.options.minuteStepping; c.minutes(Math.round(c.minutes() / d) * d % 60).seconds(0), i.setValue(c.format(i.format)) } else i.setValue(b().format(i.format)); o("", a.type) } a && "click" === a.type && i.isInput && i.widget.hasClass("picker-open") || (i.widget.hasClass("picker-open") ? (i.widget.hide(), i.widget.removeClass("picker-open")) : (i.widget.show(), i.widget.addClass("picker-open")), i.height = i.component ? i.component.outerHeight() : i.element.outerHeight(), n(), i.element.trigger({ type: "dp.show", date: b(i.date) }), G(), a && B(a)) } }, i.disable = function () { var a = l(); a.prop("disabled") || (a.prop("disabled", !0), H()) }, i.enable = function () { var a = l(); a.prop("disabled") && (a.prop("disabled", !1), F()) }, i.hide = function () { var a, c, d = i.widget.find(".collapse"); for (a = 0; a < d.length; a++)if (c = d.eq(a).data("collapse"), c && c.transitioning) return; i.widget.hide(), i.widget.removeClass("picker-open"), i.viewMode = i.startViewMode, E(), i.element.trigger({ type: "dp.hide", date: b(i.date) }), I() }, i.setValue = function (a) { b.locale(i.options.language), a ? i.unset = !1 : (i.unset = !0, K()), a = b.isMoment(a) ? a.locale(i.options.language) : a instanceof Date ? b(a) : b(a, i.format, i.options.useStrict), a.isValid() ? (i.date = a, K(), i.viewDate = b({ y: i.date.year(), M: i.date.month() }), t(), x()) : p(a) }, i.getDate = function () { return i.unset ? null : b(i.date) }, i.setDate = function (a) { var c = b(i.date); i.setValue(a ? a : null), o(c, "function") }, i.setDisabledDates = function (a) { i.options.disabledDates = O(a), i.viewDate && q() }, i.setEnabledDates = function (a) { i.options.enabledDates = O(a), i.viewDate && q() }, i.setMaxDate = function (a) { void 0 !== a && (i.options.maxDate = b.isMoment(a) || a instanceof Date ? b(a) : b(a, i.format, i.options.useStrict), i.viewDate && q()) }, i.setMinDate = function (a) { void 0 !== a && (i.options.minDate = b.isMoment(a) || a instanceof Date ? b(a) : b(a, i.format, i.options.useStrict), i.viewDate && q()) }, k() }; a.fn.datetimepicker = function (b) { return this.each(function () { var c = a(this), e = c.data("DateTimePicker"); e || c.data("DateTimePicker", new d(this, b)) }) }, a.fn.datetimepicker.defaults = { format: !1, pickDate: !0, pickTime: !0, useMinutes: !0, useSeconds: !1, useCurrent: !0, calendarWeeks: !1, minuteStepping: 1, minDate: b({ y: 1900 }), maxDate: b().add(100, "y"), showToday: !0, collapse: !0, language: b.locale(), defaultDate: "", disabledDates: !1, enabledDates: !1, icons: {}, useStrict: !1, direction: "auto", sideBySide: !1, daysOfWeekDisabled: [], widgetParent: !1 } });; $(document).ready(function () { if ($('.ns-smv .pagination li.active').next('li').length > 0) { $('.pagination').before('<div id="showmore" style="padding-bottom: 15px;"><div id="ajaxloading"></div><a onclick="showmore()">' + text_showmore + '</a></div>'); } }); var loading30 = '<img src="catalog/view/editproduct/image/loading30.gif" />'; function ajaxloading(action) { if (action) { $('#ajaxloading').html(loading30); $('#ajaxloading').show(); } else { $('#ajaxloading').html(''); $('#ajaxloading').hide(); } }
function showmore() {
    var $next = $('.ns-smv .pagination li.active').next('li'); ajaxloading(true); if ($next.length == 0) { return; }
    $.get($next.find('a').attr('href'), function (data) {
        $data = $(data); var $container = $('.row-price'); var $products = $data.find('.row-price > div'); var $product_img = $products.find('a > img'); var $product_div_height = $products.find('.product-thumb .option.productpage-opt'); setTimeout(function () { max_height_div($product_div_height); }, 350); $product_img.each(function () {
            if ($(this).attr('data-status')) { var status = $(this).attr('data-status'); $(this).after('<div class="product_status">' + status + '</div>'); }
            if ($(this).attr('data-additional-hover')) { var img_src = $(this).attr('data-additional-hover'); $(this).addClass('main-img'); $(this).after('<img src="' + img_src + '" class="additional-img-hover img-responsive" title="' + $(this).attr('alt') + '" />'); }
        }); if (localStorage.getItem('display') == 'grid') {
            cols = $('#column-right, #column-left').length; $('#content .row-price > .clearfix').remove(); if (cols == 2) { $products.attr('class', 'product-layout product-grid col-lg-6 col-md-6 col-sm-12 col-xs-12'); } else if (cols == 1) { $products.attr('class', 'product-layout product-grid col-lg-4 col-md-4 col-sm-6 col-xs-12'); } else { $products.attr('class', 'product-layout product-grid col-lg-3 col-md-3 col-sm-6 col-xs-12'); }
            $container.append($products); if (cols == 2) { $('#content .product-layout:nth-child(2n+2)').after('<div class="clearfix visible-md visible-sm"></div>'); } else if (cols == 1) { $('#content .product-layout:nth-child(3n+3)').after('<div class="clearfix visible-lg"></div>'); } else { $('#content .product-layout:nth-child(4n+4)').after('<div class="clearfix"></div>'); }
        }
        if (localStorage.getItem('display') == 'grid4') {
            cols = $('#column-right, #column-left').length; $('#content .row-price > .clearfix').remove(); if (cols == 2) { $products.attr('class', 'product-layout product-grid grid4 col-lg-6 col-md-6 col-sm-12 col-xs-12'); } else if (cols == 1) { $products.attr('class', 'product-layout product-grid grid4 col-1 col-lg-3 col-md-4 col-sm-6 col-xs-12'); } else { $products.attr('class', 'product-layout product-grid grid4 col-lg-1-5 col-md-3 col-sm-6 col-xs-12'); }
            $container.append($products); if (cols == 2) { $('#content .product-layout:nth-child(2n+2)').after('<div class="clearfix visible-md visible-sm"></div>'); } else if (cols == 1) { $('#content .product-layout:nth-child(4n+4)').after('<div class="clearfix"></div>'); } else { $('#content .product-layout:nth-child(5n+5)').after('<div class="clearfix"></div>'); }
        }
        if (localStorage.getItem('display') == 'list') { $('#content .row-price > .clearfix').remove(); $products.attr('class', 'product-layout product-list col-xs-12'); $('#content .row-price').css('margin-left', '-15px').css('margin-right', '-15px'); $container.append($products); }
        if (localStorage.getItem('display') == 'price') { $('#content .row-price > .clearfix').remove(); $('#content .row-price').css('margin-left', '0').css('margin-right', '0'); $products.attr('class', 'product-layout product-price col-xs-12'); $container.append($products); }
        ajaxloading(false); $('#ajaxloading').html(''); $('#ajaxloading').hide(); $('.col-sm-12.text-right').html($data.find('.col-sm-12.text-right')); $('.pagination').html($data.find('.pagination > *')); if ($('.ns-smv .pagination li.active').next('li').length == 0) { $('#showmore').hide(); }
        setTimeout(function () {
            if (localStorage.getItem('display') != 'price') {
                $(".image-carousel-category").each(function () {
                    var items = $(this); for (var i = 0; i < items.length; i++) {
                        if ($(items).data('owlCarousel')) { $(items).data('owlCarousel').destroy(); }
                        $(".additional-image").removeClass('hidden'); $(items).owlCarousel({ navigation: true, pagination: false, navigationText: ['<div class="btn btn-carousel-image-additional list next-prod"><i class="fa fa-angle-left arrow"></i></div>', '<div class="btn btn-carousel-image-additional prev-prod"><i class="fa fa-angle-right arrow"></i></div>'], singleItem: true, transitionStyle: 'fade' });
                    }
                });
            }
        }, 200); $data.filter('script').each(function () {
            if ((this.text || this.textContent || this.innerHTML).indexOf("document.write") >= 0) { return; }
            $.globalEval(this.text || this.textContent || this.innerHTML || '');
        }); if (typeof doFilter != 'function') { setTimeout('loadEditorplus()', 1500); }
    }, "html"); return false;
}; function popupFormReviewStore() { $.magnificPopup.open({ tLoading: loading_masked_img, items: { src: 'index.php?route=product/reviews_store/popupFormReviewStore', type: 'ajax' }, }); }
function viewport() {
    var e = window, a = 'inner'; if (!('innerWidth' in window)) { a = 'client'; e = document.documentElement || document.body; }
    return { width: e[a + 'Width'], height: e[a + 'Height'] };
}
function quickview_open(id, all_prod) { $('body').prepend('<div id="messageLoadPage"></div><div class="mfp-bg-quickview"></div>'); $.ajax({ type: 'post', data: 'quickview29=1&all_prod=' + all_prod, url: 'index.php?route=product/product&product_id=' + id, beforeSend: function () { creatOverlayLoadPage(true); }, complete: function () { $('.mfp-bg-quickview').hide(); $('#messageLoadPage').hide(); creatOverlayLoadPage(false); }, success: function (data) { $('.mfp-bg-quickview').hide(); $data = $(data); var new_data = $data.find('#quickview-container').html(); $.magnificPopup.open({ tLoading: loading_masked_img, items: { src: new_data, }, type: 'inline' }); } }); }
function getNextPrevProduct(id, all_prod) { $.ajax({ type: 'post', data: 'quickview29=1&all_prod=' + all_prod, url: 'index.php?route=product/product&product_id=' + id, beforeSend: function () { $('#popup-quickview').append('<span class="loading_quick_order"><img src="catalog/view/theme/newstore/image/check-ajax-ns.gif" ></span>'); }, success: function (data) { $data = $(data); var new_data = $data.find('#quickview-container').html(); var magnificPopup = $.magnificPopup.instance; magnificPopup.items[0].type = "inline"; magnificPopup.items[0].src = new_data; magnificPopup.updateItemHTML(); } }); }
$(document).ready(function () {
    $("#back-top").hide(); $(function () { $(window).scroll(function () { if ($(this).scrollTop() > 150) { $('#back-top').fadeIn(); } else { $('#back-top').fadeOut(); } }); $('#back-top a').click(function () { $('body,html').animate({ scrollTop: 0 }, 400); return false; }); }); $('.nsmenu-type-manufacturer a[data-toggle="tooltip"]').tooltip({ animated: 'fade', placement: 'top', template: '<div class="tooltip tooltip-manufacturer" role="tooltip"><div class="arrow"></div><div class="tooltip-inner tooltip-manufacturer-inner"></div></div>', html: true }); $('#menu #menu-list').menuAim({ activateCallback: activateSubmenu, deactivateCallback: deactivateSubmenu, }); function activateSubmenu(row) { if ($(row).hasClass('dropdown')) { $(row).addClass('menu-open'); } }
    function deactivateSubmenu(row) { $(row).removeClass('menu-open'); }
    function exitMenu(row) { return true; }
    $('.dropdown-menu-simple .nsmenu-haschild').menuAim({ activateCallback: activateSubmenu2level, deactivateCallback: deactivateSubmenu2level, }); function activateSubmenu2level(row) { if ($(row).hasClass('nsmenu-issubchild')) { $(row).addClass('menu-open-2level'); } }
    function deactivateSubmenu2level(row) { $(row).removeClass('menu-open-2level'); }
    function exitMenu2level(row) { return true; }
    $('.dropdown-menu-simple .nsmenu-ischild-simple').menuAim({ activateCallback: activateSubmenu4level, deactivateCallback: deactivateSubmenu4level, }); function activateSubmenu4level(row) { $(row).addClass('menu-open-4level'); }
    function deactivateSubmenu4level(row) { $(row).removeClass('menu-open-4level'); }
    function exitMenu4level(row) { return true; }
    $(".ns-dd").hover(function () { $(this).parent().find('.parent-link').toggleClass('hover'); }); $(".child-box").hover(function () { $(this).parent().find('.with-child').toggleClass('hover'); }); $(".nsmenu-ischild.nsmenu-ischild-simple").hover(function () { $(this).parent().find('> a').toggleClass('hover'); }); $(".child_4level_simple").hover(function () { $(this).parent().find('> a').toggleClass('hover'); }); $('#menu #menu-list .toggle-child').on('click', function (e) { e.stopPropagation(); $(this).toggleClass('open'); $(this).next().next().slideToggle(0); }); $('#additional-menu li.dropdown').hover(function () { $(this).find('.dropdown-menu').stop(true, true).delay(10); $(this).addClass('open'); $(this).find('.dropdown-toggle').attr('aria-expanded', 'true'); }, function () { $(this).find('.dropdown-menu').stop(true, true).delay(10); $(this).removeClass('open'); $(this).find('.dropdown-toggle').attr('aria-expanded', 'false') });
}); function getURLVar(key) {
    var value = []; var query = String(document.location).split('?'); if (query[1]) {
        var part = query[1].split('&'); for (i = 0; i < part.length; i++) { var data = part[i].split('='); if (data[0] && data[1]) { value[data[0]] = data[1]; } }
        if (value[key]) { return value[key]; } else { return ''; }
    }
}
$(document).ready(function () {
    $(document).on("click.bs.dropdown.data-api", "#cart", function (e) { e.stopPropagation() }); setTimeout(function () { heightblockauto(); }, 100); $(window).resize(function () { setTimeout(function () { heightblockauto(); }, 150); }); $('#phone .contact-header').hover(function () { $(this).find('.drop-contacts').stop(true, true).delay(10).fadeIn(10); $(this).addClass('open'); }, function () { $(this).find('.drop-contacts').stop(true, true).delay(10).fadeOut(10); $(this).removeClass('open'); }); $(document).on('click', '#phone .drop-icon-info', function () { $(this).parent().parent().toggleClass('open'); }); $('.text-danger').each(function () { var element = $(this).parent().parent(); if (element.hasClass('form-group')) { element.addClass('has-error'); } }); $('#currency .currency-select').on('click', function (e) { e.preventDefault(); $('#currency input[name=\'code\']').attr('value', $(this).attr('name')); $('#currency').submit(); }); $('#language a').on('click', function (e) { e.preventDefault(); $('#language input[name=\'code\']').attr('value', $(this).attr('href')); $('#language').submit(); }); $('.btn-search').on('click', function () {
        url = $('base').attr('href') + 'index.php?route=product/search'; var value = $('header input[name=\'search\']').val(); if (value) { url += '&search=' + encodeURIComponent(value); } else { url += '&search='; }
        var category_id = $('input[name=\'category_id\']').prop('value'); if (category_id > 0) { url += '&category_id=' + encodeURIComponent(category_id) + '&sub_category=true'; }
        location = url;
    }); $('#search_word a').on('click', function () { $(this).parent().prev().find('.form-control.input-lg').val($(this).text()); $(this).parent().prev().find('button.btn.btn-search').trigger('click'); }); $('#search input[name=\'search\']').on('keydown', function (e) { if (e.keyCode == 13) { $('header input[name=\'search\']').parent().find('button.btn.btn-search').trigger('click'); } }); $('#menu-ocp .dropdown-menu').each(function () { var menu = $('#menu-ocp').offset(); var dropdown = $(this).parent().offset(); var i = (dropdown.left + $(this).outerWidth()) - (menu.left + $('#menu-ocp').outerWidth()); if (i > 0) { $(this).css('margin-left', '-' + (i + 5) + 'px'); } }); nsmenu_menu(); additional_menu(); $(window).resize(function () { setTimeout(function () { nsmenu_menu(); additional_menu(); }, 300); }); $("#additional-menu a.dropdown-toggle").bind("click", function () {
        if (($(this).attr('href') != "javascript:void(0);") && ($(document).width() > 767)) { window.document.location = $(this).attr('href'); }
    }); $("#menu a.dropdown-toggle").bind("click", function () {
        if (($(this).attr('href') != "javascript:void(0);") && ($(document).width() > 767)) { window.document.location = $(this).attr('href'); }
    }); function additional_menu() {
        $(".nsmenu-bigblock-additional").css('width', $("#additional-menu").outerWidth() - 2); $('#additional-menu .dropdown-menu').each(function () {
            var menu = $('#additional-menu').offset(); var dropdown = $(this).parent().offset(); var i = (dropdown.left + $(this).outerWidth()) - (menu.left + $('#additional-menu').outerWidth()); if (i > 0) { $(this).css('margin-left', '-' + (i + 1) + 'px'); }
            var l = $(this).outerWidth() - 2; $(this).find(".nsmenu-ischild-simple").css('left', l);
        });
    }
    function nsmenu_menu() {
        $(".nsmenu-bigblock").css('width', $("#horizontal-menu .navbar-collapse").outerWidth() - 2); $('#horizontal-menu .dropdown-menu').each(function () {
            var menu = $('#horizontal-menu .navbar-collapse').offset(); var dropdown = $(this).parent().offset(); var i = (dropdown.left + $(this).outerWidth()) - (menu.left + $('#horizontal-menu .navbar-collapse').outerWidth()); if (i > 0) { $(this).css('margin-left', '-' + (i + 1) + 'px'); }
            var l = $(this).outerWidth() - 2; $(this).find(".nsmenu-ischild-simple").css('left', l);
        });
    }
    $('#list-view').click(function () { $('.product-thumb .option').removeAttr('style'); $('#content .product-layout > .clearfix').remove(); $('#content .row > .product-layout').attr('class', 'product-layout product-list col-xs-12'); $('#content .row-price').css('margin-left', '-10px').css('margin-right', '-10px'); $('#list-view').addClass('active'); $('#grid-view').removeClass('active'); $('#grid-view4').removeClass('active'); $('#price-view').removeClass('active'); localStorage.setItem('display', 'list'); $(this).addClass('btn-danger'); $('#grid-view,#grid-view4, #price-view').removeClass('btn-danger'); }); $('#grid-view').click(function () {
        $('#content .product-layout > .clearfix').remove(); $('#content .row-price > .clearfix').remove(); cols = $('#column-right, #column-left').length; if (cols == 2) { $('#content .product-layout').attr('class', 'product-layout product-grid col-lg-6 col-md-6 col-sm-12 col-xs-12'); } else if (cols == 1) { $('#content .product-layout').attr('class', 'product-layout product-grid col-lg-4 col-md-4 col-sm-6 col-xs-12'); } else { $('#content .product-layout').attr('class', 'product-layout product-grid col-lg-3 col-md-3 col-sm-6 col-xs-12'); }
        if (cols == 2) { $('#content .product-layout:nth-child(2n+2)').after('<div class="clearfix visible-md visible-sm"></div>'); } else if (cols == 1) { $('#content .product-layout:nth-child(3n+3)').after('<div class="clearfix visible-lg"></div>'); } else { $('#content .product-layout:nth-child(4n+4)').after('<div class="clearfix"></div>'); }
        $('#content .row-price').css('margin-left', '-10px').css('margin-right', '-10px'); $('#grid-view').addClass('active'); $('#grid-view4').removeClass('active'); $('#list-view').removeClass('active'); $('#price-view').removeClass('active'); localStorage.setItem('display', 'grid'); $(this).addClass('btn-danger'); $('#grid-view4, #list-view, #price-view').removeClass('btn-danger'); max_height_div('.product-grid .product-thumb .option.productpage-opt');
    }); $('#grid-view4').click(function () {
        $('#content .product-layout > .clearfix').remove(); $('#content .row-price > .clearfix').remove(); cols = $('#column-right, #column-left').length; if (cols == 2) { $('#content .product-layout').attr('class', 'product-layout product-grid grid4 col-1 col-lg-6 col-md-6 col-sm-12 col-xs-12'); } else if (cols == 1) { $('#content .product-layout').attr('class', 'product-layout product-grid grid4 col-1 col-lg-3 col-md-4 col-sm-6 col-xs-12'); } else { $('#content .product-layout').attr('class', 'product-layout product-grid grid4 col-lg-1-5 col-md-3 col-sm-6 col-xs-12'); }
        if (cols == 2) { $('#content .product-layout:nth-child(2n+2)').after('<div class="clearfix visible-md visible-sm"></div>'); } else if (cols == 1) { $('#content .product-layout:nth-child(4n+4)').after('<div class="clearfix"></div>'); } else { $('#content .product-layout:nth-child(5n+5)').after('<div class="clearfix"></div>'); }
        $('#content .row-price').css('margin-left', '-10px').css('margin-right', '-10px'); $('#grid-view4').addClass('active'); $('#grid-view').removeClass('active'); $('#list-view').removeClass('active'); $('#price-view').removeClass('active'); localStorage.setItem('display', 'grid4'); $(this).addClass('btn-danger'); $('#grid-view, #list-view, #price-view').removeClass('btn-danger'); max_height_div('.product-grid .product-thumb .option.productpage-opt');
    }); $('#price-view').click(function () { $('#content .product-layout > .clearfix').remove(); $('#content .row-price > .clearfix').remove(); $('#content .row-price').css('margin-left', '0').css('margin-right', '0'); $('#content .product-layout').attr('class', 'product-layout product-price col-xs-12'); localStorage.setItem('display', 'price'); $('#price-view').addClass('active'); $('#list-view').removeClass('active'); $('#grid-view').removeClass('active'); $('#grid-view4').removeClass('active'); $(this).addClass('btn-danger'); $('#list-view, #grid-view, #grid-view4').removeClass('btn-danger'); }); if (localStorage.getItem('display') == 'list') { $('.product-thumb .option').removeAttr('style'); $('#list-view').trigger('click'); $('#list-view').addClass('active'); $('#grid-view').removeClass('active'); $('#grid-view4').removeClass('active'); $('#price-view').removeClass('active'); } else if (localStorage.getItem('display') == 'grid') { $('#grid-view').trigger('click'); $('#grid-view').addClass('active'); $('#grid-view4').removeClass('active'); $('#list-view').removeClass('active'); $('#price-view').removeClass('active'); } else if (localStorage.getItem('display') == 'grid4') { $('#grid-view4').trigger('click'); $('#grid-view4').addClass('active'); $('#grid-view').removeClass('active'); $('#list-view').removeClass('active'); $('#price-view').removeClass('active'); } else if (localStorage.getItem('display') == 'price') { $('#price-view').trigger('click'); $("#price-view .additional-image").addClass('hidden'); $('#price-view').addClass('active'); $('#list-view').removeClass('active'); $('#grid-view').removeClass('active'); $('#grid-view4').removeClass('active'); } else { $('#grid-view').trigger('click'); $('#grid-view').addClass('active'); $('#grid-view4').removeClass('active'); $('#list-view').removeClass('active'); $('#price-view').removeClass('active'); }
    $('[data-toggle=\'tooltip\']').tooltip({ container: 'body' }); setTimeout(function () {
        $('a > img').each(function () {
            if ($(this).attr('data-status')) { var status = $(this).attr('data-status'); $(this).after('<div class="product_status">' + status + '</div>'); }
            if ($(document).width() > 767) { if ($(this).attr('data-additional-hover')) { var img_src = $(this).attr('data-additional-hover'); $(this).addClass('main-img'); $(this).after('<img src="' + img_src + '" class="additional-img-hover img-responsive" title="' + $(this).attr('alt') + '" />'); } }
        });
    }, 3000); $(document).ajaxStop(function () { $('[data-toggle=\'tooltip\']').tooltip({ container: 'body' }); });
}); function heightblockauto() { max_height_div('.product-thumb .option.featured-opt'); max_height_div('.product-thumb .option.latest-opt'); max_height_div('.product-thumb .option.latest-gv-opt'); max_height_div('.product-thumb .option.bestseller-opt'); max_height_div('.product-thumb .option.special-opt'); max_height_div('.product-thumb .option.productany-opt'); max_height_div('.product-thumb .option.productviewed-opt'); max_height_div('.product-thumb .option.tablatest-opt'); max_height_div('.product-thumb .option.tabspecial-opt'); max_height_div('.product-thumb .option.tabfeatured-opt'); max_height_div('.product-thumb .option.tabbestseller-opt'); max_height_div('.product-thumb .option.tabpopular-opt'); max_height_div('.product-grid .product-thumb .option.productpage-opt'); }
function max_height_div(div) { var maxheight = 0; $(div).each(function () { $(this).removeAttr('style'); if ($(this).height() > maxheight) { maxheight = $(this).height(); } }); $(div).height(maxheight); }
function recalc(product_id, minval, price, special, mod) {
    var quantity = $(mod + ' .htopcat' + product_id).val(); quantity = quantity.replace(/[^\d,]/g, ''); if (quantity == '') quantity = minval; if (quantity == '0') quantity = minval; var options_price = 0; $('#option_' + product_id + ' option:selected, #option_' + product_id + ' input:checked').each(function () {
        if ($(this).attr('price_prefix') == '+') { options_price = options_price + Number($(this).attr('data-price')); }
        if ($(this).attr('price_prefix') == '-') { options_price = options_price - Number($(this).attr('data-price')); }
    }); var price_no_format = parseFloat(price); var new_price = (price_no_format + options_price) * quantity; var start_price = parseFloat($(mod + ' .price_no_format_' + product_id).html().replace(/\s*/g, '')); var price = new_price; $({ val: start_price }).animate({ val: price }, { duration: 400, step: function (val) { $(mod + ' .price_no_format_' + product_id).html(price_format(val)); } }); if (special) { var special_no_format = parseFloat(special); var new_special = (special_no_format + options_price) * quantity; var start_price = parseFloat($(mod + ' .special_no_format_' + product_id).html().replace(/\s*/g, '')); var price = new_special; $({ val: start_price }).animate({ val: price }, { duration: 400, step: function (val) { $(mod + ' .special_no_format_' + product_id).html(price_format(val)); } }); }
}
var cart = {
    'add': function (product_id, mod_page_name, quantity) {
        if (mod_page_name === undefined) { if ($('#option_' + product_id).length != 0) { var options = $('#option_' + product_id + ' input[type=\'radio\']:checked, #option_' + product_id + ' input[type=\'checkbox\']:checked, #option_' + product_id + ' select'); var data = options.serialize() + '&product_id=' + product_id + '&quantity=' + (typeof (quantity) != 'undefined' ? quantity : 1); } else { var data = 'product_id=' + product_id + '&quantity=' + (typeof (quantity) != 'undefined' ? quantity : 1); } } else { if ($('#option_' + mod_page_name + '_' + product_id).length != 0) { var options = $('#option_' + mod_page_name + '_' + product_id + ' input[type=\'radio\']:checked, #option_' + mod_page_name + '_' + product_id + ' input[type=\'checkbox\']:checked,#option_' + mod_page_name + '_' + product_id + ' select'); var data = options.serialize() + '&product_id=' + product_id + '&quantity=' + (typeof (quantity) != 'undefined' ? quantity : 1); } else { var data = 'product_id=' + product_id + '&quantity=' + (typeof (quantity) != 'undefined' ? quantity : 1); } }
        $.ajax({
            url: 'index.php?route=checkout/cart/add', type: 'post', data: data, dataType: 'json', success: function (json) {
                $('.option-danger, .alert, .text-danger').remove(); if (json['redirect'] && !options) { location = json['redirect']; } else { }
                if (json['error']) {
                    if (json['error']['option']) {
                        for (i in json['error']['option']) {
                            if (mod_page_name === undefined || mod_page_name === null) { var element = $('#input-option' + i.replace('_', '-')); } else { var element = $('#input-option-' + mod_page_name + i.replace('_', '-')); }
                            if (element.parent().hasClass('input-group')) { element.parent().after('<div class="text-danger">' + json['error']['option'][i] + '</div>'); } else { element.after('<div class="text-danger">' + json['error']['option'][i] + '</div>'); }
                            setTimeout(function () { $('.option-danger, .alert, .text-danger').remove(); }, 4000); $('#top').before('<div class="alert option-danger"><i class="fa fa-exclamation-circle"></i> ' + json['error']['option'][i] + '<button type="button" class="close" data-dismiss="alert">&times;</button></div>');
                        }
                    }
                }
                if (json['success']) {
                    if (json['popup_design'] == '1') { fastorder_open_cart(); } else if (json['popup_design'] == '0') {
                        html = '<div id="modal-addcart" class="modal">'; html += '  <div class="modal-dialog" style="overflow:hidden">'; html += '    <div class="modal-content">'; if (json['show_newstorecheckout'] == '1') { html += '       <div class="modal-body"><div class="text-center">' + json['success'] + '<br><img style="margin:10px 0px;" src="' + json['image_cart'] + '"  /><br></div><div><a href=' + link_newstorecheckout + ' class="btn-checkout">' + button_checkout + '</a><button data-dismiss="modal" class="btn-shopping">' + button_shopping + '</button></div></div>'; } else { html += '       <div class="modal-body"><div class="text-center">' + json['success'] + '<br><img style="margin:10px 0px;" src="' + json['image_cart'] + '"  /><br></div><div><a href=' + link_checkout + ' class="btn-checkout">' + button_checkout + '</a><button data-dismiss="modal" class="btn-shopping">' + button_shopping + '</button></div></div>'; }
                        html += '    </div>'; html += '  </div>'; html += '</div>'; $('body').append(html); $('#modal-addcart').modal('show');
                    } else { $('#top').before('<div class="alert alert-info add_product_alert">' + json['success'] + '<button type="button" class="close" data-dismiss="alert">&times;</button></div>'); }
                    setTimeout(function () { $('.option-danger, .alert, .text-danger').remove(); }, 4000); setTimeout(function () { $('.cart-total').html(json['total']); }, 100); $('#cart > ul').load('index1e1c.html?route=common/cart/info%20ul%20li');
                }
                $('#modal-addcart').on('hide.bs.modal', function (e) { $('#modal-addcart').remove(); });
            }
        });
    }, 'update': function (key, quantity) { $.ajax({ url: 'index.php?route=checkout/cart/edit', type: 'post', data: 'key=' + key + '&quantity=' + (typeof (quantity) != 'undefined' ? quantity : 1), dataType: 'json', beforeSend: function () { $('#cart > button').button('loading'); }, complete: function () { $('#cart > button').button('reset'); }, success: function (json) { setTimeout(function () { $('.cart-total').html(json['total']); }, 100); if (getURLVar('route') == 'checkout/cart' || getURLVar('route') == 'checkout/checkout' || location.pathname == '/cart/' || location.pathname == 'checkout/index.html') { location = 'cart/index.html?route=checkout/cart'; } else { $('#cart > ul').load('index1e1c.html?route=common/cart/info%20ul%20li'); } } }); }, 'remove': function (key) { $.ajax({ url: 'index.php?route=checkout/cart/remove', type: 'post', data: 'key=' + key, dataType: 'json', beforeSend: function () { $('#cart > button').button('loading'); }, complete: function () { $('#cart > button').button('reset'); }, success: function (json) { setTimeout(function () { $('.cart-total').html(json['total']); }, 100); if (getURLVar('route') == 'checkout/cart' || getURLVar('route') == 'checkout/checkout' || location.pathname == '/cart/' || location.pathname == 'checkout/index.html') { location = 'cart/index.html?route=checkout/cart'; } else if (getURLVar('route') == 'checkout/newstorecheckout') { update_checkout(); } else { $('#cart > ul').load('index1e1c.html?route=common/cart/info%20ul%20li'); } } }); }
}
var voucher = { 'add': function () { }, 'remove': function (key) { $.ajax({ url: 'index.php?route=checkout/cart/remove', type: 'post', data: 'key=' + key, dataType: 'json', beforeSend: function () { $('#cart > button').button('loading'); }, complete: function () { $('#cart > button').button('reset'); }, success: function (json) { setTimeout(function () { $('.cart-total').html(json['total']); }, 100); if (getURLVar('route') == 'checkout/cart' || getURLVar('route') == 'checkout/checkout' || location.pathname == '/cart/' || location.pathname == 'checkout/index.html') { location = 'cart/index.html?route=checkout/cart'; } else { $('#cart > ul').load('index1e1c.html?route=common/cart/info%20ul%20li'); } } }); } }
var wishlist = {
    'add': function (product_id) {
        $('#modal-wishlist').remove(); $.ajax({
            url: 'index.php?route=account/wishlist/add', type: 'post', data: 'product_id=' + product_id, dataType: 'json', success: function (json) {
                $.magnificPopup.close(); html = '<div id="modal-wishlist" class="modal fade">'; html += '  <div class="modal-dialog">'; html += '    <div class="modal-content">'; if (json['success']) { html += '      <div class="modal-body alert-success"><i class="fa fa-check-circle"></i> ' + json['success'] + '<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button></div>'; }
                if (json['info']) { html += '      <div class="modal-body alert-info"><i class="fa fa-info-circle"></i> ' + json['info'] + '<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button></div>'; }
                html += '    </div>'; html += '  </div>'; html += '</div>'; $('body').append(html); $('#modal-wishlist').modal('show'); $('#wishlist-total > .wishlist-quantity').html(json['total']);
            }
        });
    }, 'remove': function () { }
}
var compare = { 'add': function (product_id) { $('#modal-compare').remove(); $.ajax({ url: 'index.php?route=product/compare/add', type: 'post', data: 'product_id=' + product_id, dataType: 'json', success: function (json) { $.magnificPopup.close(); html = '<div id="modal-compare" class="modal fade">'; html += '  <div class="modal-dialog">'; html += '    <div class="modal-content">'; html += '      <div class="modal-body alert-success"><i class="fa fa-check-circle"></i> ' + json['success'] + '<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button></div>'; html += '    </div>'; html += '  </div>'; html += '</div>'; $('body').append(html); $('#modal-compare').modal('show'); $('#compare-total > .compare-quantity').html(json['total']); } }); }, 'remove': function () { } }
$(document).delegate('.agree', 'click', function (e) { e.preventDefault(); $('#modal-agree').remove(); var element = this; $.ajax({ url: $(element).attr('href'), type: 'get', dataType: 'html', success: function (data) { html = '<div id="modal-agree" class="modal">'; html += '  <div class="modal-dialog">'; html += '    <div class="modal-content">'; html += '      <div class="modal-header">'; html += '        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>'; html += '        <h4 class="modal-title">' + $(element).text() + '</h4>'; html += '      </div>'; html += '      <div class="modal-body">' + data + '</div>'; html += '    </div>'; html += '  </div>'; html += '</div>'; $('body').append(html); $('#modal-agree').modal('show'); } }); }); (function ($) {
    $.fn.autocomplete = function (option) {
        return this.each(function () {
            this.timer = null; this.items = new Array(); $.extend(this, option); $(this).attr('autocomplete', 'off'); $(this).on('focus', function () { this.request(); }); $(this).on('blur', function () { setTimeout(function (object) { object.hide(); }, 200, this); }); $(this).on('keydown', function (event) { switch (event.keyCode) { case 27: this.hide(); break; default: this.request(); break; } }); this.click = function (event) { event.preventDefault(); value = $(event.target).parent().attr('data-value'); if (value && this.items[value]) { this.select(this.items[value]); } }
            this.show = function () { var pos = $(this).position(); $(this).siblings('ul.dropdown-menu').css({ top: pos.top + $(this).outerHeight(), left: pos.left }); $(this).siblings('ul.dropdown-menu').show(); }
            this.hide = function () { $(this).siblings('ul.dropdown-menu').hide(); }
            this.request = function () { clearTimeout(this.timer); this.timer = setTimeout(function (object) { object.source($(object).val(), $.proxy(object.response, object)); }, 200, this); }
            this.response = function (json) {
                html = ''; if (json.length) {
                    for (i = 0; i < json.length; i++) { this.items[json[i]['value']] = json[i]; }
                    for (i = 0; i < json.length; i++) { if (!json[i]['category']) { html += '<li data-value="' + json[i]['value'] + '"><a href="#">' + json[i]['label'] + '</a></li>'; } }
                    var category = new Array(); for (i = 0; i < json.length; i++) {
                        if (json[i]['category']) {
                            if (!category[json[i]['category']]) { category[json[i]['category']] = new Array(); category[json[i]['category']]['name'] = json[i]['category']; category[json[i]['category']]['item'] = new Array(); }
                            category[json[i]['category']]['item'].push(json[i]);
                        }
                    }
                    for (i in category) { html += '<li class="dropdown-header">' + category[i]['name'] + '</li>'; for (j = 0; j < category[i]['item'].length; j++) { html += '<li data-value="' + category[i]['item'][j]['value'] + '"><a href="#">&nbsp;&nbsp;&nbsp;' + category[i]['item'][j]['label'] + '</a></li>'; } }
                }
                if (html) { this.show(); } else { this.hide(); }
                $(this).siblings('ul.dropdown-menu').html(html);
            }
            $(this).after('<ul class="dropdown-menu"></ul>'); $(this).siblings('ul.dropdown-menu').delegate('a', 'click', $.proxy(this.click, this));
        });
    }
})(window.jQuery); (function ($) {
    $.fn.autocompleteSerach = function (option) {
        return this.each(function () {
            this.timer = null; this.items = new Array(); $.extend(this, option); $(this).attr('autocompleteSerach', 'off'); $(this).on('focus', function () { this.request(); }); $(this).on('blur', function () { setTimeout(function (object) { object.hide(); }, 200, this); }); $(this).on('keydown', function (event) { switch (event.keyCode) { case 27: this.hide(); break; default: this.request(); break; } }); this.click = function (event) { event.preventDefault(); value = $(event.target).parent().attr('data-value'); if (value && this.items[value]) { this.select(this.items[value]); } }
            this.show = function () { var pos = $(this).position(); $(this).siblings('ul.dropdown-menu').css({ top: pos.top + $(this).outerHeight(), left: pos.left }); $(this).siblings('ul.dropdown-menu').show(); }
            this.hide = function () { $(this).siblings('ul.dropdown-menu').hide(); }
            this.request = function () { clearTimeout(this.timer); this.timer = setTimeout(function (object) { object.source($(object).val(), $.proxy(object.response, object)); }, 200, this); }
            this.response = function (json) {
                html = ''; if (json.length) {
                    for (i = 0; i < json.length; i++) { this.items[json[i]['value']] = json[i]; }
                    for (i = 0; i < json.length; i++) { if (!json[i]['category']) { html += '<li data-value="' + json[i]['value'] + '"><a href="#">' + json[i]['label'] + '</a></li>'; } }
                    var category = new Array(); for (i = 0; i < json.length; i++) {
                        if (json[i]['category']) {
                            if (!category[json[i]['category']]) { category[json[i]['category']] = new Array(); category[json[i]['category']]['name'] = json[i]['category']; category[json[i]['category']]['item'] = new Array(); }
                            category[json[i]['category']]['item'].push(json[i]);
                        }
                    }
                    for (i in category) { html += '<li class="dropdown-header">' + category[i]['name'] + '</li>'; for (j = 0; j < category[i]['item'].length; j++) { html += '<li data-value="' + category[i]['item'][j]['value'] + '"><a href="#">&nbsp;&nbsp;&nbsp;' + category[i]['item'][j]['label'] + '</a></li>'; } }
                }
                if (html) { this.show(); } else { this.hide(); }
                $(this).siblings('ul.dropdown-menu').html(html);
            }
            $(this).after('<ul class="dropdown-menu autosearch"></ul>'); $(this).siblings('ul.dropdown-menu autosearch').delegate('a', 'click', $.proxy(this.click, this));
        });
    }
})(window.jQuery); function banner_link_open(link) { $('body').prepend('<div id="messageLoadPage"></div>'); creatOverlayLoadPage(true); $('body').append('<div class="popup_banner"></div>'); $('.popup_banner').popup({ transition: 'all 0.3s', closetransitionend: function () { $(this).remove(); } }); $('.popup_banner').load(link + ' #content', function () { creatOverlayLoadPage(false); $('.popup_banner').append('<i class="fa fa-times close" onclick="$(\'.popup_banner\').popup(\'hide\');"></i>'); $('.popup_banner').popup('show'); }); }
$(document).ready(function () { var sideslider = $('[data-toggle=collapse-side]'); var sel = sideslider.attr('data-target'); sideslider.click(function (event) { $(sel).toggleClass('in'); }); }); function validate_quantity(input, minval) { input.value = input.value.replace(/[^\d]/g, ''); if (input.value == '') input.value = minval; if (input.value == '0') input.value = minval; }
function recalc_quantity(product_id, minval, price, special, mod, mod_page_name) {
    var quantity = $(mod + ' .quantity_plus_minus .input-number-quantity' + product_id).val(); if (isNaN(quantity)) { quantity = '1'; }
    quantity = quantity.replace(/[^\d]/g, ''); if (quantity == '') quantity = minval; if (quantity == '0') quantity = minval; var main_price = parseFloat(price); if (special != '') { var special_price = parseFloat(special); } else { var special_price = false; }
    special_coefficient = parseFloat(price) / parseFloat(special); var options_price = 0; $('#option_' + mod_page_name + '_' + product_id + ' option:selected,#option_' + mod_page_name + '_' + product_id + ' input:checked').each(function () { if ($(this).data('option-prefix') == '=') { options_price += Number($(this).data('option-price')); main_price = 0; special_price = 0; } }); $('#option_' + mod_page_name + '_' + product_id + ' option:selected,#option_' + mod_page_name + '_' + product_id + ' input:checked').each(function () {
        if ($(this).data('option-prefix') == '+') { options_price += Number($(this).data('option-price')); }
        if ($(this).data('option-prefix') == '-') { options_price -= Number($(this).data('option-price')); }
        if ($(this).data('option-prefix') == '*') { options_price *= Number($(this).data('option-price')); main_price *= Number($(this).data('option-price')); special_price *= Number($(this).data('option-price')); }
    }); main_price += options_price; special_price += options_price; if (special != '') { main_price = special_price * special_coefficient; special_price *= quantity; }
    main_price *= quantity; var start_price = parseFloat($(mod + ' .price_no_format_' + product_id).html().replace(/\s*/g, '')); $({ val: start_price }).animate({ val: main_price }, { duration: 400, step: function (val) { $(mod + ' .price_no_format_' + product_id).html(price_format(val)); } }); if (special != '') { var start_price = parseFloat($(mod + ' .special_no_format_' + product_id).html().replace(/\s*/g, '')); $({ val: start_price }).animate({ val: special_price }, { duration: 400, step: function (val) { $(mod + ' .special_no_format_' + product_id).html(price_format(val)); } }); }
}
function get_cart_quantity(product_id, mod) { input_val = $(mod + ' .quantity_plus_minus .input-number-quantity' + product_id).val(); var input_val = typeof (input_val) != 'undefined' ? input_val : 1; quantity = parseInt(input_val); return quantity; }
$(document).on('click', '#login-popup', function (e) { e.preventDefault(); var href = $(e.target).attr('data-load-url'); $.get(href, function (data) { $('<div id="login-form-popup" class="modal fade" role="dialog">' + data + '</div>').modal('show'); }); }); $(document).on('hide.bs.modal', '#login-form-popup', function (e) { $('#login-form-popup').remove(); });; !function (a) { "function" == typeof define && define.amd ? define(["jquery"], a) : a("object" == typeof exports ? require("jquery") : jQuery) }(function (a) { var b, c = navigator.userAgent, d = /iphone/i.test(c), e = /chrome/i.test(c), f = /android/i.test(c); a.mask = { definitions: { 9: "[0-9]", a: "[A-Za-z]", "*": "[A-Za-z0-9]" }, autoclear: !0, dataName: "rawMaskFn", placeholder: "_" }, a.fn.extend({ caret: function (a, b) { var c; if (0 !== this.length && !this.is(":hidden")) return "number" == typeof a ? (b = "number" == typeof b ? b : a, this.each(function () { this.setSelectionRange ? this.setSelectionRange(a, b) : this.createTextRange && (c = this.createTextRange(), c.collapse(!0), c.moveEnd("character", b), c.moveStart("character", a), c.select()) })) : (this[0].setSelectionRange ? (a = this[0].selectionStart, b = this[0].selectionEnd) : document.selection && document.selection.createRange && (c = document.selection.createRange(), a = 0 - c.duplicate().moveStart("character", -1e5), b = a + c.text.length), { begin: a, end: b }) }, unmask: function () { return this.trigger("unmask") }, mask: function (c, g) { var h, i, j, k, l, m, n, o; if (!c && this.length > 0) { h = a(this[0]); var p = h.data(a.mask.dataName); return p ? p() : void 0 } return g = a.extend({ autoclear: a.mask.autoclear, placeholder: a.mask.placeholder, completed: null }, g), i = a.mask.definitions, j = [], k = n = c.length, l = null, a.each(c.split(""), function (a, b) { "?" == b ? (n--, k = a) : i[b] ? (j.push(new RegExp(i[b])), null === l && (l = j.length - 1), k > a && (m = j.length - 1)) : j.push(null) }), this.trigger("unmask").each(function () { function h() { if (g.completed) { for (var a = l; m >= a; a++)if (j[a] && C[a] === p(a)) return; g.completed.call(B) } } function p(a) { return g.placeholder.charAt(a < g.placeholder.length ? a : 0) } function q(a) { for (; ++a < n && !j[a];); return a } function r(a) { for (; --a >= 0 && !j[a];); return a } function s(a, b) { var c, d; if (!(0 > a)) { for (c = a, d = q(b); n > c; c++)if (j[c]) { if (!(n > d && j[c].test(C[d]))) break; C[c] = C[d], C[d] = p(d), d = q(d) } z(), B.caret(Math.max(l, a)) } } function t(a) { var b, c, d, e; for (b = a, c = p(a); n > b; b++)if (j[b]) { if (d = q(b), e = C[b], C[b] = c, !(n > d && j[d].test(e))) break; c = e } } function u() { var a = B.val(), b = B.caret(); if (a.length < o.length) { for (A(!0); b.begin > 0 && !j[b.begin - 1];)b.begin--; if (0 === b.begin) for (; b.begin < l && !j[b.begin];)b.begin++; B.caret(b.begin, b.begin) } else { for (A(!0); b.begin < n && !j[b.begin];)b.begin++; B.caret(b.begin, b.begin) } h() } function v() { A(), B.val() != E && B.change() } function w(a) { if (!B.prop("readonly")) { var b, c, e, f = a.which || a.keyCode; o = B.val(), 8 === f || 46 === f || d && 127 === f ? (b = B.caret(), c = b.begin, e = b.end, e - c === 0 && (c = 46 !== f ? r(c) : e = q(c - 1), e = 46 === f ? q(e) : e), y(c, e), s(c, e - 1), a.preventDefault()) : 13 === f ? v.call(this, a) : 27 === f && (B.val(E), B.caret(0, A()), a.preventDefault()) } } function x(b) { if (!B.prop("readonly")) { var c, d, e, g = b.which || b.keyCode, i = B.caret(); if (!(b.ctrlKey || b.altKey || b.metaKey || 32 > g) && g && 13 !== g) { if (i.end - i.begin !== 0 && (y(i.begin, i.end), s(i.begin, i.end - 1)), c = q(i.begin - 1), n > c && (d = String.fromCharCode(g), j[c].test(d))) { if (t(c), C[c] = d, z(), e = q(c), f) { var k = function () { a.proxy(a.fn.caret, B, e)() }; setTimeout(k, 0) } else B.caret(e); i.begin <= m && h() } b.preventDefault() } } } function y(a, b) { var c; for (c = a; b > c && n > c; c++)j[c] && (C[c] = p(c)) } function z() { B.val(C.join("")) } function A(a) { var b, c, d, e = B.val(), f = -1; for (b = 0, d = 0; n > b; b++)if (j[b]) { for (C[b] = p(b); d++ < e.length;)if (c = e.charAt(d - 1), j[b].test(c)) { C[b] = c, f = b; break } if (d > e.length) { y(b + 1, n); break } } else C[b] === e.charAt(d) && d++, k > b && (f = b); return a ? z() : k > f + 1 ? g.autoclear || C.join("") === D ? (B.val() && B.val(""), y(0, n)) : z() : (z(), B.val(B.val().substring(0, f + 1))), k ? b : l } var B = a(this), C = a.map(c.split(""), function (a, b) { return "?" != a ? i[a] ? p(b) : a : void 0 }), D = C.join(""), E = B.val(); B.data(a.mask.dataName, function () { return a.map(C, function (a, b) { return j[b] && a != p(b) ? a : null }).join("") }), B.one("unmask", function () { B.off(".mask").removeData(a.mask.dataName) }).on("focus.mask", function () { if (!B.prop("readonly")) { clearTimeout(b); var a; E = B.val(), a = A(), b = setTimeout(function () { z(), a == c.replace("?", "").length ? B.caret(0, a) : B.caret(a) }, 10) } }).on("blur.mask", v).on("keydown.mask", w).on("keypress.mask", x).on("input.mask paste.mask", function () { B.prop("readonly") || setTimeout(function () { var a = A(!0); B.caret(a), h() }, 0) }), e && f && B.off("input.mask").on("input.mask", u), A() }) } }) });; function fastorder_open(product_id) { $.magnificPopup.open({ tLoading: '<span><i style="font-size:50px;" class="fa fa-spinner fa-pulse"></i></span>', items: { src: 'index.php?route=extension/module/newfastorder&product_id=' + product_id, type: 'ajax' } }); }
function fastorder_open_cart() { $.magnificPopup.open({ tLoading: '<span><i style="font-size:50px;" class="fa fa-spinner fa-pulse"></i></span>', items: { src: 'index.php?route=extension/module/newfastordercart', type: 'ajax' } }); }
function quickorder_confirm() {
    $('#popup-quickorder #fastorder_data').prepend('<div class="masked_bg"></div><div class="loading_masked"></div>'); var success = 'false'; $('#callback_url').val(window.location.href); $.ajax({
        url: 'index.php?route=extension/module/newfastorder', type: 'post', data: $('#fastorder_data').serialize() + '&action=send', dataType: 'json', beforeSend: function () { loading_masked(true); }, success: function (json) {
            loading_masked(false); $('.masked_bg').remove(); $('.loading_masked').remove(); $('.alert').remove(); $('#contact-name').removeClass('error_input'); $('#contact-phone').removeClass('error_input'); $('#contact-comment').removeClass('error_input'); $('#contact-email').removeClass('error_input'); $('.text-danger').empty(); if (json['error']) {
                if (json['error']['name_fastorder']) { $('#contact-name').attr('placeholder', json['error']['name_fastorder']); $('#contact-name').addClass('error_input'); }
                if (json['error']['phone']) { $('#contact-phone').attr('placeholder', json['error']['phone']); $('#contact-phone').addClass('error_input'); }
                if (json['error']['comment_buyer']) { $('#contact-comment').attr('placeholder', json['error']['comment_buyer']); $('#contact-comment').addClass('error_input'); }
                if (json['error']['email_error']) { $('#contact-email').attr('placeholder', json['error']['email_error']); $('#contact-email').addClass('error_input'); }
                if (json['error']['error_agree']) { $('.error_agree').append('<div class="alert alert-danger"><i class="fa fa-exclamation-circle"></i> ' + json['error']['error_agree'] + '<button type="button" class="close" data-dismiss="alert">&times;</button></div>'); }
                if (json['error']['option']) { for (i in json['error']['option']) { $('.option-error-' + i).html(json['error']['option'][i]); } }
            }
            if (json['success']) { $.magnificPopup.close(); html = '<div id="modal-addquickorder" class="modal fade">'; html += '  <div class="modal-dialog">'; html += '    <div class="modal-content">'; html += '      <div class="modal-body alert-success"><i class="fa fa-check-circle"></i> ' + json['success'] + '<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button></div>'; html += '    </div>'; html += '  </div>'; html += '</div>'; $('body').append(html); $('#modal-addquickorder').modal('show'); }
        }
    });
}
function quickorder_confirm_checkout() {
    $('#popup-quickorder #fastorder_data').prepend('<div class="masked_bg"></div><div class="loading_masked"></div>'); $('#quickorder_url').val(window.location.href); var success = 'false'; $.ajax({
        url: 'index.php?route=extension/module/newfastordercart', type: 'post', data: $('#fastorder_data').serialize() + '&action=send', dataType: 'json', beforeSend: function () { loading_masked(true); }, success: function (json) {
            loading_masked(false); $('.masked_bg').remove(); $('.loading_masked').remove(); $('.alert').remove(); $('#contact-name').removeClass('error_input'); $('#contact-phone').removeClass('error_input'); $('#contact-comment').removeClass('error_input'); $('#contact-email').removeClass('error_input'); if (json['error']) {
                if (json['error']['name_fastorder']) { $('#contact-name').attr('placeholder', json['error']['name_fastorder']); $('#contact-name').addClass('error_input'); }
                if (json['error']['phone']) { $('#contact-phone').attr('placeholder', json['error']['phone']); $('#contact-phone').addClass('error_input'); }
                if (json['error']['comment_buyer']) { $('#contact-comment').attr('placeholder', json['error']['comment_buyer']); $('#contact-comment').addClass('error_input'); }
                if (json['error']['email_error']) { $('#contact-email').attr('placeholder', json['error']['email_error']); $('#contact-email').addClass('error_input'); }
                if (json['error']['error_agree']) { $('.error_agree').append('<div class="alert alert-danger"><i class="fa fa-exclamation-circle"></i> ' + json['error']['error_agree'] + '<button type="button" class="close" data-dismiss="alert">&times;</button></div>'); }
                if (json['error']['comment_buyer']) { $('#error_comment_buyer').html(json['error']['comment_buyer']); }
            }
            if (json['success']) { $('.shopping-cart #cart').load('indexabd5.html?route=common/cart/info%20.shopping-cart#cart'); $.magnificPopup.close(); html = '<div id="modal-addquickorder" class="modal fade">'; html += '  <div class="modal-dialog">'; html += '    <div class="modal-content">'; html += '      <div class="modal-body alert-success"><i class="fa fa-check-circle"></i> ' + json['success'] + '<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button></div>'; html += '    </div>'; html += '  </div>'; html += '</div>'; $('body').append(html); $('#modal-addquickorder').modal('show'); }
        }
    });
}; (function (t, e) { "object" == typeof exports ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : t.Spinner = e() })(this, function () { "use strict"; function t(t, e) { var i, n = document.createElement(t || "div"); for (i in e) n[i] = e[i]; return n } function e(t) { for (var e = 1, i = arguments.length; i > e; e++)t.appendChild(arguments[e]); return t } function i(t, e, i, n) { var o = ["opacity", e, ~~(100 * t), i, n].join("-"), r = .01 + 100 * (i / n), a = Math.max(1 - (1 - t) / e * (100 - r), t), s = l.substring(0, l.indexOf("Animation")).toLowerCase(), u = s && "-" + s + "-" || ""; return f[o] || (c.insertRule("@" + u + "keyframes " + o + "{" + "0%{opacity:" + a + "}" + r + "%{opacity:" + t + "}" + (r + .01) + "%{opacity:1}" + (r + e) % 100 + "%{opacity:" + t + "}" + "100%{opacity:" + a + "}" + "}", c.cssRules.length), f[o] = 1), o } function n(t, e) { var i, n, o = t.style; if (void 0 !== o[e]) return e; for (e = e.charAt(0).toUpperCase() + e.slice(1), n = 0; d.length > n; n++)if (i = d[n] + e, void 0 !== o[i]) return i } function o(t, e) { for (var i in e) t.style[n(t, i) || i] = e[i]; return t } function r(t) { for (var e = 1; arguments.length > e; e++) { var i = arguments[e]; for (var n in i) void 0 === t[n] && (t[n] = i[n]) } return t } function a(t) { for (var e = { x: t.offsetLeft, y: t.offsetTop }; t = t.offsetParent;)e.x += t.offsetLeft, e.y += t.offsetTop; return e } function s(t) { return this === void 0 ? new s(t) : (this.opts = r(t || {}, s.defaults, p), void 0) } function u() { function i(e, i) { return t("<" + e + ' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">', i) } c.addRule(".spin-vml", "behavior:url(#default#VML)"), s.prototype.lines = function (t, n) { function r() { return o(i("group", { coordsize: l + " " + l, coordorigin: -u + " " + -u }), { width: l, height: l }) } function a(t, a, s) { e(f, e(o(r(), { rotation: 360 / n.lines * t + "deg", left: ~~a }), e(o(i("roundrect", { arcsize: n.corners }), { width: u, height: n.width, left: n.radius, top: -n.width >> 1, filter: s }), i("fill", { color: n.color, opacity: n.opacity }), i("stroke", { opacity: 0 })))) } var s, u = n.length + n.width, l = 2 * u, d = 2 * -(n.width + n.length) + "px", f = o(r(), { position: "absolute", top: d, left: d }); if (n.shadow) for (s = 1; n.lines >= s; s++)a(s, -2, "progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)"); for (s = 1; n.lines >= s; s++)a(s); return e(t, f) }, s.prototype.opacity = function (t, e, i, n) { var o = t.firstChild; n = n.shadow && n.lines || 0, o && o.childNodes.length > e + n && (o = o.childNodes[e + n], o = o && o.firstChild, o = o && o.firstChild, o && (o.opacity = i)) } } var l, d = ["webkit", "Moz", "ms", "O"], f = {}, c = function () { var i = t("style", { type: "text/css" }); return e(document.getElementsByTagName("head")[0], i), i.sheet || i.styleSheet }(), p = { lines: 12, length: 7, width: 5, radius: 10, rotate: 0, corners: 1, color: "#000", direction: 1, speed: 1, trail: 100, opacity: .25, fps: 20, zIndex: 2e9, className: "spinner", top: "auto", left: "auto", position: "relative" }; s.defaults = {}, r(s.prototype, { spin: function (e) { this.stop(); var i, n, r = this, s = r.opts, u = r.el = o(t(0, { className: s.className }), { position: s.position, width: 0, zIndex: s.zIndex }), d = s.radius + s.length + s.width; if (e && (e.insertBefore(u, e.firstChild || null), n = a(e), i = a(u), o(u, { left: ("auto" == s.left ? n.x - i.x + (e.offsetWidth >> 1) : parseInt(s.left, 10) + d) + "px", top: ("auto" == s.top ? n.y - i.y + (e.offsetHeight >> 1) : parseInt(s.top, 10) + d) + "px" })), u.setAttribute("role", "progressbar"), r.lines(u, r.opts), !l) { var f, c = 0, p = (s.lines - 1) * (1 - s.direction) / 2, h = s.fps, m = h / s.speed, g = (1 - s.opacity) / (m * s.trail / 100), v = m / s.lines; (function y() { c++; for (var t = 0; s.lines > t; t++)f = Math.max(1 - (c + (s.lines - t) * v) % m * g, s.opacity), r.opacity(u, t * s.direction + p, f, s); r.timeout = r.el && setTimeout(y, ~~(1e3 / h)) })() } return r }, stop: function () { var t = this.el; return t && (clearTimeout(this.timeout), t.parentNode && t.parentNode.removeChild(t), this.el = void 0), this }, lines: function (n, r) { function a(e, i) { return o(t(), { position: "absolute", width: r.length + r.width + "px", height: r.width + "px", background: e, boxShadow: i, transformOrigin: "left", transform: "rotate(" + ~~(360 / r.lines * u + r.rotate) + "deg) translate(" + r.radius + "px" + ",0)", borderRadius: (r.corners * r.width >> 1) + "px" }) } for (var s, u = 0, d = (r.lines - 1) * (1 - r.direction) / 2; r.lines > u; u++)s = o(t(), { position: "absolute", top: 1 + ~(r.width / 2) + "px", transform: r.hwaccel ? "translate3d(0,0,0)" : "", opacity: r.opacity, animation: l && i(r.opacity, r.trail, d + u * r.direction, r.lines) + " " + 1 / r.speed + "s linear infinite" }), r.shadow && e(s, o(a("#000", "0 0 4px #000"), { top: "2px" })), e(n, e(s, a(r.color, "0 0 1px rgba(0,0,0,.1)"))); return n }, opacity: function (t, e, i) { t.childNodes.length > e && (t.childNodes[e].style.opacity = i) } }); var h = o(t("group"), { behavior: "url(#default#VML)" }); return !n(h, "transform") && h.adj ? u() : l = n(h, "animation"), s }); (function (t, e) { "object" == typeof exports ? module.exports = e() : "function" == typeof define && define.amd ? define(["spin"], e) : t.Ladda = e(t.Spinner) })(this, function (t) { "use strict"; function e(t) { if (t === void 0) return console.warn("Ladda button target must be defined."), void 0; t.querySelector(".ladda-label") || (t.innerHTML = '<span class="ladda-label">' + t.innerHTML + "</span>"); var e, n = document.createElement("span"); n.className = "ladda-spinner", t.appendChild(n); var r, a = { start: function () { return e || (e = o(t)), t.setAttribute("disabled", ""), t.setAttribute("data-loading", ""), clearTimeout(r), e.spin(n), this.setProgress(0), this }, startAfter: function (t) { return clearTimeout(r), r = setTimeout(function () { a.start() }, t), this }, stop: function () { return t.removeAttribute("disabled"), t.removeAttribute("data-loading"), clearTimeout(r), e && (r = setTimeout(function () { e.stop() }, 1e3)), this }, toggle: function () { return this.isLoading() ? this.stop() : this.start(), this }, setProgress: function (e) { e = Math.max(Math.min(e, 1), 0); var n = t.querySelector(".ladda-progress"); 0 === e && n && n.parentNode ? n.parentNode.removeChild(n) : (n || (n = document.createElement("div"), n.className = "ladda-progress", t.appendChild(n)), n.style.width = (e || 0) * t.offsetWidth + 45 + "px") }, enable: function () { return this.stop(), this }, disable: function () { return this.stop(), t.setAttribute("disabled", ""), this }, isLoading: function () { return t.hasAttribute("data-loading") } }; return u.push(a), a } function n(t, e) { for (; t.parentNode && t.tagName !== e;)t = t.parentNode; return e === t.tagName ? t : void 0 } function r(t) { for (var e = ["input", "textarea"], n = [], r = 0; e.length > r; r++)for (var a = t.getElementsByTagName(e[r]), i = 0; a.length > i; i++)a[i].hasAttribute("required") && n.push(a[i]); return n } function a(t, a) { a = a || {}; var i = []; "string" == typeof t ? i = s(document.querySelectorAll(t)) : "object" == typeof t && "string" == typeof t.nodeName && (i = [t]); for (var o = 0, u = i.length; u > o; o++)(function () { var t = i[o]; if ("function" == typeof t.addEventListener) { var s = e(t), u = -1; t.addEventListener("click", function () { var e = !0, i = n(t, "FORM"); if (i !== void 0) for (var o = r(i), d = 0; o.length > d; d++)"" === o[d].value.replace(/^\s+|\s+$/g, "") && (e = !1); e && (s.startAfter(1), "number" == typeof a.timeout && (clearTimeout(u), u = setTimeout(s.stop, a.timeout)), "function" == typeof a.callback && a.callback.apply(null, [s])) }, !1) } })() } function i() { for (var t = 0, e = u.length; e > t; t++)u[t].stop() } function o(e) { var n, r = e.offsetHeight; 0 === r && (r = parseFloat(window.getComputedStyle(e).height)), r > 32 && (r *= .8), e.hasAttribute("data-spinner-size") && (r = parseInt(e.getAttribute("data-spinner-size"), 10)), e.hasAttribute("data-spinner-color") && (n = e.getAttribute("data-spinner-color")); var a = 12, i = .2 * r, o = .6 * i, s = 7 > i ? 2 : 3; return new t({ color: n || "#fff", lines: a, radius: i, length: o, width: s, zIndex: "auto", top: "auto", left: "auto", className: "" }) } function s(t) { for (var e = [], n = 0; t.length > n; n++)e.push(t[n]); return e } var u = []; return { bind: a, create: e, stopAll: i } }); (function (t, e) { if (void 0 === e) return console.error("jQuery required for Ladda.jQuery"); var i = []; e = e.extend(e, { ladda: function (e) { "stopAll" === e && t.stopAll() } }), e.fn = e.extend(e.fn, { ladda: function (n) { var r = i.slice.call(arguments, 1); return "bind" === n ? (r.unshift(e(this).selector), t.bind.apply(t, r)) : e(this).each(function () { var i, o = e(this); void 0 === n ? o.data("ladda", t.create(this)) : (i = o.data("ladda"), i[n].apply(i, r)) }), this } }) })(this.Ladda, this.jQuery); function sendCallback() {
    progress = 0, laddaLoad = $('.ladda-button').ladda(); laddaLoad.ladda('start'); laddaLoad.ladda('setProgress', 1); var success = 'false'; $('#callback_url').val(window.location.href); $.ajax({
        url: 'index.php?route=extension/module/callback', type: 'post', data: $('#callback_data').serialize() + '&action=send', dataType: 'json', success: function (json) {
            laddaLoad.ladda('stop'); $('.alert').remove(); $('#contact-name').removeClass('error_input'); $('#contact-phone').removeClass('error_input'); $('#contact-comment').removeClass('error_input'); $('#contact-email').removeClass('error_input'); if (json['warning']) {
                if (json['warning']['name']) { $('#contact-name').attr('placeholder', json['warning']['name']); $('#contact-name').addClass('error_input'); }
                if (json['warning']['phone']) { $('#contact-phone').attr('placeholder', json['warning']['phone']); $('#contact-phone').addClass('error_input'); }
                if (json['warning']['comment_buyer']) { $('#contact-comment').attr('placeholder', json['warning']['comment_buyer']); $('#contact-comment').addClass('error_input'); }
                if (json['warning']['email_error']) { $('#contact-email').attr('placeholder', json['warning']['email_error']); $('#contact-email').addClass('error_input'); }
                if (json['warning']['error_agree']) { $('.error_agree').append('<div class="alert alert-danger"><i class="fa fa-exclamation-circle"></i> ' + json['warning']['error_agree'] + '<button type="button" class="close" data-dismiss="alert">&times;</button></div>'); }
                $('.popup-center').animate({ scrollTop: 0 }, 'slow');
            }
            if (json['success']) { $.magnificPopup.close(); var html_success = '<div id="popup-success-callback"><i class="fa fa-check-circle fa-fw"></i>' + json['success'] + '</div>'; $.magnificPopup.open({ tLoading: '<span><i style="font-size:50px;" class="fa fa-spinner fa-pulse"></i></span>', items: { src: html_success, type: 'inline' } }); }
        }
    });
};;
(function ($) {
    var $window = $(window); var options = {}; var zindexvalues = []; var lastclicked = []; var scrollbarwidth; var bodymarginright = null; var opensuffix = '_open'; var closesuffix = '_close'; var visiblePopupsArray = []; var transitionsupport = null; var opentimer; var iOS = /(iPad|iPhone|iPod)/g.test(navigator.userAgent); var focusableElementsString = "a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]"; var methods = {
        _init: function (el) {
            var $el = $(el); var options = $el.data('popupoptions'); lastclicked[el.id] = false; zindexvalues[el.id] = 0; if (!$el.data('popup-initialized')) { $el.attr('data-popup-initialized', 'true'); methods._initonce(el); }
            if (options.autoopen) { setTimeout(function () { methods.show(el, 0); }, 0); }
        }, _initonce: function (el) {
            var $el = $(el); var $body = $('body'); var $wrapper; var options = $el.data('popupoptions'); var css; bodymarginright = parseInt($body.css('margin-right'), 10); transitionsupport = document.body.style.webkitTransition !== undefined || document.body.style.MozTransition !== undefined || document.body.style.msTransition !== undefined || document.body.style.OTransition !== undefined || document.body.style.transition !== undefined; if (options.type == 'tooltip') { options.background = false; options.scrolllock = false; }
            if (options.backgroundactive) { options.background = false; options.blur = false; options.scrolllock = false; }
            if (options.scrolllock) { var parent; var child; if (typeof scrollbarwidth === 'undefined') { parent = $('<div style="width:50px;height:50px;overflow:auto"><div/></div>').appendTo('body'); child = parent.children(); scrollbarwidth = child.innerWidth() - child.height(99).innerWidth(); parent.remove(); } }
            if (!$el.attr('id')) { $el.attr('id', 'j-popup-' + parseInt((Math.random() * 100000000), 10)); }
            $el.addClass('popup_content'); if ((options.background) && (!$('#' + el.id + '_background').length)) {
                $body.append('<div id="' + el.id + '_background" class="popup_background"></div>'); var $background = $('#' + el.id + '_background'); $background.css({ opacity: 0, visibility: 'hidden', backgroundColor: options.color, position: 'fixed', top: 0, right: 0, bottom: 0, left: 0 }); if (options.setzindex && !options.autozindex) { $background.css('z-index', '1000'); }
                if (options.transition) { $background.css('transition', options.transition); }
            }
            $body.append(el); $el.wrap('<div id="' + el.id + '_wrapper" class="popup_wrapper" />'); $wrapper = $('#' + el.id + '_wrapper'); $wrapper.css({ opacity: 0, visibility: 'hidden', position: 'absolute' }); if (iOS) { $wrapper.css('cursor', 'pointer'); }
            if (options.type == 'overlay') { $wrapper.css('overflow', 'auto'); }
            $el.css({ opacity: 0, visibility: 'hidden', display: 'inline-block' }); if (options.setzindex && !options.autozindex) { $wrapper.css('z-index', '1001'); }
            if (!options.outline) { $el.css('outline', 'none'); }
            if (options.transition) { $el.css('transition', options.transition); $wrapper.css('transition', options.transition); }
            $el.attr('aria-hidden', true); if (options.type == 'overlay') {
                $el.css({ textAlign: 'left', position: 'relative', verticalAlign: 'middle' }); css = { position: 'fixed', width: '100%', height: '100%', top: 0, left: 0, textAlign: 'center' }; if (options.backgroundactive) { css.position = 'absolute'; css.height = '0'; css.overflow = 'visible'; }
                $wrapper.css(css); $wrapper.append('<div class="popup_align" />'); $('.popup_align').css({ display: 'inline-block', verticalAlign: 'middle', height: '100%' });
            }
            $el.attr('role', 'dialog'); var openelement = (options.openelement) ? options.openelement : ('.' + el.id + opensuffix); $(openelement).each(function (i, item) { $(item).attr('data-popup-ordinal', i); if (!item.id) { $(item).attr('id', 'open_' + parseInt((Math.random() * 100000000), 10)); } }); if (!($el.attr('aria-labelledby') || $el.attr('aria-label'))) { $el.attr('aria-labelledby', $(openelement).attr('id')); }
            if (options.action == 'hover') { options.keepfocus = false; $(openelement).on('mouseenter', function (event) { methods.show(el, $(this).data('popup-ordinal')); }); $(openelement).on('mouseleave', function (event) { methods.hide(el); }); } else { $(document).on('click', openelement, function (event) { event.preventDefault(); var ord = $(this).data('popup-ordinal'); setTimeout(function () { methods.show(el, ord); }, 0); }); }
            if (options.closebutton) { methods.addclosebutton(el); }
            if (options.detach) { $el.hide().detach(); } else { $wrapper.hide(); }
        }, show: function (el, ordinal) {
            var $el = $(el); if ($el.data('popup-visible')) return; if (!$el.data('popup-initialized')) { methods._init(el); }
            $el.attr('data-popup-initialized', 'true'); var $body = $('body'); var options = $el.data('popupoptions'); var $wrapper = $('#' + el.id + '_wrapper'); var $background = $('#' + el.id + '_background'); callback(el, ordinal, options.beforeopen); lastclicked[el.id] = ordinal; setTimeout(function () { visiblePopupsArray.push(el.id); }, 0); if (options.autozindex) {
                var elements = document.getElementsByTagName('*'); var len = elements.length; var maxzindex = 0; for (var i = 0; i < len; i++) { var elementzindex = $(elements[i]).css('z-index'); if (elementzindex !== 'auto') { elementzindex = parseInt(elementzindex, 10); if (maxzindex < elementzindex) { maxzindex = elementzindex; } } }
                zindexvalues[el.id] = maxzindex; if (options.background) { if (zindexvalues[el.id] > 0) { $('#' + el.id + '_background').css({ zIndex: (zindexvalues[el.id] + 1) }); } }
                if (zindexvalues[el.id] > 0) { $wrapper.css({ zIndex: (zindexvalues[el.id] + 2) }); }
            }
            if (options.detach) { $wrapper.prepend(el); $el.show(); } else { $wrapper.show(); }
            opentimer = setTimeout(function () { $wrapper.css({ visibility: 'visible', opacity: 1 }); $('html').addClass('popup_visible').addClass('popup_visible_' + el.id); $wrapper.addClass('popup_wrapper_visible'); }, 20); if (options.scrolllock) { $body.css('overflow', 'hidden'); if ($body.height() > $window.height()) { $body.css('margin-right', bodymarginright + scrollbarwidth); } }
            if (options.backgroundactive) {
                $el.css({
                    top: ($window.height() - ($el.get(0).offsetHeight +
                        parseInt($el.css('margin-top'), 10) +
                        parseInt($el.css('margin-bottom'), 10))) / 2 + 'px'
                });
            }
            $el.css({ 'visibility': 'visible', 'opacity': 1 }); if (options.background) { $background.css({ 'visibility': 'visible', 'opacity': options.opacity }); setTimeout(function () { $background.css({ 'opacity': options.opacity }); }, 0); }
            $el.data('popup-visible', true); methods.reposition(el, ordinal); $el.data('focusedelementbeforepopup', document.activeElement); if (options.keepfocus) { $el.attr('tabindex', -1); setTimeout(function () { if (options.focuselement === 'closebutton') { $('#' + el.id + ' .' + el.id + closesuffix + ':first').focus(); } else if (options.focuselement) { $(options.focuselement).focus(); } else { $el.focus(); } }, options.focusdelay); }
            $(options.pagecontainer).attr('aria-hidden', true); $el.attr('aria-hidden', false); callback(el, ordinal, options.onopen); if (transitionsupport) { $wrapper.one('transitionend', function () { callback(el, ordinal, options.opentransitionend); }); } else { callback(el, ordinal, options.opentransitionend); }
            if (options.type == 'tooltip') { $(window).on('resize.' + el.id, function () { methods.reposition(el, ordinal); }); }
        }, hide: function (el, outerClick) {
            var popupIdIndex = $.inArray(el.id, visiblePopupsArray); if (popupIdIndex === -1) { return; }
            if (opentimer) clearTimeout(opentimer); var $body = $('body'); var $el = $(el); var options = $el.data('popupoptions'); var $wrapper = $('#' + el.id + '_wrapper'); var $background = $('#' + el.id + '_background'); $el.data('popup-visible', false); if (visiblePopupsArray.length === 1) { $('html').removeClass('popup_visible').removeClass('popup_visible_' + el.id); } else { if ($('html').hasClass('popup_visible_' + el.id)) { $('html').removeClass('popup_visible_' + el.id); } }
            visiblePopupsArray.splice(popupIdIndex, 1); if ($wrapper.hasClass('popup_wrapper_visible')) { $wrapper.removeClass('popup_wrapper_visible'); }
            if (options.keepfocus && !outerClick) { setTimeout(function () { if ($($el.data('focusedelementbeforepopup')).is(':visible')) { $el.data('focusedelementbeforepopup').focus(); } }, 0); }
            $wrapper.css({ 'visibility': 'hidden', 'opacity': 0 }); $el.css({ 'visibility': 'hidden', 'opacity': 0 }); if (options.background) { $background.css({ 'visibility': 'hidden', 'opacity': 0 }); }
            $(options.pagecontainer).attr('aria-hidden', false); $el.attr('aria-hidden', true); callback(el, lastclicked[el.id], options.onclose); if (transitionsupport && $el.css('transition-duration') !== '0s') {
                $el.one('transitionend', function (e) {
                    if (!($el.data('popup-visible'))) { if (options.detach) { $el.hide().detach(); } else { $wrapper.hide(); } }
                    if (options.scrolllock) { setTimeout(function () { $body.css({ overflow: 'visible', 'margin-right': bodymarginright }); }, 10); }
                    callback(el, lastclicked[el.id], options.closetransitionend);
                });
            } else {
                if (options.detach) { $el.hide().detach(); } else { $wrapper.hide(); }
                if (options.scrolllock) { setTimeout(function () { $body.css({ overflow: 'visible', 'margin-right': bodymarginright }); }, 10); }
                callback(el, lastclicked[el.id], options.closetransitionend);
            }
            if (options.type == 'tooltip') { $(window).off('resize.' + el.id); }
        }, toggle: function (el, ordinal) { if ($(el).data('popup-visible')) { methods.hide(el); } else { setTimeout(function () { methods.show(el, ordinal); }, 0); } }, reposition: function (el, ordinal) {
            var $el = $(el); var options = $el.data('popupoptions'); var $wrapper = $('#' + el.id + '_wrapper'); var $background = $('#' + el.id + '_background'); ordinal = ordinal || 0; if (options.type == 'tooltip') {
                $wrapper.css({ 'position': 'absolute' }); var $tooltipanchor; if (options.tooltipanchor) { $tooltipanchor = $(options.tooltipanchor); } else if (options.openelement) { $tooltipanchor = $(options.openelement).filter('[data-popup-ordinal="' + ordinal + '"]'); } else { $tooltipanchor = $('.' + el.id + opensuffix + '[data-popup-ordinal="' + ordinal + '"]'); }
                var linkOffset = $tooltipanchor.offset(); if (options.horizontal == 'right') { $wrapper.css('left', linkOffset.left + $tooltipanchor.outerWidth() + options.offsetleft); } else if (options.horizontal == 'leftedge') { $wrapper.css('left', linkOffset.left + $tooltipanchor.outerWidth() - $tooltipanchor.outerWidth() + options.offsetleft); } else if (options.horizontal == 'left') { $wrapper.css('right', $window.width() - linkOffset.left - options.offsetleft); } else if (options.horizontal == 'rightedge') { $wrapper.css('right', $window.width() - linkOffset.left - $tooltipanchor.outerWidth() - options.offsetleft); } else { $wrapper.css('left', linkOffset.left + ($tooltipanchor.outerWidth() / 2) - ($el.outerWidth() / 2) - parseFloat($el.css('marginLeft')) + options.offsetleft); }
                if (options.vertical == 'bottom') { $wrapper.css('top', linkOffset.top + $tooltipanchor.outerHeight() + options.offsettop); } else if (options.vertical == 'bottomedge') { $wrapper.css('top', linkOffset.top + $tooltipanchor.outerHeight() - $el.outerHeight() + options.offsettop); } else if (options.vertical == 'top') { $wrapper.css('bottom', $window.height() - linkOffset.top - options.offsettop); } else if (options.vertical == 'topedge') { $wrapper.css('bottom', $window.height() - linkOffset.top - $el.outerHeight() - options.offsettop); } else { $wrapper.css('top', linkOffset.top + ($tooltipanchor.outerHeight() / 2) - ($el.outerHeight() / 2) - parseFloat($el.css('marginTop')) + options.offsettop); }
            } else if (options.type == 'overlay') {
                if (options.horizontal) { $wrapper.css('text-align', options.horizontal); } else { $wrapper.css('text-align', 'center'); }
                if (options.vertical) { $el.css('vertical-align', options.vertical); } else { $el.css('vertical-align', 'middle'); }
            }
        }, addclosebutton: function (el) {
            var genericCloseButton; if ($(el).data('popupoptions').closebuttonmarkup) { genericCloseButton = $(options.closebuttonmarkup).addClass(el.id + '_close'); } else { genericCloseButton = '<button class="popup_close ' + el.id + '_close" title="Close" aria-label="Close"><span aria-hidden="true">×</span></button>'; }
            if ($(el).data('popup-initialized')) { $(el).append(genericCloseButton); }
        }
    }; var callback = function (el, ordinal, func) { var options = $(el).data('popupoptions'); var openelement = (options.openelement) ? options.openelement : ('.' + el.id + opensuffix); var elementclicked = $(openelement + '[data-popup-ordinal="' + ordinal + '"]'); if (typeof func == 'function') { func.call($(el), el, elementclicked); } }; $(document).on('keydown', function (event) { if (visiblePopupsArray.length) { var elementId = visiblePopupsArray[visiblePopupsArray.length - 1]; var el = document.getElementById(elementId); if ($(el).data('popupoptions').escape && event.keyCode == 27) { methods.hide(el); } } }); $(document).on('click', function (event) {
        if (visiblePopupsArray.length) {
            var elementId = visiblePopupsArray[visiblePopupsArray.length - 1]; var el = document.getElementById(elementId); var closeButton = ($(el).data('popupoptions').closeelement) ? $(el).data('popupoptions').closeelement : ('.' + el.id + closesuffix); if ($(event.target).closest(closeButton).length) { event.preventDefault(); methods.hide(el); }
            if ($(el).data('popupoptions').blur && !$(event.target).closest('#' + elementId).length && event.which !== 2 && $(event.target).is(':visible')) { if ($(el).data('popupoptions').background) { methods.hide(el); event.preventDefault(); } else { methods.hide(el, true); } }
        }
    }); $(document).on('keydown', function (event) { if (visiblePopupsArray.length && event.which == 9) { var elementId = visiblePopupsArray[visiblePopupsArray.length - 1]; var el = document.getElementById(elementId); var popupItems = $(el).find('*'); var focusableItems = popupItems.filter(focusableElementsString).filter(':visible'); var focusedItem = $(':focus'); var numberOfFocusableItems = focusableItems.length; var focusedItemIndex = focusableItems.index(focusedItem); if (numberOfFocusableItems === 0) { $(el).focus(); event.preventDefault(); } else { if (event.shiftKey) { if (focusedItemIndex === 0) { focusableItems.get(numberOfFocusableItems - 1).focus(); event.preventDefault(); } } else { if (focusedItemIndex == numberOfFocusableItems - 1) { focusableItems.get(0).focus(); event.preventDefault(); } } } } }); $.fn.popup = function (customoptions) {
        return this.each(function () {
            var $el = $(this); if (typeof customoptions === 'object') { var opt = $.extend({}, $.fn.popup.defaults, $el.data('popupoptions'), customoptions); $el.data('popupoptions', opt); options = $el.data('popupoptions'); methods._init(this); } else if (typeof customoptions === 'string') {
                if (!($el.data('popupoptions'))) { $el.data('popupoptions', $.fn.popup.defaults); options = $el.data('popupoptions'); }
                methods[customoptions].call(this, this);
            } else {
                if (!($el.data('popupoptions'))) { $el.data('popupoptions', $.fn.popup.defaults); options = $el.data('popupoptions'); }
                methods._init(this);
            }
        });
    }; $.fn.popup.defaults = { type: 'overlay', autoopen: false, background: true, backgroundactive: false, color: 'black', opacity: '0.5', horizontal: 'center', vertical: 'middle', offsettop: 0, offsetleft: 0, escape: false, blur: false, setzindex: true, autozindex: false, scrolllock: true, closebutton: false, closebuttonmarkup: null, keepfocus: true, focuselement: null, focusdelay: 50, outline: false, pagecontainer: null, detach: false, openelement: null, closeelement: null, transition: null, tooltipanchor: null, beforeopen: null, onclose: null, onopen: null, opentransitionend: null, closetransitionend: null };
})(jQuery);; (function ($) {
    var days = 24 * 60 * 60, hours = 60 * 60, minutes = 60; $.fn.countdown = function (prop) {
        var options = $.extend({ callback: function () { }, timestamp: 0 }, prop); var left, d, h, m, s, positions; init(this, options); positions = this.find('.position'); (function tick() {
            left = Math.floor((options.timestamp - (new Date())) / 1000); if (left < 0) { left = 0; }
            d = Math.floor(left / days); updateDuo(0, 1, d); left -= d * days; h = Math.floor(left / hours); updateDuo(2, 3, h); left -= h * hours; m = Math.floor(left / minutes); updateDuo(4, 5, m); left -= m * minutes; s = left; updateDuo(6, 7, s); options.callback(d, h, m, s); setTimeout(tick, 1000);
        })(); function updateDuo(minor, major, value) { switchDigit(positions.eq(minor), Math.floor(value / 10) % 10); switchDigit(positions.eq(major), value % 10); }
        return this;
    }; function switchDigit(position, number) {
        var digit = position.find('.digit')
        if (digit.is(':animated')) { return false; }
        if (position.data('digit') == number) { return false; }
        position.data('digit', number); var replacement = $('<span>', { 'class': 'digit', css: {}, html: number }); digit.before(replacement).removeClass('static').animate({}, 'fast', function () { digit.remove(); })
        replacement.delay(100).animate({}, 'fast', function () { replacement.addClass('static'); });
    }
})(jQuery);; !function (a, b) { var c = b(a, a.document); a.lazySizes = c, "object" == typeof module && module.exports && (module.exports = c) }(window, function (a, b) { "use strict"; if (b.getElementsByClassName) { var c, d, e = b.documentElement, f = a.Date, g = a.HTMLPictureElement, h = "addEventListener", i = "getAttribute", j = a[h], k = a.setTimeout, l = a.requestAnimationFrame || k, m = a.requestIdleCallback, n = /^picture$/i, o = ["load", "error", "lazyincluded", "_lazyloaded"], p = {}, q = Array.prototype.forEach, r = function (a, b) { return p[b] || (p[b] = new RegExp("(\\s|^)" + b + "(\\s|$)")), p[b].test(a[i]("class") || "") && p[b] }, s = function (a, b) { r(a, b) || a.setAttribute("class", (a[i]("class") || "").trim() + " " + b) }, t = function (a, b) { var c; (c = r(a, b)) && a.setAttribute("class", (a[i]("class") || "").replace(c, " ")) }, u = function (a, b, c) { var d = c ? h : "removeEventListener"; c && u(a, b), o.forEach(function (c) { a[d](c, b) }) }, v = function (a, d, e, f, g) { var h = b.createEvent("Event"); return e || (e = {}), e.instance = c, h.initEvent(d, !f, !g), h.detail = e, a.dispatchEvent(h), h }, w = function (b, c) { var e; !g && (e = a.picturefill || d.pf) ? (c && c.src && !b[i]("srcset") && b.setAttribute("srcset", c.src), e({ reevaluate: !0, elements: [b] })) : c && c.src && (b.src = c.src) }, x = function (a, b) { return (getComputedStyle(a, null) || {})[b] }, y = function (a, b, c) { for (c = c || a.offsetWidth; c < d.minSize && b && !a._lazysizesWidth;)c = b.offsetWidth, b = b.parentNode; return c }, z = function () { var a, c, d = [], e = [], f = d, g = function () { var b = f; for (f = d.length ? e : d, a = !0, c = !1; b.length;)b.shift()(); a = !1 }, h = function (d, e) { a && !e ? d.apply(this, arguments) : (f.push(d), c || (c = !0, (b.hidden ? k : l)(g))) }; return h._lsFlush = g, h }(), A = function (a, b) { return b ? function () { z(a) } : function () { var b = this, c = arguments; z(function () { a.apply(b, c) }) } }, B = function (a) { var b, c = 0, e = d.throttleDelay, g = d.ricTimeout, h = function () { b = !1, c = f.now(), a() }, i = m && g > 49 ? function () { m(h, { timeout: g }), g !== d.ricTimeout && (g = d.ricTimeout) } : A(function () { k(h) }, !0); return function (a) { var d; (a = !0 === a) && (g = 33), b || (b = !0, d = e - (f.now() - c), d < 0 && (d = 0), a || d < 9 ? i() : k(i, d)) } }, C = function (a) { var b, c, d = 99, e = function () { b = null, a() }, g = function () { var a = f.now() - c; a < d ? k(g, d - a) : (m || e)(e) }; return function () { c = f.now(), b || (b = k(g, d)) } }; !function () { var b, c = { lazyClass: "lazyload", loadedClass: "lazyloaded", loadingClass: "lazyloading", preloadClass: "lazypreload", errorClass: "lazyerror", autosizesClass: "lazyautosizes", srcAttr: "data-src", srcsetAttr: "data-srcset", sizesAttr: "data-sizes", minSize: 40, customMedia: {}, init: !0, expFactor: 1.5, hFac: .8, loadMode: 2, loadHidden: !0, ricTimeout: 0, throttleDelay: 125 }; d = a.lazySizesConfig || a.lazysizesConfig || {}; for (b in c) b in d || (d[b] = c[b]); a.lazySizesConfig = d, k(function () { d.init && F() }) }(); var D = function () { var g, l, m, o, p, y, D, F, G, H, I, J, K = /^img$/i, L = /^iframe$/i, M = "onscroll" in a && !/(gle|ing)bot/.test(navigator.userAgent), N = 0, O = 0, P = 0, Q = -1, R = function (a) { P--, a && a.target && u(a.target, R), (!a || P < 0 || !a.target) && (P = 0) }, S = function (a) { return null == J && (J = "hidden" == x(b.body, "visibility")), J || "hidden" != x(a.parentNode, "visibility") && "hidden" != x(a, "visibility") }, T = function (a, c) { var d, f = a, g = S(a); for (F -= c, I += c, G -= c, H += c; g && (f = f.offsetParent) && f != b.body && f != e;)(g = (x(f, "opacity") || 1) > 0) && "visible" != x(f, "overflow") && (d = f.getBoundingClientRect(), g = H > d.left && G < d.right && I > d.top - 1 && F < d.bottom + 1); return g }, U = function () { var a, f, h, j, k, m, n, p, q, r, s, t, u = c.elements; if ((o = d.loadMode) && P < 8 && (a = u.length)) { for (f = 0, Q++, r = !d.expand || d.expand < 1 ? e.clientHeight > 500 && e.clientWidth > 500 ? 500 : 370 : d.expand, s = r * d.expFactor, t = d.hFac, J = null, O < s && P < 1 && Q > 2 && o > 2 && !b.hidden ? (O = s, Q = 0) : O = o > 1 && Q > 1 && P < 6 ? r : N; f < a; f++)if (u[f] && !u[f]._lazyRace) if (M) if ((p = u[f][i]("data-expand")) && (m = 1 * p) || (m = O), q !== m && (y = innerWidth + m * t, D = innerHeight + m, n = -1 * m, q = m), h = u[f].getBoundingClientRect(), (I = h.bottom) >= n && (F = h.top) <= D && (H = h.right) >= n * t && (G = h.left) <= y && (I || H || G || F) && (d.loadHidden || S(u[f])) && (l && P < 3 && !p && (o < 3 || Q < 4) || T(u[f], m))) { if (aa(u[f]), k = !0, P > 9) break } else !k && l && !j && P < 4 && Q < 4 && o > 2 && (g[0] || d.preloadAfterLoad) && (g[0] || !p && (I || H || G || F || "auto" != u[f][i](d.sizesAttr))) && (j = g[0] || u[f]); else aa(u[f]); j && !k && aa(j) } }, V = B(U), W = function (a) { s(a.target, d.loadedClass), t(a.target, d.loadingClass), u(a.target, Y), v(a.target, "lazyloaded") }, X = A(W), Y = function (a) { X({ target: a.target }) }, Z = function (a, b) { try { a.contentWindow.location.replace(b) } catch (c) { a.src = b } }, $ = function (a) { var b, c = a[i](d.srcsetAttr); (b = d.customMedia[a[i]("data-media") || a[i]("media")]) && a.setAttribute("media", b), c && a.setAttribute("srcset", c) }, _ = A(function (a, b, c, e, f) { var g, h, j, l, o, p; (o = v(a, "lazybeforeunveil", b)).defaultPrevented || (e && (c ? s(a, d.autosizesClass) : a.setAttribute("sizes", e)), h = a[i](d.srcsetAttr), g = a[i](d.srcAttr), f && (j = a.parentNode, l = j && n.test(j.nodeName || "")), p = b.firesLoad || "src" in a && (h || g || l), o = { target: a }, p && (u(a, R, !0), clearTimeout(m), m = k(R, 2500), s(a, d.loadingClass), u(a, Y, !0)), l && q.call(j.getElementsByTagName("source"), $), h ? a.setAttribute("srcset", h) : g && !l && (L.test(a.nodeName) ? Z(a, g) : a.src = g), f && (h || l) && w(a, { src: g })), a._lazyRace && delete a._lazyRace, t(a, d.lazyClass), z(function () { (!p || a.complete && a.naturalWidth > 1) && (p ? R(o) : P--, W(o)) }, !0) }), aa = function (a) { var b, c = K.test(a.nodeName), e = c && (a[i](d.sizesAttr) || a[i]("sizes")), f = "auto" == e; (!f && l || !c || !a[i]("src") && !a.srcset || a.complete || r(a, d.errorClass) || !r(a, d.lazyClass)) && (b = v(a, "lazyunveilread").detail, f && E.updateElem(a, !0, a.offsetWidth), a._lazyRace = !0, P++, _(a, b, f, e, c)) }, ba = function () { if (!l) { if (f.now() - p < 999) return void k(ba, 999); var a = C(function () { d.loadMode = 3, V() }); l = !0, d.loadMode = 3, V(), j("scroll", function () { 3 == d.loadMode && (d.loadMode = 2), a() }, !0) } }; return { _: function () { p = f.now(), c.elements = b.getElementsByClassName(d.lazyClass), g = b.getElementsByClassName(d.lazyClass + " " + d.preloadClass), j("scroll", V, !0), j("resize", V, !0), a.MutationObserver ? new MutationObserver(V).observe(e, { childList: !0, subtree: !0, attributes: !0 }) : (e[h]("DOMNodeInserted", V, !0), e[h]("DOMAttrModified", V, !0), setInterval(V, 999)), j("hashchange", V, !0), ["focus", "mouseover", "click", "load", "transitionend", "animationend", "webkitAnimationEnd"].forEach(function (a) { b[h](a, V, !0) }), /d$|^c/.test(b.readyState) ? ba() : (j("load", ba), b[h]("DOMContentLoaded", V), k(ba, 2e4)), c.elements.length ? (U(), z._lsFlush()) : V() }, checkElems: V, unveil: aa } }(), E = function () { var a, c = A(function (a, b, c, d) { var e, f, g; if (a._lazysizesWidth = d, d += "px", a.setAttribute("sizes", d), n.test(b.nodeName || "")) for (e = b.getElementsByTagName("source"), f = 0, g = e.length; f < g; f++)e[f].setAttribute("sizes", d); c.detail.dataAttr || w(a, c.detail) }), e = function (a, b, d) { var e, f = a.parentNode; f && (d = y(a, f, d), e = v(a, "lazybeforesizes", { width: d, dataAttr: !!b }), e.defaultPrevented || (d = e.detail.width) && d !== a._lazysizesWidth && c(a, f, e, d)) }, f = function () { var b, c = a.length; if (c) for (b = 0; b < c; b++)e(a[b]) }, g = C(f); return { _: function () { a = b.getElementsByClassName(d.autosizesClass), j("resize", g) }, checkElems: g, updateElem: e } }(), F = function () { F.i || (F.i = !0, E._(), D._()) }; return c = { cfg: d, autoSizer: E, loader: D, init: F, uP: w, aC: s, rC: t, hC: r, fire: v, gW: y, rAF: z } } });; "use strict"
    ; var WIN = window; var JQ = WIN.jQuery; var $WIN = JQ(WIN); var NAME = 'scrollpanel'; var DEFAULTS = { prefix: 'sp-' }; function ScrollPanel(element, options) {
        var self = this; self.settings = JQ.extend({}, DEFAULTS, options); var prefix = self.settings.prefix; self.$el = JQ(element); self.mouse_off_y = 0; self.interval_id = 0; self.scroll_proxy = function (ev) { return self.scroll(ev); }; if (!self.$el.css('position') || self.$el.css('position') === 'static') { self.$el.css('position', 'relative'); }
        self.$bar = JQ("<div class=\"".concat(prefix, "scrollbar\"/>")); self.$thumb = JQ("<div class=\"".concat(prefix, "thumb\"/>")).appendTo(self.$bar); self.$el.addClass("".concat(prefix, "host")).wrapInner("<div class=\"".concat(prefix, "viewport\"><div class=\"").concat(prefix, "container\"/></div>")).append(self.$bar); self.$viewport = self.$el.find("> .".concat(prefix, "viewport")); self.$container = self.$viewport.find("> .".concat(prefix, "container")); self.$el.on('mousewheel', function (ev, delta, deltaX, deltaY) { self.$viewport.scrollTop(self.$viewport.scrollTop() - 50 * deltaY); self.update(); ev.preventDefault(); ev.stopPropagation(); }).on('scroll', function () { self.update(); }).on('mouseover', function () { self.update(); }); self.$viewport.css({ paddingRight: self.$bar.outerWidth(true), height: self.$el.height(), overflow: 'hidden' }); self.$container.css({ overflow: 'hidden' }); self.$bar.css({ position: 'absolute', top: 0, right: 0, overflow: 'hidden' }).on('mousedown', function (ev) { self.mouse_off_y = self.$thumb.outerHeight() / 2; self.onMousedown(ev); }).each(function () { self.onselectstart = function () { return false; }; }); self.$thumb.css({ position: 'absolute', left: 0, width: '100%' }).on('mousedown', function (ev) { self.mouse_off_y = ev.pageY - self.$thumb.offset().top; self.onMousedown(ev); }); self.update(); self.update();
    }
JQ.extend(ScrollPanel.prototype, {
    update: function update(repeat) {
        var self = this; if (self.interval_id && !repeat) { WIN.clearInterval(self.interval_id); self.interval_id = 0; } else if (!self.interval_id && repeat) { self.interval_id = WIN.setInterval(function () { self.update(true); }, 50); }
        self.$viewport.css('height', self.$el.height()); var vis_height = self.$el.height(); var content_height = self.$container.outerHeight(); var scroll_top = self.$viewport.scrollTop(); var scroll_top_frac = scroll_top / content_height; var vis_vert_frac = Math.min(vis_height / content_height, 1); var bar_height = self.$bar.height(); if (vis_vert_frac < 1) { self.$bar.css({ height: self.$el.innerHeight() + bar_height - self.$bar.outerHeight(true) }).fadeIn(50); self.$thumb.css({ top: bar_height * scroll_top_frac, height: bar_height * vis_vert_frac }); } else { self.$bar.fadeOut(50); }
    }, scroll: function scroll(ev) { var self = this; var click_frac = (ev.pageY - self.$bar.offset().top - self.mouse_off_y) / self.$bar.height(); self.$viewport.scrollTop(self.$container.outerHeight() * click_frac); self.update(); ev.preventDefault(); ev.stopPropagation(); }, onMousedown: function onMousedown(ev) { var self = this; self.scroll(ev); self.$bar.addClass('active'); $WIN.on('mousemove', self.scroll_proxy).one('mouseup', function (event1) { self.$bar.removeClass('active'); $WIN.off('mousemove', self.scroll_proxy); self.scroll(event1); }); }
}); JQ.fn[NAME] = function main(options, options2) {
    return this.each(function (idx, el) {
        var $el = JQ(el); var scrollpanel = $el.data(NAME); if (!scrollpanel) { scrollpanel = new ScrollPanel(el, options); $el.data(NAME, scrollpanel); }
        if (options === 'update') { scrollpanel.update(options2); }
    });
};; !function (a) { "function" == typeof define && define.amd ? define(["jquery"], a) : "object" == typeof exports ? module.exports = a : a(jQuery) }(function (a) { function b(b) { var g = b || window.event, h = i.call(arguments, 1), j = 0, l = 0, m = 0, n = 0, o = 0, p = 0; if (b = a.event.fix(g), b.type = "mousewheel", "detail" in g && (m = -1 * g.detail), "wheelDelta" in g && (m = g.wheelDelta), "wheelDeltaY" in g && (m = g.wheelDeltaY), "wheelDeltaX" in g && (l = -1 * g.wheelDeltaX), "axis" in g && g.axis === g.HORIZONTAL_AXIS && (l = -1 * m, m = 0), j = 0 === m ? l : m, "deltaY" in g && (m = -1 * g.deltaY, j = m), "deltaX" in g && (l = g.deltaX, 0 === m && (j = -1 * l)), 0 !== m || 0 !== l) { if (1 === g.deltaMode) { var q = a.data(this, "mousewheel-line-height"); j *= q, m *= q, l *= q } else if (2 === g.deltaMode) { var r = a.data(this, "mousewheel-page-height"); j *= r, m *= r, l *= r } if (n = Math.max(Math.abs(m), Math.abs(l)), (!f || f > n) && (f = n, d(g, n) && (f /= 40)), d(g, n) && (j /= 40, l /= 40, m /= 40), j = Math[j >= 1 ? "floor" : "ceil"](j / f), l = Math[l >= 1 ? "floor" : "ceil"](l / f), m = Math[m >= 1 ? "floor" : "ceil"](m / f), k.settings.normalizeOffset && this.getBoundingClientRect) { var s = this.getBoundingClientRect(); o = b.clientX - s.left, p = b.clientY - s.top } return b.deltaX = l, b.deltaY = m, b.deltaFactor = f, b.offsetX = o, b.offsetY = p, b.deltaMode = 0, h.unshift(b, j, l, m), e && clearTimeout(e), e = setTimeout(c, 200), (a.event.dispatch || a.event.handle).apply(this, h) } } function c() { f = null } function d(a, b) { return k.settings.adjustOldDeltas && "mousewheel" === a.type && b % 120 === 0 } var e, f, g = ["wheel", "mousewheel", "DOMMouseScroll", "MozMousePixelScroll"], h = "onwheel" in document || document.documentMode >= 9 ? ["wheel"] : ["mousewheel", "DomMouseScroll", "MozMousePixelScroll"], i = Array.prototype.slice; if (a.event.fixHooks) for (var j = g.length; j;)a.event.fixHooks[g[--j]] = a.event.mouseHooks; var k = a.event.special.mousewheel = { version: "3.1.12", setup: function () { if (this.addEventListener) for (var c = h.length; c;)this.addEventListener(h[--c], b, !1); else this.onmousewheel = b; a.data(this, "mousewheel-line-height", k.getLineHeight(this)), a.data(this, "mousewheel-page-height", k.getPageHeight(this)) }, teardown: function () { if (this.removeEventListener) for (var c = h.length; c;)this.removeEventListener(h[--c], b, !1); else this.onmousewheel = null; a.removeData(this, "mousewheel-line-height"), a.removeData(this, "mousewheel-page-height") }, getLineHeight: function (b) { var c = a(b), d = c["offsetParent" in a.fn ? "offsetParent" : "parent"](); return d.length || (d = a("body")), parseInt(d.css("fontSize"), 10) || parseInt(c.css("fontSize"), 10) || 16 }, getPageHeight: function (b) { return a(b).height() }, settings: { adjustOldDeltas: !0, normalizeOffset: !0 } }; a.fn.extend({ mousewheel: function (a) { return a ? this.bind("mousewheel", a) : this.trigger("mousewheel") }, unmousewheel: function (a) { return this.unbind("mousewheel", a) } }) });